android.net.http.SslError -> android.a.a.a:
    int mErrors -> a
    android.net.http.SslCertificate mCertificate -> b
    android.net.http.SslCertificate getCertificate() -> a
    int getPrimaryError() -> b
    java.lang.String toString() -> toString
android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.BackStackRecord:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.b:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.c:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    android.view.View getView() -> e
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> f
    void onResume() -> g
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> h
    void onStop() -> i
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> j
    void onDestroy() -> k
    void initState() -> l
    void onDetach() -> m
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> n
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> o
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> p
    void performResume() -> q
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> r
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> s
    void performStop() -> t
    void performReallyStop() -> u
    void performDestroyView() -> v
    void performDestroy() -> w
android.support.v4.app.Fragment$1 -> android.support.v4.app.d:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.e:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.f:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.g:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    java.util.HashMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.h:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.i:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    java.util.HashMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.j:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.k:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.l:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.m:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.FragmentManagerImpl$1:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$2 -> android.support.v4.app.FragmentManagerImpl$2:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$3 -> android.support.v4.app.FragmentManagerImpl$3:
    java.lang.String val$name -> a
    int val$flags -> b
    android.support.v4.app.FragmentManagerImpl this$0 -> c
    void run() -> run
android.support.v4.app.FragmentManagerImpl$4 -> android.support.v4.app.FragmentManagerImpl$4:
    int val$id -> a
    int val$flags -> b
    android.support.v4.app.FragmentManagerImpl this$0 -> c
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.n:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.o:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.p:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.q:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.r:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.s:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.t:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.ListFragment -> android.support.v4.app.u:
    android.os.Handler mHandler -> X
    java.lang.Runnable mRequestFocus -> Y
    android.widget.AdapterView$OnItemClickListener mOnClickListener -> Z
    android.widget.ListAdapter mAdapter -> P
    android.widget.ListView mList -> Q
    android.view.View mEmptyView -> R
    android.widget.TextView mStandardEmptyView -> S
    android.view.View mProgressContainer -> T
    android.view.View mListContainer -> U
    java.lang.CharSequence mEmptyText -> V
    boolean mListShown -> W
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onDestroyView() -> j
    void setListAdapter(android.widget.ListAdapter) -> a
    void setListShown(boolean,boolean) -> a
    void ensureList() -> x
android.support.v4.app.ListFragment$1 -> android.support.v4.app.ListFragment$1:
    android.support.v4.app.ListFragment this$0 -> a
    void run() -> run
android.support.v4.app.LoaderManager -> android.support.v4.app.v:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.w:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.x:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void installLoader(android.support.v4.app.LoaderManagerImpl$LoaderInfo) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.y:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void onLoadComplete(android.support.v4.content.Loader,java.lang.Object) -> a
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> b
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.z:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.aa:
android.support.v4.content.AsyncTaskLoader -> android.support.v4.content.AsyncTaskLoader:
    android.support.v4.content.AsyncTaskLoader$LoadTask mTask -> a
    android.support.v4.content.AsyncTaskLoader$LoadTask mCancellingTask -> b
    long mUpdateThrottle -> c
    long mLastLoadCompleteTime -> d
    android.os.Handler mHandler -> e
    void onCanceled(java.lang.Object) -> a
    void executePendingTask() -> a
    void dispatchOnCancelled(android.support.v4.content.AsyncTaskLoader$LoadTask,java.lang.Object) -> a
    void dispatchOnLoadComplete(android.support.v4.content.AsyncTaskLoader$LoadTask,java.lang.Object) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.AsyncTaskLoader$LoadTask -> android.support.v4.content.AsyncTaskLoader$LoadTask:
    java.lang.Object result -> a
    boolean waiting -> b
    java.util.concurrent.CountDownLatch done -> e
    android.support.v4.content.AsyncTaskLoader this$0 -> c
    void onPostExecute(java.lang.Object) -> a
    void onCancelled() -> a
    void run() -> run
android.support.v4.content.Loader -> android.support.v4.content.a:
    int mId -> f
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> g
    boolean mStarted -> h
    boolean mAbandoned -> i
    boolean mReset -> j
    boolean mContentChanged -> k
    void deliverResult(java.lang.Object) -> b
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    boolean isAbandoned() -> b
    void startLoading() -> c
    void onStartLoading() -> d
    void stopLoading() -> e
    void onStopLoading() -> f
    void reset() -> g
    void onReset() -> h
    java.lang.String dataToString(java.lang.Object) -> c
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.content.b:
    void onLoadComplete(android.support.v4.content.Loader,java.lang.Object) -> a
android.support.v4.content.ModernAsyncTask -> android.support.v4.content.c:
    java.util.concurrent.ThreadFactory sThreadFactory -> a
    java.util.concurrent.BlockingQueue sPoolWorkQueue -> b
    java.util.concurrent.Executor THREAD_POOL_EXECUTOR -> d
    android.support.v4.content.ModernAsyncTask$InternalHandler sHandler -> c
    java.util.concurrent.Executor sDefaultExecutor -> e
    android.support.v4.content.ModernAsyncTask$WorkerRunnable mWorker -> f
    java.util.concurrent.FutureTask mFuture -> g
    android.support.v4.content.ModernAsyncTask$Status mStatus -> h
    java.util.concurrent.atomic.AtomicBoolean mTaskInvoked -> i
    void postResultIfNotInvoked(java.lang.Object) -> c
    java.lang.Object postResult(java.lang.Object) -> d
    void onPreExecute() -> b
    void onPostExecute(java.lang.Object) -> a
    void onProgressUpdate(java.lang.Object[]) -> a
    void onCancelled(java.lang.Object) -> b
    void onCancelled() -> a
    boolean isCancelled() -> c
    android.support.v4.content.ModernAsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[]) -> a
    void finish(java.lang.Object) -> e
    void access$400(android.support.v4.content.ModernAsyncTask,java.lang.Object) -> a
    void access$500(android.support.v4.content.ModernAsyncTask,java.lang.Object) -> b
android.support.v4.content.ModernAsyncTask$1 -> android.support.v4.content.d:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
android.support.v4.content.ModernAsyncTask$3 -> android.support.v4.content.ModernAsyncTask$3:
    android.support.v4.content.ModernAsyncTask this$0 -> a
    void done() -> done
android.support.v4.content.ModernAsyncTask$4 -> android.support.v4.content.e:
    int[] $SwitchMap$android$support$v4$content$ModernAsyncTask$Status -> a
android.support.v4.content.ModernAsyncTask$AsyncTaskResult -> android.support.v4.content.f:
    android.support.v4.content.ModernAsyncTask mTask -> a
    java.lang.Object[] mData -> b
android.support.v4.content.ModernAsyncTask$InternalHandler -> android.support.v4.content.g:
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.content.ModernAsyncTask$Status -> android.support.v4.content.h:
    android.support.v4.content.ModernAsyncTask$Status PENDING -> a
    android.support.v4.content.ModernAsyncTask$Status RUNNING -> b
    android.support.v4.content.ModernAsyncTask$Status FINISHED -> c
    android.support.v4.content.ModernAsyncTask$Status[] $VALUES -> d
    android.support.v4.content.ModernAsyncTask$Status[] values() -> values
    android.support.v4.content.ModernAsyncTask$Status valueOf(java.lang.String) -> valueOf
android.support.v4.content.ModernAsyncTask$WorkerRunnable -> android.support.v4.content.i:
    java.lang.Object[] mParams -> a
android.support.v4.os.ParcelableCompat -> android.support.v4.a.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.a.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.a.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.a.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.a.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.b.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.b.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.b.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    java.lang.Object get(int) -> a
    java.lang.Object get(int,java.lang.Object) -> a
    void delete(int) -> b
    void remove(int) -> c
    void gc() -> c
    void put(int,java.lang.Object) -> b
    int size() -> a
    int keyAt(int) -> d
    java.lang.Object valueAt(int) -> e
    void clear() -> b
    int binarySearch(int[],int,int,int) -> a
    int idealByteArraySize(int) -> f
    int idealIntArraySize(int) -> g
android.support.v4.util.TimeUtils -> android.support.v4.b.d:
    java.lang.Object sFormatSync -> a
    char[] sFormatStr -> b
    int accumField(int,int,boolean,int) -> a
    int printField(char[],int,char,int,boolean,int) -> a
    int formatDurationLocked(long,int) -> a
    void formatDuration(long,java.io.PrintWriter,int) -> a
    void formatDuration(long,java.io.PrintWriter) -> a
    void formatDuration(long,long,java.io.PrintWriter) -> a
android.support.v4.view.AccessibilityDelegateCompat -> android.support.v4.view.a:
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL -> b
    java.lang.Object DEFAULT_DELEGATE -> c
    java.lang.Object mBridge -> a
    java.lang.Object getBridge() -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl -> android.support.v4.view.b:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1 -> android.support.v4.view.c:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl -> android.support.v4.view.d:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl -> android.support.v4.view.e:
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1 -> android.support.v4.view.f:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl -> android.support.v4.view.g:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatIcs -> android.support.v4.view.h:
    java.lang.Object newAccessibilityDelegateDefaultImpl() -> a
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatIcs$1 -> android.support.v4.view.i:
    android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge -> android.support.v4.view.j:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatJellyBean -> android.support.v4.view.k:
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean) -> a
    java.lang.Object getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatJellyBean$1 -> android.support.v4.view.l:
    android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean -> android.support.v4.view.m:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.GravityCompat -> android.support.v4.view.n:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.o:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.p:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.q:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.r:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.s:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.t:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.u:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.v:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.w:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.x:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.y:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.z:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.aa:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.ab:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.ac:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.ad:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.ae:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    java.lang.CharSequence getPageTitle(int) -> a
    float getPageWidth(int) -> b
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.af:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.ag:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.ah:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.ai:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.aj:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.ak:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.al:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.am:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.an:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ao:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ap:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.aq:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.ar:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.as:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.at:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.au:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,java.lang.Object) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.av:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> b
    void setImportantForAccessibility(android.view.View,int) -> a
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.aw:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewConfigurationCompat -> android.support.v4.view.ax:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> a
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> android.support.v4.view.ay:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> android.support.v4.view.az:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> android.support.v4.view.ba:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompatFroyo -> android.support.v4.view.bb:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    long mFakeDragBeginTime -> Q
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> R
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> S
    boolean mFirstLayout -> T
    boolean mNeedCalculatePageOffsets -> U
    boolean mCalledSuper -> V
    int mDecorChildCount -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> aa
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> ab
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ac
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ad
    int mDrawingOrder -> ae
    java.util.ArrayList mDrawingOrderedChildren -> af
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> ag
    java.lang.Runnable mEndScrollRunnable -> ah
    int mScrollState -> ai
    void initViewPager() -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> j
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> b
    void populate() -> c
    void populate(int) -> a
    void sortChildDrawingOrder() -> k
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> c
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> l
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean beginFakeDrag() -> d
    void endFakeDrag() -> e
    void fakeDragBy(float) -> b
    boolean isFakeDragging() -> f
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> m
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> g
    boolean pageRight() -> h
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    void access$000(android.support.v4.view.ViewPager,int) -> a
    android.support.v4.view.PagerAdapter access$200(android.support.v4.view.ViewPager) -> a
    int access$300(android.support.v4.view.ViewPager) -> b
    int[] access$400() -> i
android.support.v4.view.ViewPager$1 -> android.support.v4.view.bc:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.bd:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$3 -> android.support.v4.view.ViewPager$3:
    android.support.v4.view.ViewPager this$0 -> a
    void run() -> run
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.be:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.bf:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.bg:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$MyAccessibilityDelegate -> android.support.v4.view.bh:
    android.support.v4.view.ViewPager this$0 -> b
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.bi:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.bj:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.bk:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.bl:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.bm:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.bn:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat -> android.support.v4.view.a.a:
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl IMPL -> a
    java.lang.Object mInfo -> b
    java.lang.Object getInfo() -> a
    void addAction(int) -> a
    void setScrollable(boolean) -> a
    void setClassName(java.lang.CharSequence) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl -> android.support.v4.view.a.b:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl -> android.support.v4.view.a.c:
    void addAction(java.lang.Object,int) -> a
    void setScrollable(java.lang.Object,boolean) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl -> android.support.v4.view.a.d:
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl -> android.support.v4.view.a.e:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs -> android.support.v4.view.a.f:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat -> android.support.v4.view.a.g:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl IMPL -> a
    java.lang.Object mProvider -> b
    java.lang.Object getProvider() -> a
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl -> android.support.v4.view.a.h:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl -> android.support.v4.view.a.i:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1 -> android.support.v4.view.a.j:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl this$0 -> b
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    java.lang.Object createAccessibilityNodeInfo(int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl -> android.support.v4.view.a.k:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean -> android.support.v4.view.a.l:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1 -> android.support.v4.view.a.m:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge val$bridge -> a
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
    boolean performAction(int,int,android.os.Bundle) -> performAction
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge -> android.support.v4.view.a.n:
    java.lang.Object createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    int mMinDrawerMargin -> b
    int mScrimColor -> c
    float mScrimOpacity -> d
    android.graphics.Paint mScrimPaint -> e
    android.support.v4.widget.ViewDragHelper mLeftDragger -> f
    android.support.v4.widget.ViewDragHelper mRightDragger -> g
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> i
    int mDrawerState -> j
    boolean mInLayout -> k
    boolean mFirstLayout -> l
    int mLockModeLeft -> m
    int mLockModeRight -> n
    boolean mDisallowInterceptRequested -> o
    boolean mChildrenCanceledTouch -> p
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> q
    float mInitialMotionX -> r
    float mInitialMotionY -> s
    android.graphics.drawable.Drawable mShadowLeft -> t
    android.graphics.drawable.Drawable mShadowRight -> u
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewGravity(android.view.View) -> e
    boolean checkDrawerViewGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> k
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void closeDrawer(android.view.View) -> i
    boolean isDrawerVisible(android.view.View) -> j
    boolean hasPeekingDrawer() -> e
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> f
    android.view.View findVisibleDrawer() -> g
    void cancelChildViewTouch() -> c
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int[] access$100() -> d
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.a:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.b:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.c:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.d:
    int mGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    void peekDrawer() -> c
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
    void access$000(android.support.v4.widget.DrawerLayout$ViewDragCallback) -> a
android.support.v4.widget.DrawerLayout$ViewDragCallback$1 -> android.support.v4.widget.DrawerLayout$ViewDragCallback$1:
    android.support.v4.widget.DrawerLayout$ViewDragCallback this$1 -> a
    void run() -> run
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.e:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean onAbsorb(int) -> a
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.f:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean onAbsorb(java.lang.Object,int) -> a
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.g:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean onAbsorb(java.lang.Object,int) -> a
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.h:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean onAbsorb(java.lang.Object,int) -> a
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.i:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean onAbsorb(java.lang.Object,int) -> a
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.j:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl IMPL -> b
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.k:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.l:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.m:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.n:
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.o:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawable -> d
    int mOverhangSize -> e
    boolean mCanSlide -> f
    android.view.View mSlideableView -> g
    float mSlideOffset -> h
    float mParallaxOffset -> i
    int mSlideRange -> j
    boolean mIsUnableToDrag -> k
    int mParallaxBy -> l
    float mInitialMotionX -> m
    float mInitialMotionY -> n
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> o
    android.support.v4.widget.ViewDragHelper mDragHelper -> p
    boolean mPreservedOpenState -> q
    boolean mFirstLayout -> r
    android.graphics.Rect mTmpRect -> s
    java.util.ArrayList mPostedRunnables -> t
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean hasOpaqueBackground(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowResource(int) -> setShadowResource
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void access$900(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1000(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.p:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.q:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.r:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.s:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.t:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.u:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.v:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.w:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.x:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    int getViewDragState() -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> a
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> e
    void ensureMotionHistorySizeForId(int) -> f
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> a
    void setDragState(int) -> b
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> c
    boolean checkTouchSlop(int,int) -> b
    boolean isEdgeTouched(int) -> d
    boolean isEdgeTouched(int,int) -> c
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> d
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> e
    int getEdgesTouched(int,int) -> f
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.y:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$2 -> android.support.v4.widget.ViewDragHelper$2:
    android.support.v4.widget.ViewDragHelper this$0 -> a
    void run() -> run
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.z:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
com.aviary.android.feather.AviaryMainController -> com.aviary.android.feather.AviaryMainController:
    android.graphics.Bitmap mBitmap -> a
    com.aviary.android.feather.AviaryMainController$FeatherContext mContext -> b
    com.aviary.android.feather.effects.AbstractPanel mCurrentEffect -> c
    com.aviary.android.feather.library.content.ToolEntry mCurrentEntry -> d
    com.aviary.android.feather.AviaryMainController$STATE mCurrentState -> e
    com.aviary.android.feather.AviaryMainController$OnToolListener mToolListener -> f
    com.aviary.android.feather.AviaryMainController$OnBitmapChangeListener mBitmapChangeListener -> g
    android.os.Handler mHandler -> h
    com.aviary.android.feather.library.services.ServiceLoader mServiceLoader -> i
    com.aviary.android.feather.effects.AbstractPanelLoaderService mPanelCreatorService -> j
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> k
    boolean mChanged -> l
    android.content.res.Configuration mConfiguration -> m
    java.lang.String mApiKey -> n
    java.lang.String mSessionId -> o
    boolean mHiResEnabled -> p
    com.aviary.android.feather.AviaryMainController$OnHiResListener mHiResListener -> q
    com.aviary.android.feather.library.services.drag.DragLayer mDragLayer -> r
    android.os.Handler mPluingsHandler -> s
    java.lang.Boolean mAppIsUpdated -> t
    int[] $SWITCH_TABLE$com$aviary$android$feather$AviaryMainController$STATE -> u
    boolean getAppIsUpdated() -> a
    void setDragLayer(com.aviary.android.feather.library.services.drag.DragLayer) -> a
    void initServices(com.aviary.android.feather.AviaryMainController$FeatherContext) -> a
    void openDatabase() -> z
    void updateAvailablePlugins() -> A
    void updateInstalledPlugins(android.os.Bundle) -> a
    void initHiResService() -> B
    void activateTool(com.aviary.android.feather.library.content.ToolEntry) -> a
    void activateTool(com.aviary.android.feather.library.content.ToolEntry,android.os.Bundle) -> a
    void dispose() -> b
    android.content.Context getBaseContext() -> c
    android.app.Activity getBaseActivity() -> d
    android.graphics.Bitmap getBitmap() -> e
    boolean getBitmapIsChanged() -> f
    com.aviary.android.feather.library.content.ToolEntry getActiveTool() -> g
    android.graphics.Matrix getCurrentImageViewMatrix() -> h
    boolean getEnabled() -> i
    java.lang.Object getService(java.lang.Class) -> a
    boolean isClosed() -> j
    boolean isOpened() -> k
    void onActivate(android.graphics.Bitmap,int[]) -> a
    void onApply() -> l
    boolean onBackPressed() -> m
    void onCancel() -> n
    void cancel() -> o
    void onClose(boolean) -> c
    void onComplete(android.graphics.Bitmap,com.aviary.android.feather.headless.moa.MoaActionList,java.util.HashMap) -> a
    void setNextBitmap(android.graphics.Bitmap,boolean) -> a
    void setNextBitmap(android.graphics.Bitmap,boolean,android.graphics.Matrix) -> a
    void onError(java.lang.CharSequence,int,android.content.DialogInterface$OnClickListener) -> a
    void onError(java.lang.CharSequence,int,android.content.DialogInterface$OnClickListener,int,android.content.DialogInterface$OnClickListener) -> a
    void onMessage(java.lang.CharSequence,java.lang.CharSequence,int,android.content.DialogInterface$OnClickListener) -> a
    void onMessage(java.lang.CharSequence,java.lang.CharSequence,int,android.content.DialogInterface$OnClickListener,int,android.content.DialogInterface$OnClickListener) -> a
    void onPreviewChange(android.graphics.Bitmap,boolean) -> b
    void onPreviewUpdated() -> p
    void onReady(com.aviary.android.feather.effects.AbstractPanel) -> a
    void onReplaceImage(android.graphics.Bitmap,int[]) -> b
    void onSave() -> q
    void prepareToolPanel(com.aviary.android.feather.effects.AbstractPanel,com.aviary.android.feather.library.content.ToolEntry,android.os.Bundle) -> a
    void setCurrentState(com.aviary.android.feather.AviaryMainController$STATE) -> a
    void setEnabled(boolean) -> a
    void setOnToolListener(com.aviary.android.feather.AviaryMainController$OnToolListener) -> a
    void setOnBitmapChangeListener(com.aviary.android.feather.AviaryMainController$OnBitmapChangeListener) -> a
    boolean onConfigurationChanged(android.content.res.Configuration) -> a
    void onPluginChanged(android.content.Intent) -> a
    void onProgressStart() -> r
    void onProgressEnd() -> s
    void onProgressModalStart() -> t
    void onProgressModalEnd() -> u
    void setToolbarTitle(int) -> a
    void setToolbarTitle(java.lang.CharSequence) -> a
    void restoreToolbarTitle() -> v
    void setPanelApplyStatusEnabled(boolean) -> b
    void downloadPlugin(java.lang.String,int) -> a
    void searchPlugin(int) -> b
    void searchOrDownloadPlugin(java.lang.String,int,boolean) -> a
    com.aviary.android.feather.library.services.drag.DragLayer getDragLayer() -> w
    com.aviary.android.feather.library.log.LoggerFactory$Logger access$0(com.aviary.android.feather.AviaryMainController) -> a
    android.os.Handler access$1() -> x
    com.aviary.android.feather.effects.AbstractPanel access$2(com.aviary.android.feather.AviaryMainController) -> b
    void access$3(com.aviary.android.feather.AviaryMainController,com.aviary.android.feather.AviaryMainController$STATE) -> a
    com.aviary.android.feather.AviaryMainController$FeatherContext access$4(com.aviary.android.feather.AviaryMainController) -> c
    int[] $SWITCH_TABLE$com$aviary$android$feather$AviaryMainController$STATE() -> y
com.aviary.android.feather.AviaryMainController$1 -> com.aviary.android.feather.a:
    com.aviary.android.feather.AviaryMainController this$0 -> a
    java.lang.Void call(com.aviary.android.feather.library.services.IAviaryController,java.lang.Void) -> a
    java.lang.Object call(com.aviary.android.feather.library.services.IAviaryController,java.lang.Object) -> a
com.aviary.android.feather.AviaryMainController$2 -> com.aviary.android.feather.b:
    com.aviary.android.feather.AviaryMainController this$0 -> a
    void onFutureDone(java.util.concurrent.Future) -> a
com.aviary.android.feather.AviaryMainController$3 -> com.aviary.android.feather.c:
    com.aviary.android.feather.AviaryMainController this$0 -> a
    void onFutureDone(java.util.concurrent.Future) -> a
com.aviary.android.feather.AviaryMainController$4 -> com.aviary.android.feather.d:
    com.aviary.android.feather.AviaryMainController this$0 -> a
    void OnOpenStart() -> a
    void OnOpenEnd() -> b
    void OnCloseStart() -> c
    void OnCloseEnd() -> d
com.aviary.android.feather.AviaryMainController$5 -> com.aviary.android.feather.e:
    com.aviary.android.feather.AviaryMainController this$0 -> a
    boolean val$isConfirmed -> b
    void OnOpenStart() -> a
    void OnOpenEnd() -> b
    void OnCloseStart() -> c
    void OnCloseEnd() -> d
com.aviary.android.feather.AviaryMainController$6 -> com.aviary.android.feather.AviaryMainController$6:
    com.aviary.android.feather.AviaryMainController this$0 -> a
    void run() -> run
com.aviary.android.feather.AviaryMainController$ExternalPluginTaskCompletedRunnable -> com.aviary.android.feather.AviaryMainController$ExternalPluginTaskCompletedRunnable:
    android.os.Bundle mResult -> a
    com.aviary.android.feather.AviaryMainController this$0 -> b
    void run() -> run
com.aviary.android.feather.AviaryMainController$FeatherContext -> com.aviary.android.feather.f:
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase getMainImage() -> a
    com.aviary.android.feather.widget.AviaryBottomBarViewFlipper getBottomBar() -> b
    android.view.ViewGroup getOptionsPanelContainer() -> c
    android.view.ViewGroup getDrawingImageContainer() -> d
    android.view.ViewGroup activatePopupContainer() -> e
    void deactivatePopupContainer() -> f
    void showToolProgress() -> g
    void hideToolProgress() -> h
    void showModalProgress() -> i
    void hideModalProgress() -> j
com.aviary.android.feather.AviaryMainController$OnBitmapChangeListener -> com.aviary.android.feather.g:
    void onBitmapChange(android.graphics.Bitmap,boolean,android.graphics.Matrix) -> a
    void onPreviewChange(android.graphics.Bitmap,boolean) -> a
    void onInvalidateBitmap() -> k
com.aviary.android.feather.AviaryMainController$OnHiResListener -> com.aviary.android.feather.h:
    void OnLoad(android.net.Uri) -> a
    void OnApplyActions(com.aviary.android.feather.headless.moa.MoaActionList) -> a
com.aviary.android.feather.AviaryMainController$OnToolListener -> com.aviary.android.feather.i:
    void onToolCompleted() -> l
com.aviary.android.feather.AviaryMainController$PluginHandler -> com.aviary.android.feather.AviaryMainController$PluginHandler:
    java.lang.ref.WeakReference mContext -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.AviaryMainController$PluginTaskCompletedRunnable -> com.aviary.android.feather.AviaryMainController$PluginTaskCompletedRunnable:
    com.aviary.android.feather.library.plugins.PluginFetchTask$Result mResult -> a
    com.aviary.android.feather.AviaryMainController this$0 -> b
    void run() -> run
com.aviary.android.feather.AviaryMainController$STATE -> com.aviary.android.feather.j:
    com.aviary.android.feather.AviaryMainController$STATE CLOSED_CANCEL -> a
    com.aviary.android.feather.AviaryMainController$STATE CLOSED_CONFIRMED -> b
    com.aviary.android.feather.AviaryMainController$STATE CLOSING -> c
    com.aviary.android.feather.AviaryMainController$STATE DISABLED -> d
    com.aviary.android.feather.AviaryMainController$STATE OPENED -> e
    com.aviary.android.feather.AviaryMainController$STATE OPENING -> f
    com.aviary.android.feather.AviaryMainController$STATE[] ENUM$VALUES -> g
    com.aviary.android.feather.AviaryMainController$STATE[] values() -> values
    com.aviary.android.feather.AviaryMainController$STATE valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.FeatherActivity -> com.aviary.android.feather.k:
    int pResultCode -> h
    com.aviary.android.feather.widget.AviaryNavBarViewFlipper mToolbar -> i
    it.sephiroth.android.library.widget.HorizontalVariableListView mToolsList -> j
    it.sephiroth.android.library.imagezoom.ImageViewTouch mImageView -> k
    com.aviary.android.feather.widget.AviaryToast mToastLoader -> l
    android.view.ViewGroup mDrawingViewContainer -> m
    android.view.View mInlineProgressLoader -> n
    com.aviary.android.feather.AviaryMainController mMainController -> a
    java.util.List mToolList -> b
    boolean mSaving -> c
    int mOrientation -> o
    com.aviary.android.feather.widget.AviaryBottomBarViewFlipper mBottomBarFlipper -> p
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> d
    android.os.Handler mHandler -> e
    boolean mHideExitAlertConfirmation -> f
    java.util.List mListEntries -> q
    android.view.ViewGroup mPopupContainer -> r
    com.aviary.android.feather.library.services.drag.DragLayer mDragLayer -> s
    com.aviary.android.feather.async_tasks.DownloadImageAsyncTask mDownloadTask -> t
    boolean mIsRunning -> u
    android.os.Handler mUIHandler -> v
    android.content.BroadcastReceiver mDefaultReceiver -> w
    void onSetResult(int,android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onPreCreate() -> m
    void onRegisterReceiver() -> n
    void onInitializeUtils() -> o
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void onDestroy() -> onDestroy
    void onInitializeUI() -> z
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    android.app.Dialog createAboutDialog() -> p
    android.app.Dialog createFeedbackDialog() -> q
    void onRevert() -> A
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onBottomBarItemClick(int) -> a
    void loadImage(android.net.Uri) -> a
    void onContentChanged() -> onContentChanged
    void onBackPressed() -> onBackPressed
    void onBackPressed(boolean) -> a
    android.net.Uri handleIntent(android.content.Intent) -> a
    void delayedInitializeTools() -> B
    java.util.List loadStandaloneTools() -> C
    java.util.List loadTools() -> D
    void onToolsLoaded(java.util.List) -> a
    android.view.ViewGroup getOptionsPanelContainer() -> c
    com.aviary.android.feather.widget.AviaryBottomBarViewFlipper getBottomBar() -> b
    it.sephiroth.android.library.imagezoom.ImageViewTouch getMainImage() -> r
    android.view.ViewGroup getDrawingImageContainer() -> d
    android.view.ViewGroup activatePopupContainer() -> e
    void deactivatePopupContainer() -> f
    void onDoneClick() -> s
    void exitWithNoModifications() -> t
    void onApplyClick() -> u
    void loadExif() -> v
    void computeOriginalFilePath() -> w
    void onDownloadComplete(android.graphics.Bitmap,com.aviary.android.feather.library.utils.ImageLoader$ImageSizes) -> a
    void onDownloadError(java.lang.String) -> a
    void hideProgressLoader() -> E
    void onDownloadStart() -> x
    void onPreviewChange(android.graphics.Bitmap,boolean) -> a
    void onInvalidateBitmap() -> k
    void onBitmapChange(android.graphics.Bitmap,boolean,android.graphics.Matrix) -> a
    void performSave(android.graphics.Bitmap,boolean) -> b
    void doSave(android.graphics.Bitmap,boolean) -> c
    void saveExif(android.net.Uri) -> b
    void saveExif(java.lang.String) -> b
    void onSaveCustomTags(com.aviary.android.feather.headless.media.ExifInterfaceWrapper) -> a
    void onToolCompleted() -> l
    void showToolProgress() -> g
    void hideToolProgress() -> h
    void showModalProgress() -> i
    void hideModalProgress() -> j
    void onStart() -> onStart
    void onStop() -> onStop
    void onRestart() -> onRestart
    void onResume() -> onResume
    void onPause() -> onPause
    void onImageSize(java.lang.String,java.lang.String,java.lang.String) -> a
    com.aviary.android.feather.AviaryMainController getMainController() -> y
    boolean onItemClick(android.widget.AdapterView,android.view.View,int,long) -> a
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase getMainImage() -> a
    com.aviary.android.feather.widget.AviaryNavBarViewFlipper access$1(com.aviary.android.feather.FeatherActivity) -> a
    it.sephiroth.android.library.imagezoom.ImageViewTouch access$2(com.aviary.android.feather.FeatherActivity) -> b
    it.sephiroth.android.library.widget.HorizontalVariableListView access$3(com.aviary.android.feather.FeatherActivity) -> c
    void access$4(com.aviary.android.feather.FeatherActivity) -> d
    java.util.List access$5(com.aviary.android.feather.FeatherActivity) -> e
    android.view.View access$6(com.aviary.android.feather.FeatherActivity) -> f
com.aviary.android.feather.FeatherActivity$1 -> com.aviary.android.feather.l:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    boolean handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.FeatherActivity$10 -> com.aviary.android.feather.m:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    android.app.Dialog val$dialog -> b
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.FeatherActivity$11 -> com.aviary.android.feather.FeatherActivity$11:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void run() -> run
    com.aviary.android.feather.FeatherActivity access$0(com.aviary.android.feather.FeatherActivity$11) -> a
com.aviary.android.feather.FeatherActivity$11$1 -> com.aviary.android.feather.FeatherActivity$11$1:
    com.aviary.android.feather.FeatherActivity$11 this$1 -> a
    java.util.List val$listEntries -> b
    void run() -> run
com.aviary.android.feather.FeatherActivity$12 -> com.aviary.android.feather.n:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    com.aviary.android.feather.library.services.LocalDataService val$data -> b
    void onFutureDone(java.util.concurrent.Future) -> a
com.aviary.android.feather.FeatherActivity$13 -> com.aviary.android.feather.o:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.aviary.android.feather.FeatherActivity$14 -> com.aviary.android.feather.FeatherActivity$14:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    android.graphics.Bitmap val$bitmap -> b
    boolean val$changed -> c
    void run() -> run
com.aviary.android.feather.FeatherActivity$15 -> com.aviary.android.feather.FeatherActivity$15:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    android.graphics.Bitmap val$b -> b
    void run() -> run
com.aviary.android.feather.FeatherActivity$16 -> com.aviary.android.feather.FeatherActivity$16:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    java.lang.Object val$tag -> b
    void run() -> run
com.aviary.android.feather.FeatherActivity$2 -> com.aviary.android.feather.p:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.aviary.android.feather.FeatherActivity$3 -> com.aviary.android.feather.q:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.FeatherActivity$4 -> com.aviary.android.feather.r:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.FeatherActivity$5 -> com.aviary.android.feather.s:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.FeatherActivity$6 -> com.aviary.android.feather.t:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.FeatherActivity$7 -> com.aviary.android.feather.u:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    android.app.Dialog val$dialog -> b
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.FeatherActivity$8 -> com.aviary.android.feather.v:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    android.app.Dialog val$dialog -> b
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.FeatherActivity$9 -> com.aviary.android.feather.w:
    com.aviary.android.feather.FeatherActivity this$0 -> a
    android.app.Dialog val$dialog -> b
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.FeatherActivity$ListAdapter -> com.aviary.android.feather.x:
    java.lang.Object mLock -> a
    android.view.LayoutInflater mInflater -> b
    java.util.List mObjects -> c
    int mViewWidth -> d
    int mToolViewWidth -> e
    boolean mWhiteLabel -> f
    com.aviary.android.feather.FeatherActivity this$0 -> g
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.aviary.android.feather.library.content.ToolEntry getItem(int) -> a
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    java.lang.Object getItem(int) -> getItem
com.aviary.android.feather.FeatherActivity$ListAdapter$ViewHolder -> com.aviary.android.feather.y:
    android.widget.ImageView image -> a
    android.widget.TextView text -> b
    com.aviary.android.feather.FeatherActivity$ListAdapter this$1 -> c
com.aviary.android.feather.R -> com.aviary.android.feather.z:
com.aviary.android.feather.R$anim -> com.aviary.android.feather.aa:
    int aviary_bottobar_in_animation -> aviary_bottobar_in_animation
    int aviary_bottobar_out_animation -> aviary_bottobar_out_animation
    int aviary_iap_close_animation -> aviary_iap_close_animation
    int aviary_iap_layout_animation -> aviary_iap_layout_animation
    int aviary_push_up_in -> aviary_push_up_in
    int aviary_push_up_out -> aviary_push_up_out
    int aviary_slide_in_top -> aviary_slide_in_top
    int aviary_toast_exit -> aviary_toast_exit
com.aviary.android.feather.R$array -> com.aviary.android.feather.ab:
    int aviary_crop_labels -> aviary_crop_labels
    int aviary_crop_values -> aviary_crop_values
    int aviary_draw_brush_sizes -> aviary_draw_brush_sizes
    int aviary_draw_fill_colors -> aviary_draw_fill_colors
    int aviary_spot_brush_sizes -> aviary_spot_brush_sizes
    int aviary_text_fill_colors -> aviary_text_fill_colors
    int borders_list -> borders_list
com.aviary.android.feather.R$attr -> com.aviary.android.feather.ac:
    int aviaryAdjustDividerWeight -> aviaryAdjustDividerWeight
    int aviaryAdjustImageViewStyle -> aviaryAdjustImageViewStyle
    int aviaryAdjustItemWeight -> aviaryAdjustItemWeight
    int aviaryAdjustOptionPanelToggleButtonStyle -> aviaryAdjustOptionPanelToggleButtonStyle
    int aviaryAdjustOptionPanelToggleCenterButtonStyle -> aviaryAdjustOptionPanelToggleCenterButtonStyle
    int aviaryAdjustOptionPanelToggleLeftButtonStyle -> aviaryAdjustOptionPanelToggleLeftButtonStyle
    int aviaryAdjustOptionPanelToggleRightButtonStyle -> aviaryAdjustOptionPanelToggleRightButtonStyle
    int aviaryBackgroundColor -> aviaryBackgroundColor
    int aviaryBottomBarHeight -> aviaryBottomBarHeight
    int aviaryBottomBarHorizontalViewStyle -> aviaryBottomBarHorizontalViewStyle
    int aviaryBottomBarLogoContainerStyle -> aviaryBottomBarLogoContainerStyle
    int aviaryBottomBarLogoImageStyle -> aviaryBottomBarLogoImageStyle
    int aviaryBottomBarOptionPanelContainerStyle -> aviaryBottomBarOptionPanelContainerStyle
    int aviaryBottomBarOptionPanelContainerStyleNoMargin -> aviaryBottomBarOptionPanelContainerStyleNoMargin
    int aviaryBottomBarOptionPanelStyle -> aviaryBottomBarOptionPanelStyle
    int aviaryBottomBarToolFeedBackStyle -> aviaryBottomBarToolFeedBackStyle
    int aviaryBottomBarToolImageStyle -> aviaryBottomBarToolImageStyle
    int aviaryBottomBarToolStyle -> aviaryBottomBarToolStyle
    int aviaryBottomBarToolTextStyle -> aviaryBottomBarToolTextStyle
    int aviaryBottomBarViewFlipperStyle -> aviaryBottomBarViewFlipperStyle
    int aviaryColorSplashOptionPanelToggleButtonStyle -> aviaryColorSplashOptionPanelToggleButtonStyle
    int aviaryColorSplashOptionPanelToggleLeftButtonStyle -> aviaryColorSplashOptionPanelToggleLeftButtonStyle
    int aviaryColorSplashOptionPanelToggleRightButtonStyle -> aviaryColorSplashOptionPanelToggleRightButtonStyle
    int aviaryCropHighlightStyle -> aviaryCropHighlightStyle
    int aviaryCropImageViewStyle -> aviaryCropImageViewStyle
    int aviaryCrosshair_enabled -> aviaryCrosshair_enabled
    int aviaryCustomDialogButtonSecondaryStyle -> aviaryCustomDialogButtonSecondaryStyle
    int aviaryCustomDialogButtonStyle -> aviaryCustomDialogButtonStyle
    int aviaryDefaultTextStyle -> aviaryDefaultTextStyle
    int aviaryEdgeEffectDefaultStyle -> aviaryEdgeEffectDefaultStyle
    int aviaryEffectThumbDividerLeftContainerStyle -> aviaryEffectThumbDividerLeftContainerStyle
    int aviaryEffectThumbDividerLeftStyle -> aviaryEffectThumbDividerLeftStyle
    int aviaryEffectThumbDividerRightContainerStyle -> aviaryEffectThumbDividerRightContainerStyle
    int aviaryEffectThumbDividerRightStyle -> aviaryEffectThumbDividerRightStyle
    int aviaryEffectThumbDividerStyle -> aviaryEffectThumbDividerStyle
    int aviaryEffectThumbDividerTextStyle -> aviaryEffectThumbDividerTextStyle
    int aviaryEffectThumbHiddenSelector -> aviaryEffectThumbHiddenSelector
    int aviaryEffectThumbLayoutExternalStyle -> aviaryEffectThumbLayoutExternalStyle
    int aviaryEffectThumbLayoutStyle -> aviaryEffectThumbLayoutStyle
    int aviaryEffectThumbTextStyle -> aviaryEffectThumbTextStyle
    int aviaryEffectsHorizontalViewStyle -> aviaryEffectsHorizontalViewStyle
    int aviaryEnhanceItemWeight -> aviaryEnhanceItemWeight
    int aviaryEnhanceOptionPanelToggleCenterButtonStyle -> aviaryEnhanceOptionPanelToggleCenterButtonStyle
    int aviaryEnhanceOptionPanelToggleLeftButtonStyle -> aviaryEnhanceOptionPanelToggleLeftButtonStyle
    int aviaryEnhanceOptionPanelToggleRightButtonStyle -> aviaryEnhanceOptionPanelToggleRightButtonStyle
    int aviaryFeedbackDialogDividerStyle -> aviaryFeedbackDialogDividerStyle
    int aviaryFeedbackDialogStyle -> aviaryFeedbackDialogStyle
    int aviaryFeedbackDialogTextMessageStyle -> aviaryFeedbackDialogTextMessageStyle
    int aviaryFeedbackDialogTextVersionStyle -> aviaryFeedbackDialogTextVersionStyle
    int aviaryFocusOptionPanelToggleLeftButtonStyle -> aviaryFocusOptionPanelToggleLeftButtonStyle
    int aviaryFocusOptionPanelToggleRightButtonStyle -> aviaryFocusOptionPanelToggleRightButtonStyle
    int aviaryFontLight -> aviaryFontLight
    int aviaryFontRegular -> aviaryFontRegular
    int aviaryGalleryBottomIndicatorStyle -> aviaryGalleryBottomIndicatorStyle
    int aviaryGalleryItemContainerStyle -> aviaryGalleryItemContainerStyle
    int aviaryGalleryItemCropImageViewStyle -> aviaryGalleryItemCropImageViewStyle
    int aviaryGalleryItemCropTextCustomStyle -> aviaryGalleryItemCropTextCustomStyle
    int aviaryGalleryItemCropTextNormalStyle -> aviaryGalleryItemCropTextNormalStyle
    int aviaryGalleryItemDividerStyle -> aviaryGalleryItemDividerStyle
    int aviaryGalleryItemHighlightImageStyle -> aviaryGalleryItemHighlightImageStyle
    int aviaryGalleryStyle -> aviaryGalleryStyle
    int aviaryGalleryTopIndicatorStyle -> aviaryGalleryTopIndicatorStyle
    int aviaryHiddenEditTextStyle -> aviaryHiddenEditTextStyle
    int aviaryHiddenEditTextStyleMultiline -> aviaryHiddenEditTextStyleMultiline
    int aviaryHighlightImageButtonStyle -> aviaryHighlightImageButtonStyle
    int aviaryIAPDialogContainerStyle -> aviaryIAPDialogContainerStyle
    int aviaryIAPDialogDownloadButtonStyle -> aviaryIAPDialogDownloadButtonStyle
    int aviaryIAPDialogGridBackground -> aviaryIAPDialogGridBackground
    int aviaryIAPDialogGridTopStyle -> aviaryIAPDialogGridTopStyle
    int aviaryIAPDialogHeightWeight -> aviaryIAPDialogHeightWeight
    int aviaryIAPDialogIcon -> aviaryIAPDialogIcon
    int aviaryIAPDialogMainLayout -> aviaryIAPDialogMainLayout
    int aviaryIAPDialogMarginTopWeight -> aviaryIAPDialogMarginTopWeight
    int aviaryIAPDialogShadowBottom -> aviaryIAPDialogShadowBottom
    int aviaryIAPDialogShadowTop -> aviaryIAPDialogShadowTop
    int aviaryIAPDialogTextStyle -> aviaryIAPDialogTextStyle
    int aviaryIAPDialogTitleStyle -> aviaryIAPDialogTitleStyle
    int aviaryIAPDialogWidthWeight -> aviaryIAPDialogWidthWeight
    int aviaryIAPDialogWorkspaceIndicatorStyle -> aviaryIAPDialogWorkspaceIndicatorStyle
    int aviaryIAPDialogWorkspaceStyle -> aviaryIAPDialogWorkspaceStyle
    int aviaryImageViewDrawableOverlaySticker -> aviaryImageViewDrawableOverlaySticker
    int aviaryImageViewDrawableOverlayStickerHighlightStyle -> aviaryImageViewDrawableOverlayStickerHighlightStyle
    int aviaryImageViewDrawableOverlayText -> aviaryImageViewDrawableOverlayText
    int aviaryImageViewDrawableOverlayTextHighlightStyle -> aviaryImageViewDrawableOverlayTextHighlightStyle
    int aviaryLensViewStyle -> aviaryLensViewStyle
    int aviaryLoaderToastStyle -> aviaryLoaderToastStyle
    int aviaryMainImagePadding -> aviaryMainImagePadding
    int aviaryMemeButtonStyle -> aviaryMemeButtonStyle
    int aviaryMemeClearButtonStyle -> aviaryMemeClearButtonStyle
    int aviaryNavBarHeight -> aviaryNavBarHeight
    int aviaryNavBarStyle -> aviaryNavBarStyle
    int aviaryNavButtonApplyStyle -> aviaryNavButtonApplyStyle
    int aviaryNavButtonStyle -> aviaryNavButtonStyle
    int aviaryNavDividerStyle -> aviaryNavDividerStyle
    int aviaryNavTitleStyle -> aviaryNavTitleStyle
    int aviaryOptionPanelBottomIndicatorStyle -> aviaryOptionPanelBottomIndicatorStyle
    int aviaryOptionPanelBottomLineStyle -> aviaryOptionPanelBottomLineStyle
    int aviaryOptionPanelDefaultButtonStyle -> aviaryOptionPanelDefaultButtonStyle
    int aviaryOptionPanelToggleButtonStyle -> aviaryOptionPanelToggleButtonStyle
    int aviaryOptionPanelToggleCenterButtonStyle -> aviaryOptionPanelToggleCenterButtonStyle
    int aviaryOptionPanelToggleLeftButtonStyle -> aviaryOptionPanelToggleLeftButtonStyle
    int aviaryOptionPanelToggleRightButtonStyle -> aviaryOptionPanelToggleRightButtonStyle
    int aviaryOptionPanelTopIndicatorStyle -> aviaryOptionPanelTopIndicatorStyle
    int aviaryPanelDisabledStatusBackground -> aviaryPanelDisabledStatusBackground
    int aviaryPreviewFillDrawableStyle -> aviaryPreviewFillDrawableStyle
    int aviaryPreviewSpotDrawableStyle -> aviaryPreviewSpotDrawableStyle
    int aviaryPreviewSpotViewStyle -> aviaryPreviewSpotViewStyle
    int aviaryPrimaryButtonStyle -> aviaryPrimaryButtonStyle
    int aviaryProgressBarActionBar -> aviaryProgressBarActionBar
    int aviaryProgressBarActionBarHeight -> aviaryProgressBarActionBarHeight
    int aviaryProgressBarActionBarWidth -> aviaryProgressBarActionBarWidth
    int aviaryProgressBarLarge -> aviaryProgressBarLarge
    int aviaryProgressBarLargeInverse -> aviaryProgressBarLargeInverse
    int aviaryProgressBarMedium -> aviaryProgressBarMedium
    int aviaryProgressBarMediumInverse -> aviaryProgressBarMediumInverse
    int aviaryProgressBarSmall -> aviaryProgressBarSmall
    int aviaryProgressBarSmallInverse -> aviaryProgressBarSmallInverse
    int aviarySecondaryButtonStyle -> aviarySecondaryButtonStyle
    int aviarySeekBarSecondary -> aviarySeekBarSecondary
    int aviarySeekBarSecondaryCenter -> aviarySeekBarSecondaryCenter
    int aviarySeekBarSecondaryInverted -> aviarySeekBarSecondaryInverted
    int aviarySeekBarStyle -> aviarySeekBarStyle
    int aviarySeekBarThumb -> aviarySeekBarThumb
    int aviarySeekBarThumbOffset -> aviarySeekBarThumbOffset
    int aviarySplashDividerWeight -> aviarySplashDividerWeight
    int aviarySplashItemWeight -> aviarySplashItemWeight
    int aviarySymbolMinusStyle -> aviarySymbolMinusStyle
    int aviarySymbolPlusStyle -> aviarySymbolPlusStyle
    int aviaryTiltShiftViewStyle -> aviaryTiltShiftViewStyle
    int aviaryToastExitAnimation -> aviaryToastExitAnimation
    int aviaryToggleButtonStyle -> aviaryToggleButtonStyle
    int aviaryWave_animationDuration -> aviaryWave_animationDuration
    int aviaryWave_innerRadius -> aviaryWave_innerRadius
    int aviaryWave_outerRadius -> aviaryWave_outerRadius
    int aviaryWave_pointDrawable -> aviaryWave_pointDrawable
    int aviaryWheelIndicator -> aviaryWheelIndicator
    int aviaryWheelLine -> aviaryWheelLine
    int aviaryWheelShadowTop -> aviaryWheelShadowTop
    int aviaryWheelStyle -> aviaryWheelStyle
    int aviary_animationDuration -> aviary_animationDuration
    int aviary_animationDuration2 -> aviary_animationDuration2
    int aviary_bg_color1 -> aviary_bg_color1
    int aviary_bg_color2 -> aviary_bg_color2
    int aviary_blendMode -> aviary_blendMode
    int aviary_cellBottomPadding -> aviary_cellBottomPadding
    int aviary_cellEndPadding -> aviary_cellEndPadding
    int aviary_cellStartPadding -> aviary_cellStartPadding
    int aviary_cellTopPadding -> aviary_cellTopPadding
    int aviary_cells -> aviary_cells
    int aviary_checked -> aviary_checked
    int aviary_color1 -> aviary_color1
    int aviary_color2 -> aviary_color2
    int aviary_color3 -> aviary_color3
    int aviary_color4 -> aviary_color4
    int aviary_crosshair_edge -> aviary_crosshair_edge
    int aviary_crosshair_radius -> aviary_crosshair_radius
    int aviary_crosshair_strokeWidth -> aviary_crosshair_strokeWidth
    int aviary_defaultScreen -> aviary_defaultScreen
    int aviary_deleteDrawable -> aviary_deleteDrawable
    int aviary_direction -> aviary_direction
    int aviary_drawableStyle -> aviary_drawableStyle
    int aviary_edgeColor -> aviary_edgeColor
    int aviary_edgeDrawable -> aviary_edgeDrawable
    int aviary_edgeStyle -> aviary_edgeStyle
    int aviary_enable3d -> aviary_enable3d
    int aviary_freeRotate -> aviary_freeRotate
    int aviary_glowDrawable -> aviary_glowDrawable
    int aviary_glowMode -> aviary_glowMode
    int aviary_glowSize -> aviary_glowSize
    int aviary_handle -> aviary_handle
    int aviary_highlightColorChecked -> aviary_highlightColorChecked
    int aviary_highlightColorPressed -> aviary_highlightColorPressed
    int aviary_highlightColorSelected -> aviary_highlightColorSelected
    int aviary_highlightMode -> aviary_highlightMode
    int aviary_highlightStyle -> aviary_highlightStyle
    int aviary_horizontalPadding -> aviary_horizontalPadding
    int aviary_indicatorId -> aviary_indicatorId
    int aviary_indicatorSize -> aviary_indicatorSize
    int aviary_layout_direction -> aviary_layout_direction
    int aviary_minCropSize -> aviary_minCropSize
    int aviary_minSize -> aviary_minSize
    int aviary_moveEnabled -> aviary_moveEnabled
    int aviary_offsety -> aviary_offsety
    int aviary_orientation -> aviary_orientation
    int aviary_overscroll -> aviary_overscroll
    int aviary_radius -> aviary_radius
    int aviary_resizeEdgeMode -> aviary_resizeEdgeMode
    int aviary_resizeEnabled -> aviary_resizeEnabled
    int aviary_rotateDrawable -> aviary_rotateDrawable
    int aviary_rotateEnabled -> aviary_rotateEnabled
    int aviary_rows -> aviary_rows
    int aviary_shape_defaultsize -> aviary_shape_defaultsize
    int aviary_shape_maxsize -> aviary_shape_maxsize
    int aviary_shape_minsize -> aviary_shape_minsize
    int aviary_strokeColor -> aviary_strokeColor
    int aviary_strokeColor2 -> aviary_strokeColor2
    int aviary_strokeColor3 -> aviary_strokeColor3
    int aviary_strokeColor4 -> aviary_strokeColor4
    int aviary_strokeWidth -> aviary_strokeWidth
    int aviary_strokeWidth2 -> aviary_strokeWidth2
    int aviary_textPerc -> aviary_textPerc
    int aviary_timeout -> aviary_timeout
    int aviary_toggleable -> aviary_toggleable
    int aviary_typeface -> aviary_typeface
    int aviary_untoggleable -> aviary_untoggleable
    int aviary_verticalPadding -> aviary_verticalPadding
    int textAppearance -> textAppearance
    int textAppearanceInverted -> textAppearanceInverted
    int textAppearanceLarge -> textAppearanceLarge
    int textAppearanceLargeInverted -> textAppearanceLargeInverted
    int textAppearanceMedium -> textAppearanceMedium
    int textAppearanceMediumInverted -> textAppearanceMediumInverted
    int textAppearanceSmall -> textAppearanceSmall
    int textAppearanceSmallInverted -> textAppearanceSmallInverted
    int textAppearanceSmallNoSelection -> textAppearanceSmallNoSelection
com.aviary.android.feather.R$color -> com.aviary.android.feather.ad:
    int aviary_adjust_fill_color -> aviary_adjust_fill_color
    int aviary_adjust_internal_stroke_color -> aviary_adjust_internal_stroke_color
    int aviary_adjust_stroke_color -> aviary_adjust_stroke_color
    int aviary_background_color -> aviary_background_color
    int aviary_bottom_primary_color_inverse_dark -> aviary_bottom_primary_color_inverse_dark
    int aviary_bottom_primary_color_inverse_light -> aviary_bottom_primary_color_inverse_light
    int aviary_circle_background_normal -> aviary_circle_background_normal
    int aviary_circle_background_selected -> aviary_circle_background_selected
    int aviary_circle_dark -> aviary_circle_dark
    int aviary_circle_light -> aviary_circle_light
    int aviary_circle_selected_dark -> aviary_circle_selected_dark
    int aviary_circle_selected_light -> aviary_circle_selected_light
    int aviary_crop_fill_color -> aviary_crop_fill_color
    int aviary_crop_fill_color_pressed -> aviary_crop_fill_color_pressed
    int aviary_crop_stroke_color -> aviary_crop_stroke_color
    int aviary_crop_stroke_color_pressed -> aviary_crop_stroke_color_pressed
    int aviary_crop_stroke_internal_color -> aviary_crop_stroke_internal_color
    int aviary_crop_stroke_internal_color_pressed -> aviary_crop_stroke_internal_color_pressed
    int aviary_effect_thumb_stroke_color -> aviary_effect_thumb_stroke_color
    int aviary_gallery_item_background_color2 -> aviary_gallery_item_background_color2
    int aviary_highlighted_text_light -> aviary_highlighted_text_light
    int aviary_highlighted_text_light_inverted -> aviary_highlighted_text_light_inverted
    int aviary_hint_foreground_light -> aviary_hint_foreground_light
    int aviary_hint_foreground_light_inverted -> aviary_hint_foreground_light_inverted
    int aviary_iap_background -> aviary_iap_background
    int aviary_iap_cell_layout_background -> aviary_iap_cell_layout_background
    int aviary_link_text_light -> aviary_link_text_light
    int aviary_link_text_light_inverted -> aviary_link_text_light_inverted
    int aviary_logo_primary_color -> aviary_logo_primary_color
    int aviary_logo_secondary_color -> aviary_logo_secondary_color
    int aviary_main_loader_background -> aviary_main_loader_background
    int aviary_meme_stroke_color -> aviary_meme_stroke_color
    int aviary_meme_text_color -> aviary_meme_text_color
    int aviary_nav_divider_dark -> aviary_nav_divider_dark
    int aviary_nav_divider_light -> aviary_nav_divider_light
    int aviary_nav_primary_color -> aviary_nav_primary_color
    int aviary_nav_secondary_color -> aviary_nav_secondary_color
    int aviary_panel_disabled_status -> aviary_panel_disabled_status
    int aviary_primary_color -> aviary_primary_color
    int aviary_primary_color_inverted -> aviary_primary_color_inverted
    int aviary_primary_color_pressed -> aviary_primary_color_pressed
    int aviary_primary_color_pressed_inverted -> aviary_primary_color_pressed_inverted
    int aviary_primary_highlight_color -> aviary_primary_highlight_color
    int aviary_primary_highlight_color_inverted -> aviary_primary_highlight_color_inverted
    int aviary_text_highlight_background_inner_pressed -> aviary_text_highlight_background_inner_pressed
    int aviary_text_highlight_background_normal -> aviary_text_highlight_background_normal
    int aviary_tool_text_color -> aviary_tool_text_color
    int aviary_tool_text_color_inverted -> aviary_tool_text_color_inverted
    int aviary_tool_text_color_no_selected -> aviary_tool_text_color_no_selected
    int aviary_workspace_indicator_normal_endColor -> aviary_workspace_indicator_normal_endColor
    int aviary_workspace_indicator_normal_startColor -> aviary_workspace_indicator_normal_startColor
    int aviary_workspace_indicator_selected_endColor -> aviary_workspace_indicator_selected_endColor
    int aviary_workspace_indicator_selected_startColor -> aviary_workspace_indicator_selected_startColor
com.aviary.android.feather.R$dimen -> com.aviary.android.feather.ae:
    int aviary_adjust_button_padding_left -> aviary_adjust_button_padding_left
    int aviary_adjust_button_padding_right -> aviary_adjust_button_padding_right
    int aviary_adjust_strokeWidth -> aviary_adjust_strokeWidth
    int aviary_adjust_strokeWidth2 -> aviary_adjust_strokeWidth2
    int aviary_bottombar_height -> aviary_bottombar_height
    int aviary_color_splash_brush_size -> aviary_color_splash_brush_size
    int aviary_color_splash_button_padding_left -> aviary_color_splash_button_padding_left
    int aviary_color_splash_button_padding_right -> aviary_color_splash_button_padding_right
    int aviary_crop_min_size -> aviary_crop_min_size
    int aviary_crop_stroke_internal_width -> aviary_crop_stroke_internal_width
    int aviary_crop_stroke_width -> aviary_crop_stroke_width
    int aviary_effect_thumb_margin_bottom -> aviary_effect_thumb_margin_bottom
    int aviary_effect_thumb_padding -> aviary_effect_thumb_padding
    int aviary_effect_thumb_radius -> aviary_effect_thumb_radius
    int aviary_effect_thumb_stroke -> aviary_effect_thumb_stroke
    int aviary_enhance_button_padding_left -> aviary_enhance_button_padding_left
    int aviary_enhance_button_padding_right -> aviary_enhance_button_padding_right
    int aviary_focus_button_padding_left -> aviary_focus_button_padding_left
    int aviary_focus_button_padding_right -> aviary_focus_button_padding_right
    int aviary_frame_item_image_width -> aviary_frame_item_image_width
    int aviary_frame_item_width -> aviary_frame_item_width
    int aviary_gallery_bottom_indicator_height -> aviary_gallery_bottom_indicator_height
    int aviary_gallery_item_width -> aviary_gallery_item_width
    int aviary_gallery_margin_bottom -> aviary_gallery_margin_bottom
    int aviary_gallery_margin_top -> aviary_gallery_margin_top
    int aviary_gallery_mid_indicator_height -> aviary_gallery_mid_indicator_height
    int aviary_gallery_top_indicator_height -> aviary_gallery_top_indicator_height
    int aviary_main_image_padding -> aviary_main_image_padding
    int aviary_main_loader_padding -> aviary_main_loader_padding
    int aviary_main_loader_radius -> aviary_main_loader_radius
    int aviary_nav_divider -> aviary_nav_divider
    int aviary_nav_divider_double -> aviary_nav_divider_double
    int aviary_nav_height -> aviary_nav_height
    int aviary_navbar_height -> aviary_navbar_height
    int aviary_navbar_progress_height -> aviary_navbar_progress_height
    int aviary_navbar_progress_width -> aviary_navbar_progress_width
    int aviary_optionpanel_button_padding_bottom -> aviary_optionpanel_button_padding_bottom
    int aviary_optionpanel_button_padding_left -> aviary_optionpanel_button_padding_left
    int aviary_optionpanel_button_padding_right -> aviary_optionpanel_button_padding_right
    int aviary_optionpanel_button_padding_top -> aviary_optionpanel_button_padding_top
    int aviary_spot_toast_height -> aviary_spot_toast_height
    int aviary_spot_toast_width -> aviary_spot_toast_width
    int aviary_sticker_overlay_min_size -> aviary_sticker_overlay_min_size
    int aviary_sticker_overlay_padding -> aviary_sticker_overlay_padding
    int aviary_sticker_pack_image_width -> aviary_sticker_pack_image_width
    int aviary_sticker_pack_width -> aviary_sticker_pack_width
    int aviary_sticker_single_item_image_width -> aviary_sticker_single_item_image_width
    int aviary_sticker_single_item_width -> aviary_sticker_single_item_width
    int aviary_textSizeIAPTitle -> aviary_textSizeIAPTitle
    int aviary_textSizeLarge -> aviary_textSizeLarge
    int aviary_textSizeMedium -> aviary_textSizeMedium
    int aviary_textSizeSmall -> aviary_textSizeSmall
    int aviary_textSizeTools -> aviary_textSizeTools
    int aviary_text_highlight_background_inner_stroke_width -> aviary_text_highlight_background_inner_stroke_width
    int aviary_text_highlight_background_radius -> aviary_text_highlight_background_radius
    int aviary_text_highlight_background_stroke_width -> aviary_text_highlight_background_stroke_width
    int aviary_text_overlay_default_size -> aviary_text_overlay_default_size
    int aviary_text_overlay_min_size -> aviary_text_overlay_min_size
    int aviary_text_overlay_padding -> aviary_text_overlay_padding
    int aviary_wheel_margin_horizontal -> aviary_wheel_margin_horizontal
com.aviary.android.feather.R$drawable -> com.aviary.android.feather.af:
    int aviary_adjust_knob -> aviary_adjust_knob
    int aviary_blue_button_background -> aviary_blue_button_background
    int aviary_blue_button_background_normal -> aviary_blue_button_background_normal
    int aviary_blue_button_background_pressed -> aviary_blue_button_background_pressed
    int aviary_bottombar_hline -> aviary_bottombar_hline
    int aviary_bottombar_logo_background -> aviary_bottombar_logo_background
    int aviary_bottombar_thumb_divider_left -> aviary_bottombar_thumb_divider_left
    int aviary_bottombar_thumb_divider_right -> aviary_bottombar_thumb_divider_right
    int aviary_bottombar_thumb_external_background -> aviary_bottombar_thumb_external_background
    int aviary_bottombar_tools_background -> aviary_bottombar_tools_background
    int aviary_bottombar_vline -> aviary_bottombar_vline
    int aviary_bottombar_vline_inverted -> aviary_bottombar_vline_inverted
    int aviary_bottombar_vline_selector -> aviary_bottombar_vline_selector
    int aviary_crop_invert_indicator -> aviary_crop_invert_indicator
    int aviary_crop_invert_indicator_inverted -> aviary_crop_invert_indicator_inverted
    int aviary_crop_invert_indicator_selector -> aviary_crop_invert_indicator_selector
    int aviary_crop_invert_indicator_transparent -> aviary_crop_invert_indicator_transparent
    int aviary_delete_knob -> aviary_delete_knob
    int aviary_effect_item_getmore -> aviary_effect_item_getmore
    int aviary_effects_pack_background -> aviary_effects_pack_background
    int aviary_external_packs_download_icon -> aviary_external_packs_download_icon
    int aviary_frame_divider_background -> aviary_frame_divider_background
    int aviary_frame_item_getmore -> aviary_frame_item_getmore
    int aviary_frame_item_selected_image -> aviary_frame_item_selected_image
    int aviary_frames_pack_background -> aviary_frames_pack_background
    int aviary_gallery_default_background_selector -> aviary_gallery_default_background_selector
    int aviary_gallery_middle_divider -> aviary_gallery_middle_divider
    int aviary_gray_button_background -> aviary_gray_button_background
    int aviary_gray_button_background_normal -> aviary_gray_button_background_normal
    int aviary_gray_button_background_pressed -> aviary_gray_button_background_pressed
    int aviary_hidden_edittext_background -> aviary_hidden_edittext_background
    int aviary_hidden_textfield_normal -> aviary_hidden_textfield_normal
    int aviary_home_dialog_background -> aviary_home_dialog_background
    int aviary_iap_grid_background -> aviary_iap_grid_background
    int aviary_iap_grid_background_inverted -> aviary_iap_grid_background_inverted
    int aviary_iap_workspace_indicator_normal -> aviary_iap_workspace_indicator_normal
    int aviary_iap_workspace_indicator_selected -> aviary_iap_workspace_indicator_selected
    int aviary_iap_workspace_indicator_selector -> aviary_iap_workspace_indicator_selector
    int aviary_ic_circle -> aviary_ic_circle
    int aviary_ic_enhance_brighten -> aviary_ic_enhance_brighten
    int aviary_ic_enhance_colorfix -> aviary_ic_enhance_colorfix
    int aviary_ic_enhance_hd -> aviary_ic_enhance_hd
    int aviary_ic_eraser -> aviary_ic_eraser
    int aviary_ic_eraser_small -> aviary_ic_eraser_small
    int aviary_ic_flip_horizontal -> aviary_ic_flip_horizontal
    int aviary_ic_flip_vertical -> aviary_ic_flip_vertical
    int aviary_ic_free -> aviary_ic_free
    int aviary_ic_na -> aviary_ic_na
    int aviary_ic_rectangle -> aviary_ic_rectangle
    int aviary_ic_rotate_left -> aviary_ic_rotate_left
    int aviary_ic_rotate_right -> aviary_ic_rotate_right
    int aviary_ic_smart -> aviary_ic_smart
    int aviary_knob -> aviary_knob
    int aviary_lens_image -> aviary_lens_image
    int aviary_logo_big -> aviary_logo_big
    int aviary_main_loader_background -> aviary_main_loader_background
    int aviary_meme_button_background -> aviary_meme_button_background
    int aviary_meme_clear_button -> aviary_meme_clear_button
    int aviary_nav_background -> aviary_nav_background
    int aviary_nav_button_background -> aviary_nav_button_background
    int aviary_nav_button_pressed -> aviary_nav_button_pressed
    int aviary_nav_check -> aviary_nav_check
    int aviary_nav_divider -> aviary_nav_divider
    int aviary_overscroll_edge -> aviary_overscroll_edge
    int aviary_overscroll_glow -> aviary_overscroll_glow
    int aviary_powered -> aviary_powered
    int aviary_resize_knob -> aviary_resize_knob
    int aviary_seekbar_background -> aviary_seekbar_background
    int aviary_seekbar_background_image -> aviary_seekbar_background_image
    int aviary_seekbar_secondary_center_selector -> aviary_seekbar_secondary_center_selector
    int aviary_seekbar_secondary_inverted_normal -> aviary_seekbar_secondary_inverted_normal
    int aviary_seekbar_secondary_inverted_pressed -> aviary_seekbar_secondary_inverted_pressed
    int aviary_seekbar_secondary_inverted_selector -> aviary_seekbar_secondary_inverted_selector
    int aviary_seekbar_secondary_normal -> aviary_seekbar_secondary_normal
    int aviary_seekbar_secondary_pressed -> aviary_seekbar_secondary_pressed
    int aviary_seekbar_secondary_selector -> aviary_seekbar_secondary_selector
    int aviary_seekbar_thumb -> aviary_seekbar_thumb
    int aviary_seekbar_thumb_focused -> aviary_seekbar_thumb_focused
    int aviary_seekbar_thumb_normal -> aviary_seekbar_thumb_normal
    int aviary_seekbar_thumb_pressed -> aviary_seekbar_thumb_pressed
    int aviary_seekbar_thumb_zero_normal -> aviary_seekbar_thumb_zero_normal
    int aviary_seekbar_thumb_zero_pressed -> aviary_seekbar_thumb_zero_pressed
    int aviary_shadow_bottom -> aviary_shadow_bottom
    int aviary_shadown_top -> aviary_shadown_top
    int aviary_sticker_highlight_background_selector -> aviary_sticker_highlight_background_selector
    int aviary_sticker_item_getmore -> aviary_sticker_item_getmore
    int aviary_sticker_pack_background -> aviary_sticker_pack_background
    int aviary_symbol_minus_normal -> aviary_symbol_minus_normal
    int aviary_symbol_plus_normal -> aviary_symbol_plus_normal
    int aviary_text_highlight_background -> aviary_text_highlight_background
    int aviary_text_highlight_bg_normal -> aviary_text_highlight_bg_normal
    int aviary_text_highlight_bg_pressed -> aviary_text_highlight_bg_pressed
    int aviary_toast_background -> aviary_toast_background
    int aviary_tool_button_background -> aviary_tool_button_background
    int aviary_tool_button_center_normal -> aviary_tool_button_center_normal
    int aviary_tool_button_center_pressed -> aviary_tool_button_center_pressed
    int aviary_tool_button_left_normal -> aviary_tool_button_left_normal
    int aviary_tool_button_left_pressed -> aviary_tool_button_left_pressed
    int aviary_tool_button_normal -> aviary_tool_button_normal
    int aviary_tool_button_pressed -> aviary_tool_button_pressed
    int aviary_tool_button_right_normal -> aviary_tool_button_right_normal
    int aviary_tool_button_right_pressed -> aviary_tool_button_right_pressed
    int aviary_tool_center_button_background -> aviary_tool_center_button_background
    int aviary_tool_ic_blemish -> aviary_tool_ic_blemish
    int aviary_tool_ic_brightness -> aviary_tool_ic_brightness
    int aviary_tool_ic_colorsplash -> aviary_tool_ic_colorsplash
    int aviary_tool_ic_contrast -> aviary_tool_ic_contrast
    int aviary_tool_ic_crop -> aviary_tool_ic_crop
    int aviary_tool_ic_draw -> aviary_tool_ic_draw
    int aviary_tool_ic_effects -> aviary_tool_ic_effects
    int aviary_tool_ic_enhance -> aviary_tool_ic_enhance
    int aviary_tool_ic_feedback -> aviary_tool_ic_feedback
    int aviary_tool_ic_focus -> aviary_tool_ic_focus
    int aviary_tool_ic_frames -> aviary_tool_ic_frames
    int aviary_tool_ic_meme -> aviary_tool_ic_meme
    int aviary_tool_ic_orientation -> aviary_tool_ic_orientation
    int aviary_tool_ic_redeye -> aviary_tool_ic_redeye
    int aviary_tool_ic_saturation -> aviary_tool_ic_saturation
    int aviary_tool_ic_sharpen -> aviary_tool_ic_sharpen
    int aviary_tool_ic_stickers -> aviary_tool_ic_stickers
    int aviary_tool_ic_text -> aviary_tool_ic_text
    int aviary_tool_ic_warmth -> aviary_tool_ic_warmth
    int aviary_tool_ic_whiten -> aviary_tool_ic_whiten
    int aviary_tool_left_button_background -> aviary_tool_left_button_background
    int aviary_tool_right_button_background -> aviary_tool_right_button_background
    int aviary_tools_divider -> aviary_tools_divider
    int aviary_update_arrow -> aviary_update_arrow
    int aviary_wave_dot -> aviary_wave_dot
    int aviary_wheel_background -> aviary_wheel_background
    int aviary_wheel_container -> aviary_wheel_container
    int aviary_wheel_indicator -> aviary_wheel_indicator
    int aviary_wheel_line -> aviary_wheel_line
    int aviary_wheel_shadow -> aviary_wheel_shadow
    int aviary_wheel_shadow_bottom -> aviary_wheel_shadow_bottom
    int ic_stickers -> ic_stickers
com.aviary.android.feather.R$id -> com.aviary.android.feather.ag:
    int aviary_bottom_line -> aviary_bottom_line
    int aviary_bottombar -> aviary_bottombar
    int aviary_button -> aviary_button
    int aviary_button1 -> aviary_button1
    int aviary_button2 -> aviary_button2
    int aviary_button3 -> aviary_button3
    int aviary_button4 -> aviary_button4
    int aviary_button_circle -> aviary_button_circle
    int aviary_button_minus -> aviary_button_minus
    int aviary_button_plus -> aviary_button_plus
    int aviary_button_rectangle -> aviary_button_rectangle
    int aviary_clear_button1 -> aviary_clear_button1
    int aviary_clear_button2 -> aviary_clear_button2
    int aviary_content_view -> aviary_content_view
    int aviary_crop_image -> aviary_crop_image
    int aviary_description -> aviary_description
    int aviary_disable_status -> aviary_disable_status
    int aviary_divider_left -> aviary_divider_left
    int aviary_divider_right -> aviary_divider_right
    int aviary_error_message -> aviary_error_message
    int aviary_flipper -> aviary_flipper
    int aviary_gallery -> aviary_gallery
    int aviary_gallery2 -> aviary_gallery2
    int aviary_head -> aviary_head
    int aviary_hidden -> aviary_hidden
    int aviary_icon -> aviary_icon
    int aviary_image -> aviary_image
    int aviary_image2 -> aviary_image2
    int aviary_invisible_text_1 -> aviary_invisible_text_1
    int aviary_invisible_text_2 -> aviary_invisible_text_2
    int aviary_lens_button -> aviary_lens_button
    int aviary_list -> aviary_list
    int aviary_list_packs -> aviary_list_packs
    int aviary_list_stickers -> aviary_list_stickers
    int aviary_loader -> aviary_loader
    int aviary_main_iap_dialog -> aviary_main_iap_dialog
    int aviary_main_iap_dialog_container -> aviary_main_iap_dialog_container
    int aviary_meme_dumb -> aviary_meme_dumb
    int aviary_navbar -> aviary_navbar
    int aviary_overlay -> aviary_overlay
    int aviary_panel -> aviary_panel
    int aviary_progress -> aviary_progress
    int aviary_retry_button -> aviary_retry_button
    int aviary_seekbar -> aviary_seekbar
    int aviary_switcher -> aviary_switcher
    int aviary_text -> aviary_text
    int aviary_title -> aviary_title
    int aviary_tool_view -> aviary_tool_view
    int aviary_tools_listview -> aviary_tools_listview
    int aviary_top_line -> aviary_top_line
    int aviary_version -> aviary_version
    int aviary_wheel -> aviary_wheel
    int aviary_white_logo -> aviary_white_logo
    int aviary_workspace -> aviary_workspace
    int aviary_workspace_container -> aviary_workspace_container
    int aviary_workspace_indicator -> aviary_workspace_indicator
    int button1 -> button1
    int button2 -> button2
    int button3 -> button3
    int checked -> checked
    int divider -> divider
    int down_top -> down_top
    int dragLayer -> dragLayer
    int drawing_view_container -> drawing_view_container
    int edge_bottom -> edge_bottom
    int edge_left -> edge_left
    int edge_right -> edge_right
    int edge_top -> edge_top
    int feather_dialogs_container -> feather_dialogs_container
    int horizontal -> horizontal
    int image -> image
    int image_loading_view -> image_loading_view
    int imagegl -> imagegl
    int main_content -> main_content
    int navbar_button1 -> navbar_button1
    int navbar_button2 -> navbar_button2
    int navbar_divider1 -> navbar_divider1
    int navbar_divider2 -> navbar_divider2
    int navbar_progress1 -> navbar_progress1
    int navbar_progress2 -> navbar_progress2
    int navbar_text1 -> navbar_text1
    int navbar_text2 -> navbar_text2
    int nonblank -> nonblank
    int pressed -> pressed
    int selected -> selected
    int shadow -> shadow
    int size_preview -> size_preview
    int text -> text
    int text1 -> text1
    int text2 -> text2
    int text3 -> text3
    int top_down -> top_down
    int vertical -> vertical
com.aviary.android.feather.R$integer -> com.aviary.android.feather.ah:
    int aviary_adjust_animationDuration -> aviary_adjust_animationDuration
    int aviary_adjust_animationDuration2 -> aviary_adjust_animationDuration2
    int aviary_adjust_divider_weight -> aviary_adjust_divider_weight
    int aviary_adjust_flip3d -> aviary_adjust_flip3d
    int aviary_adjust_free_rotate -> aviary_adjust_free_rotate
    int aviary_adjust_item_weight -> aviary_adjust_item_weight
    int aviary_button_highlight_glow_size -> aviary_button_highlight_glow_size
    int aviary_color_splash_divider_weight -> aviary_color_splash_divider_weight
    int aviary_color_splash_item_weight -> aviary_color_splash_item_weight
    int aviary_crop_invert_policy -> aviary_crop_invert_policy
    int aviary_crop_selected_index -> aviary_crop_selected_index
    int aviary_draw_brush_index -> aviary_draw_brush_index
    int aviary_draw_brush_softValue -> aviary_draw_brush_softValue
    int aviary_draw_fill_color_index -> aviary_draw_fill_color_index
    int aviary_enhance_item_weight -> aviary_enhance_item_weight
    int aviary_featured_packs_count -> aviary_featured_packs_count
    int aviary_iap_dialog_cols_effects -> aviary_iap_dialog_cols_effects
    int aviary_iap_dialog_cols_stickers -> aviary_iap_dialog_cols_stickers
    int aviary_iap_dialog_height_weight -> aviary_iap_dialog_height_weight
    int aviary_iap_dialog_margin_top_weight -> aviary_iap_dialog_margin_top_weight
    int aviary_iap_dialog_rows_effects -> aviary_iap_dialog_rows_effects
    int aviary_iap_dialog_rows_stickers -> aviary_iap_dialog_rows_stickers
    int aviary_iap_dialog_width_weight -> aviary_iap_dialog_width_weight
    int aviary_mediumAnimTime -> aviary_mediumAnimTime
    int aviary_meme_max_length -> aviary_meme_max_length
    int aviary_meme_stroke_enabled -> aviary_meme_stroke_enabled
    int aviary_seekbar_weight -> aviary_seekbar_weight
    int aviary_shortAnimTime -> aviary_shortAnimTime
    int aviary_spot_brush_index -> aviary_spot_brush_index
    int aviary_spot_gallery_item_max_size -> aviary_spot_gallery_item_max_size
    int aviary_spot_gallery_item_min_size -> aviary_spot_gallery_item_min_size
    int aviary_text_fill_color_index -> aviary_text_fill_color_index
    int aviary_text_gallery_drawable_radius -> aviary_text_gallery_drawable_radius
    int aviary_text_max_length -> aviary_text_max_length
    int aviary_text_stroke_enabled -> aviary_text_stroke_enabled
    int aviary_wheel_weight -> aviary_wheel_weight
    int border_version -> border_version
    int is_border -> is_border
    int is_filter -> is_filter
    int is_sticker -> is_sticker
    int is_tool -> is_tool
com.aviary.android.feather.R$layout -> com.aviary.android.feather.ai:
    int aviary_bottombar -> aviary_bottombar
    int aviary_content_adjust -> aviary_content_adjust
    int aviary_content_crop -> aviary_content_crop
    int aviary_content_draw -> aviary_content_draw
    int aviary_content_effects -> aviary_content_effects
    int aviary_content_effects_gl -> aviary_content_effects_gl
    int aviary_content_focus -> aviary_content_focus
    int aviary_content_meme -> aviary_content_meme
    int aviary_content_spot_draw -> aviary_content_spot_draw
    int aviary_content_stickers -> aviary_content_stickers
    int aviary_content_text -> aviary_content_text
    int aviary_effect_item_more -> aviary_effect_item_more
    int aviary_feedback_dialog_view -> aviary_feedback_dialog_view
    int aviary_frame_item -> aviary_frame_item
    int aviary_frame_item_divider -> aviary_frame_item_divider
    int aviary_frame_item_external -> aviary_frame_item_external
    int aviary_frame_item_more -> aviary_frame_item_more
    int aviary_gallery_crop_item_view -> aviary_gallery_crop_item_view
    int aviary_gallery_crop_item_view_custom -> aviary_gallery_crop_item_view_custom
    int aviary_gallery_item_divider -> aviary_gallery_item_divider
    int aviary_gallery_item_highlight_view -> aviary_gallery_item_highlight_view
    int aviary_gallery_item_view -> aviary_gallery_item_view
    int aviary_iap_cell_item_effects -> aviary_iap_cell_item_effects
    int aviary_iap_cell_item_stickers -> aviary_iap_cell_item_stickers
    int aviary_iap_dialog -> aviary_iap_dialog
    int aviary_iap_dialog_container -> aviary_iap_dialog_container
    int aviary_iap_download_error_message -> aviary_iap_download_error_message
    int aviary_iap_workspace_screen_effects -> aviary_iap_workspace_screen_effects
    int aviary_iap_workspace_screen_stickers -> aviary_iap_workspace_screen_stickers
    int aviary_main_loader -> aviary_main_loader
    int aviary_main_view -> aviary_main_view
    int aviary_modal_progress_view -> aviary_modal_progress_view
    int aviary_navbar -> aviary_navbar
    int aviary_navbar_text -> aviary_navbar_text
    int aviary_panel_adjust -> aviary_panel_adjust
    int aviary_panel_colorsplash -> aviary_panel_colorsplash
    int aviary_panel_crop -> aviary_panel_crop
    int aviary_panel_draw -> aviary_panel_draw
    int aviary_panel_enhance -> aviary_panel_enhance
    int aviary_panel_focus -> aviary_panel_focus
    int aviary_panel_frames -> aviary_panel_frames
    int aviary_panel_meme -> aviary_panel_meme
    int aviary_panel_seekbar -> aviary_panel_seekbar
    int aviary_panel_spot -> aviary_panel_spot
    int aviary_panel_stickers -> aviary_panel_stickers
    int aviary_panel_wheel -> aviary_panel_wheel
    int aviary_progress_medium -> aviary_progress_medium
    int aviary_progress_medium_inverse -> aviary_progress_medium_inverse
    int aviary_progress_small -> aviary_progress_small
    int aviary_sticker_item -> aviary_sticker_item
    int aviary_sticker_item_more -> aviary_sticker_item_more
    int aviary_sticker_item_single -> aviary_sticker_item_single
    int aviary_thumb_divider_left -> aviary_thumb_divider_left
    int aviary_thumb_divider_right -> aviary_thumb_divider_right
    int aviary_toast_layout -> aviary_toast_layout
    int aviary_tool_feedback_layout -> aviary_tool_feedback_layout
    int aviary_tool_layout -> aviary_tool_layout
com.aviary.android.feather.R$string -> com.aviary.android.feather.aj:
    int aviary_meme_font -> aviary_meme_font
    int border_name -> border_name
    int confirm_quit_message -> confirm_quit_message
    int feather_about_dialog_message -> feather_about_dialog_message
    int feather_activity_not_found -> feather_activity_not_found
    int feather_adjust -> feather_adjust
    int feather_apply -> feather_apply
    int feather_attention -> feather_attention
    int feather_auto_enhance_label -> feather_auto_enhance_label
    int feather_back_enhance_label -> feather_back_enhance_label
    int feather_balance_enhance_label -> feather_balance_enhance_label
    int feather_blemish -> feather_blemish
    int feather_borders -> feather_borders
    int feather_borders_dialog_first_time -> feather_borders_dialog_first_time
    int feather_brightness -> feather_brightness
    int feather_cancel -> feather_cancel
    int feather_circle -> feather_circle
    int feather_close -> feather_close
    int feather_colorfix -> feather_colorfix
    int feather_colorsplash_eraser -> feather_colorsplash_eraser
    int feather_colorsplash_free -> feather_colorsplash_free
    int feather_colorsplash_smart -> feather_colorsplash_smart
    int feather_confirm -> feather_confirm
    int feather_contrast -> feather_contrast
    int feather_crash_toast_text -> feather_crash_toast_text
    int feather_crop -> feather_crop
    int feather_custom -> feather_custom
    int feather_delete -> feather_delete
    int feather_download -> feather_download
    int feather_draw -> feather_draw
    int feather_edit_bottom_text -> feather_edit_bottom_text
    int feather_edit_top_text -> feather_edit_top_text
    int feather_edit_your_photo -> feather_edit_your_photo
    int feather_effect_loading_message -> feather_effect_loading_message
    int feather_effects -> feather_effects
    int feather_effects_beginning_of_list -> feather_effects_beginning_of_list
    int feather_effects_end_of_list -> feather_effects_end_of_list
    int feather_effects_error_loading_pack -> feather_effects_error_loading_pack
    int feather_effects_error_loading_packs -> feather_effects_error_loading_packs
    int feather_effects_error_update_editor -> feather_effects_error_update_editor
    int feather_effects_error_update_editors -> feather_effects_error_update_editors
    int feather_effects_error_update_multiple -> feather_effects_error_update_multiple
    int feather_effects_error_update_pack -> feather_effects_error_update_pack
    int feather_effects_error_update_packs -> feather_effects_error_update_packs
    int feather_effects_unknown_error -> feather_effects_unknown_error
    int feather_effects_unknown_errors -> feather_effects_unknown_errors
    int feather_enhance -> feather_enhance
    int feather_enter_text_here -> feather_enter_text_here
    int feather_error_download_image_message -> feather_error_download_image_message
    int feather_error_saving_aviary_folder -> feather_error_saving_aviary_folder
    int feather_error_saving_image -> feather_error_saving_image
    int feather_featured -> feather_featured
    int feather_feedback -> feather_feedback
    int feather_feedback_dialog_message -> feather_feedback_dialog_message
    int feather_filter_pack_updated -> feather_filter_pack_updated
    int feather_flip -> feather_flip
    int feather_generic_error_title -> feather_generic_error_title
    int feather_get_more -> feather_get_more
    int feather_hidef -> feather_hidef
    int feather_illuminate -> feather_illuminate
    int feather_image_saved_in -> feather_image_saved_in
    int feather_infoscreen_bottom_button -> feather_infoscreen_bottom_button
    int feather_infoscreen_text -> feather_infoscreen_text
    int feather_item_not_found -> feather_item_not_found
    int feather_keep_editing -> feather_keep_editing
    int feather_loading_image -> feather_loading_image
    int feather_loading_title -> feather_loading_title
    int feather_meme -> feather_meme
    int feather_menu_reset -> feather_menu_reset
    int feather_message_button_no -> feather_message_button_no
    int feather_message_button_yes -> feather_message_button_yes
    int feather_message_text -> feather_message_text
    int feather_message_title -> feather_message_title
    int feather_mirror -> feather_mirror
    int feather_new_effects -> feather_new_effects
    int feather_original -> feather_original
    int feather_plugin_error_corrupted -> feather_plugin_error_corrupted
    int feather_plugin_error_download -> feather_plugin_error_download
    int feather_plugin_error_storage_not_available -> feather_plugin_error_storage_not_available
    int feather_plugin_filter_undefined_name -> feather_plugin_filter_undefined_name
    int feather_rectangle -> feather_rectangle
    int feather_red_eye -> feather_red_eye
    int feather_remove -> feather_remove
    int feather_revert_dialog_message -> feather_revert_dialog_message
    int feather_revert_dialog_title -> feather_revert_dialog_title
    int feather_rotate -> feather_rotate
    int feather_saturation -> feather_saturation
    int feather_save -> feather_save
    int feather_save_progress -> feather_save_progress
    int feather_send_feedback -> feather_send_feedback
    int feather_shapes -> feather_shapes
    int feather_share -> feather_share
    int feather_sharpen -> feather_sharpen
    int feather_square -> feather_square
    int feather_sticker_delete_message -> feather_sticker_delete_message
    int feather_sticker_name -> feather_sticker_name
    int feather_sticker_pack_updated_1 -> feather_sticker_pack_updated_1
    int feather_sticker_pack_updated_2 -> feather_sticker_pack_updated_2
    int feather_sticker_pack_updated_3 -> feather_sticker_pack_updated_3
    int feather_stickers -> feather_stickers
    int feather_stickers_dialog_first_time -> feather_stickers_dialog_first_time
    int feather_text -> feather_text
    int feather_tool -> feather_tool
    int feather_tool_colorsplash -> feather_tool_colorsplash
    int feather_tool_leave_question -> feather_tool_leave_question
    int feather_tool_name -> feather_tool_name
    int feather_tool_temperature -> feather_tool_temperature
    int feather_tool_tiltshift -> feather_tool_tiltshift
    int feather_try_again -> feather_try_again
    int feather_update -> feather_update
    int feather_version -> feather_version
    int feather_view_file -> feather_view_file
    int feather_whiten -> feather_whiten
    int feather_yes_leave -> feather_yes_leave
    int feather_zoom_mode -> feather_zoom_mode
    int filter_name -> filter_name
    int menu_premium -> menu_premium
com.aviary.android.feather.R$style -> com.aviary.android.feather.ak:
    int AviaryAnimations -> AviaryAnimations
    int AviaryAnimations_AviaryToast -> AviaryAnimations_AviaryToast
    int AviaryBaseTheme -> AviaryBaseTheme
    int AviaryBaseTheme_Dialog -> AviaryBaseTheme_Dialog
    int AviaryDialog -> AviaryDialog
    int AviaryDialog_Divider -> AviaryDialog_Divider
    int AviaryDialog_Feedback -> AviaryDialog_Feedback
    int AviaryDialog_Feedback_Text -> AviaryDialog_Feedback_Text
    int AviaryDialog_MainLayout -> AviaryDialog_MainLayout
    int AviaryGraphics -> AviaryGraphics
    int AviaryGraphics_CropHighlightView -> AviaryGraphics_CropHighlightView
    int AviaryGraphics_GalleryBottomLine -> AviaryGraphics_GalleryBottomLine
    int AviaryGraphics_GalleryTopIndicator -> AviaryGraphics_GalleryTopIndicator
    int AviaryGraphics_GalleryTopIndicator_Inverse -> AviaryGraphics_GalleryTopIndicator_Inverse
    int AviaryGraphics_PluginDividerText -> AviaryGraphics_PluginDividerText
    int AviaryGraphics_PreviewFill -> AviaryGraphics_PreviewFill
    int AviaryGraphics_PreviewSpot -> AviaryGraphics_PreviewSpot
    int AviaryGraphics_StickerHighlightView -> AviaryGraphics_StickerHighlightView
    int AviaryGraphics_TextHighlightView -> AviaryGraphics_TextHighlightView
    int AviaryTextAppearance -> AviaryTextAppearance
    int AviaryTextAppearance_Inverted -> AviaryTextAppearance_Inverted
    int AviaryTextAppearance_Inverted_Large -> AviaryTextAppearance_Inverted_Large
    int AviaryTextAppearance_Inverted_Medium -> AviaryTextAppearance_Inverted_Medium
    int AviaryTextAppearance_Inverted_Small -> AviaryTextAppearance_Inverted_Small
    int AviaryTextAppearance_Large -> AviaryTextAppearance_Large
    int AviaryTextAppearance_Medium -> AviaryTextAppearance_Medium
    int AviaryTextAppearance_Small -> AviaryTextAppearance_Small
    int AviaryTextAppearance_Small_NoSelected -> AviaryTextAppearance_Small_NoSelected
    int AviaryTheme -> AviaryTheme
    int AviaryTheme_Dialog_Custom -> AviaryTheme_Dialog_Custom
    int AviaryWidget -> AviaryWidget
    int AviaryWidget_AdjustImageView -> AviaryWidget_AdjustImageView
    int AviaryWidget_AviaryGallery -> AviaryWidget_AviaryGallery
    int AviaryWidget_AviarySeekBar -> AviaryWidget_AviarySeekBar
    int AviaryWidget_AviaryWheel -> AviaryWidget_AviaryWheel
    int AviaryWidget_BottomBar -> AviaryWidget_BottomBar
    int AviaryWidget_BottomBar_GalleryItem -> AviaryWidget_BottomBar_GalleryItem
    int AviaryWidget_BottomBar_GalleryItem_Container -> AviaryWidget_BottomBar_GalleryItem_Container
    int AviaryWidget_BottomBar_GalleryItem_Crop -> AviaryWidget_BottomBar_GalleryItem_Crop
    int AviaryWidget_BottomBar_GalleryItem_Crop_HighlightImageView -> AviaryWidget_BottomBar_GalleryItem_Crop_HighlightImageView
    int AviaryWidget_BottomBar_GalleryItem_Crop_TextView -> AviaryWidget_BottomBar_GalleryItem_Crop_TextView
    int AviaryWidget_BottomBar_GalleryItem_Crop_TextView_Custom -> AviaryWidget_BottomBar_GalleryItem_Crop_TextView_Custom
    int AviaryWidget_BottomBar_GalleryItem_Divider -> AviaryWidget_BottomBar_GalleryItem_Divider
    int AviaryWidget_BottomBar_GalleryItem_HighlightImageView -> AviaryWidget_BottomBar_GalleryItem_HighlightImageView
    int AviaryWidget_BottomBar_GalleryTopIndicatorView -> AviaryWidget_BottomBar_GalleryTopIndicatorView
    int AviaryWidget_BottomBar_GalleryTopIndicatorView_Inverse -> AviaryWidget_BottomBar_GalleryTopIndicatorView_Inverse
    int AviaryWidget_BottomBar_HorizontalScrollView -> AviaryWidget_BottomBar_HorizontalScrollView
    int AviaryWidget_BottomBar_Logo -> AviaryWidget_BottomBar_Logo
    int AviaryWidget_BottomBar_Logo_Container -> AviaryWidget_BottomBar_Logo_Container
    int AviaryWidget_BottomBar_Logo_Image -> AviaryWidget_BottomBar_Logo_Image
    int AviaryWidget_BottomBar_OptionPanel -> AviaryWidget_BottomBar_OptionPanel
    int AviaryWidget_BottomBar_OptionPanelContainer -> AviaryWidget_BottomBar_OptionPanelContainer
    int AviaryWidget_BottomBar_OptionPanelContainer_BorderLess -> AviaryWidget_BottomBar_OptionPanelContainer_BorderLess
    int AviaryWidget_BottomBar_Tool -> AviaryWidget_BottomBar_Tool
    int AviaryWidget_BottomBar_Tool_FeedBack -> AviaryWidget_BottomBar_Tool_FeedBack
    int AviaryWidget_BottomBar_ViewFlipper -> AviaryWidget_BottomBar_ViewFlipper
    int AviaryWidget_Button -> AviaryWidget_Button
    int AviaryWidget_Button_Meme -> AviaryWidget_Button_Meme
    int AviaryWidget_Button_NavButton -> AviaryWidget_Button_NavButton
    int AviaryWidget_Button_NavButton_Apply -> AviaryWidget_Button_NavButton_Apply
    int AviaryWidget_Button_Secondary -> AviaryWidget_Button_Secondary
    int AviaryWidget_Button_Secondary_Toggle -> AviaryWidget_Button_Secondary_Toggle
    int AviaryWidget_CropImageView -> AviaryWidget_CropImageView
    int AviaryWidget_EdgeEffect -> AviaryWidget_EdgeEffect
    int AviaryWidget_EffectThumb -> AviaryWidget_EffectThumb
    int AviaryWidget_EffectThumb_Divider -> AviaryWidget_EffectThumb_Divider
    int AviaryWidget_EffectThumb_DividerContainer -> AviaryWidget_EffectThumb_DividerContainer
    int AviaryWidget_EffectThumb_DividerContainer_Left -> AviaryWidget_EffectThumb_DividerContainer_Left
    int AviaryWidget_EffectThumb_Divider_Left -> AviaryWidget_EffectThumb_Divider_Left
    int AviaryWidget_EffectThumb_HiddenSelector -> AviaryWidget_EffectThumb_HiddenSelector
    int AviaryWidget_EffectThumb_Layout -> AviaryWidget_EffectThumb_Layout
    int AviaryWidget_EffectThumb_Layout_External -> AviaryWidget_EffectThumb_Layout_External
    int AviaryWidget_EffectThumb_PacksDivider -> AviaryWidget_EffectThumb_PacksDivider
    int AviaryWidget_EffectThumb_Text -> AviaryWidget_EffectThumb_Text
    int AviaryWidget_EffectsHorizontalScrollView -> AviaryWidget_EffectsHorizontalScrollView
    int AviaryWidget_HiddenText -> AviaryWidget_HiddenText
    int AviaryWidget_HiddenText_TextTool -> AviaryWidget_HiddenText_TextTool
    int AviaryWidget_HighlightImageView -> AviaryWidget_HighlightImageView
    int AviaryWidget_HighlightImageView_Clear -> AviaryWidget_HighlightImageView_Clear
    int AviaryWidget_HighlightImageView_Lens -> AviaryWidget_HighlightImageView_Lens
    int AviaryWidget_HighlightImageView_OptionPanelButton -> AviaryWidget_HighlightImageView_OptionPanelButton
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Center -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Center
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Center_Enhance -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Center_Enhance
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Enhance -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Enhance
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Left -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Left
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Left_Adjust -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Left_Adjust
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Left_Enhance -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Left_Enhance
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Left_Focus -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Left_Focus
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Left_TiltShift -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Left_TiltShift
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Right -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Right
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Right_Adjust -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Right_Adjust
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Right_Enhance -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Right_Enhance
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Right_Focus -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Right_Focus
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Right_TiltShift -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_Right_TiltShift
    int AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_TiltShift -> AviaryWidget_HighlightImageView_OptionPanelButton_Toggle_TiltShift
    int AviaryWidget_HighlightImageView_Tool -> AviaryWidget_HighlightImageView_Tool
    int AviaryWidget_IAPDialog -> AviaryWidget_IAPDialog
    int AviaryWidget_IAPDialog_CellLayoutEffects -> AviaryWidget_IAPDialog_CellLayoutEffects
    int AviaryWidget_IAPDialog_CellLayoutStickers -> AviaryWidget_IAPDialog_CellLayoutStickers
    int AviaryWidget_IAPDialog_Container -> AviaryWidget_IAPDialog_Container
    int AviaryWidget_IAPDialog_DownloadButton -> AviaryWidget_IAPDialog_DownloadButton
    int AviaryWidget_IAPDialog_Icon -> AviaryWidget_IAPDialog_Icon
    int AviaryWidget_IAPDialog_Main -> AviaryWidget_IAPDialog_Main
    int AviaryWidget_IAPDialog_ShadowBottom -> AviaryWidget_IAPDialog_ShadowBottom
    int AviaryWidget_IAPDialog_ShadowTop -> AviaryWidget_IAPDialog_ShadowTop
    int AviaryWidget_IAPDialog_Text -> AviaryWidget_IAPDialog_Text
    int AviaryWidget_IAPDialog_Text_Description -> AviaryWidget_IAPDialog_Text_Description
    int AviaryWidget_IAPDialog_Text_Title -> AviaryWidget_IAPDialog_Text_Title
    int AviaryWidget_IAPDialog_TopGrid -> AviaryWidget_IAPDialog_TopGrid
    int AviaryWidget_IAPDialog_Workspace -> AviaryWidget_IAPDialog_Workspace
    int AviaryWidget_IAPDialog_WorkspaceIndicator -> AviaryWidget_IAPDialog_WorkspaceIndicator
    int AviaryWidget_ModalToastLoader -> AviaryWidget_ModalToastLoader
    int AviaryWidget_ModalToastLoader_MainView -> AviaryWidget_ModalToastLoader_MainView
    int AviaryWidget_NavBar -> AviaryWidget_NavBar
    int AviaryWidget_NavBar_Divider -> AviaryWidget_NavBar_Divider
    int AviaryWidget_NavBar_Main -> AviaryWidget_NavBar_Main
    int AviaryWidget_PreviewSpot -> AviaryWidget_PreviewSpot
    int AviaryWidget_StickerImageView -> AviaryWidget_StickerImageView
    int AviaryWidget_SymbolMinus -> AviaryWidget_SymbolMinus
    int AviaryWidget_SymbolPlus -> AviaryWidget_SymbolPlus
    int AviaryWidget_TextImageView -> AviaryWidget_TextImageView
    int AviaryWidget_TextView -> AviaryWidget_TextView
    int AviaryWidget_TextView_NavTitle -> AviaryWidget_TextView_NavTitle
    int AviaryWidget_TextView_Tool -> AviaryWidget_TextView_Tool
    int AviaryWidget_TiltShiftView -> AviaryWidget_TiltShiftView
com.aviary.android.feather.R$styleable -> com.aviary.android.feather.al:
    int[] AviaryAdjustImageView -> AviaryAdjustImageView
    int AviaryAdjustImageView_android_padding -> AviaryAdjustImageView_android_padding
    int AviaryAdjustImageView_aviary_animationDuration -> AviaryAdjustImageView_aviary_animationDuration
    int AviaryAdjustImageView_aviary_animationDuration2 -> AviaryAdjustImageView_aviary_animationDuration2
    int AviaryAdjustImageView_aviary_color1 -> AviaryAdjustImageView_aviary_color1
    int AviaryAdjustImageView_aviary_enable3d -> AviaryAdjustImageView_aviary_enable3d
    int AviaryAdjustImageView_aviary_freeRotate -> AviaryAdjustImageView_aviary_freeRotate
    int AviaryAdjustImageView_aviary_handle -> AviaryAdjustImageView_aviary_handle
    int AviaryAdjustImageView_aviary_strokeColor -> AviaryAdjustImageView_aviary_strokeColor
    int AviaryAdjustImageView_aviary_strokeColor2 -> AviaryAdjustImageView_aviary_strokeColor2
    int AviaryAdjustImageView_aviary_strokeWidth -> AviaryAdjustImageView_aviary_strokeWidth
    int AviaryAdjustImageView_aviary_strokeWidth2 -> AviaryAdjustImageView_aviary_strokeWidth2
    int[] AviaryCellLayout -> AviaryCellLayout
    int AviaryCellLayout_aviary_cellBottomPadding -> AviaryCellLayout_aviary_cellBottomPadding
    int AviaryCellLayout_aviary_cellEndPadding -> AviaryCellLayout_aviary_cellEndPadding
    int AviaryCellLayout_aviary_cellStartPadding -> AviaryCellLayout_aviary_cellStartPadding
    int AviaryCellLayout_aviary_cellTopPadding -> AviaryCellLayout_aviary_cellTopPadding
    int AviaryCellLayout_aviary_cells -> AviaryCellLayout_aviary_cells
    int AviaryCellLayout_aviary_horizontalPadding -> AviaryCellLayout_aviary_horizontalPadding
    int AviaryCellLayout_aviary_layout_direction -> AviaryCellLayout_aviary_layout_direction
    int AviaryCellLayout_aviary_rows -> AviaryCellLayout_aviary_rows
    int AviaryCellLayout_aviary_verticalPadding -> AviaryCellLayout_aviary_verticalPadding
    int[] AviaryCropHighlightView -> AviaryCropHighlightView
    int AviaryCropHighlightView_android_src -> AviaryCropHighlightView_android_src
    int AviaryCropHighlightView_aviary_color1 -> AviaryCropHighlightView_aviary_color1
    int AviaryCropHighlightView_aviary_color2 -> AviaryCropHighlightView_aviary_color2
    int AviaryCropHighlightView_aviary_strokeColor -> AviaryCropHighlightView_aviary_strokeColor
    int AviaryCropHighlightView_aviary_strokeColor2 -> AviaryCropHighlightView_aviary_strokeColor2
    int AviaryCropHighlightView_aviary_strokeColor3 -> AviaryCropHighlightView_aviary_strokeColor3
    int AviaryCropHighlightView_aviary_strokeColor4 -> AviaryCropHighlightView_aviary_strokeColor4
    int AviaryCropHighlightView_aviary_strokeWidth -> AviaryCropHighlightView_aviary_strokeWidth
    int AviaryCropHighlightView_aviary_strokeWidth2 -> AviaryCropHighlightView_aviary_strokeWidth2
    int[] AviaryCropImageView -> AviaryCropImageView
    int AviaryCropImageView_aviary_highlightStyle -> AviaryCropImageView_aviary_highlightStyle
    int AviaryCropImageView_aviary_minCropSize -> AviaryCropImageView_aviary_minCropSize
    int[] AviaryDrawableHighlightView -> AviaryDrawableHighlightView
    int AviaryDrawableHighlightView_android_background -> AviaryDrawableHighlightView_android_background
    int AviaryDrawableHighlightView_android_padding -> AviaryDrawableHighlightView_android_padding
    int AviaryDrawableHighlightView_aviary_deleteDrawable -> AviaryDrawableHighlightView_aviary_deleteDrawable
    int AviaryDrawableHighlightView_aviary_minSize -> AviaryDrawableHighlightView_aviary_minSize
    int AviaryDrawableHighlightView_aviary_moveEnabled -> AviaryDrawableHighlightView_aviary_moveEnabled
    int AviaryDrawableHighlightView_aviary_resizeEdgeMode -> AviaryDrawableHighlightView_aviary_resizeEdgeMode
    int AviaryDrawableHighlightView_aviary_resizeEnabled -> AviaryDrawableHighlightView_aviary_resizeEnabled
    int AviaryDrawableHighlightView_aviary_rotateDrawable -> AviaryDrawableHighlightView_aviary_rotateDrawable
    int AviaryDrawableHighlightView_aviary_rotateEnabled -> AviaryDrawableHighlightView_aviary_rotateEnabled
    int[] AviaryEdgeEffect -> AviaryEdgeEffect
    int AviaryEdgeEffect_aviary_blendMode -> AviaryEdgeEffect_aviary_blendMode
    int AviaryEdgeEffect_aviary_edgeColor -> AviaryEdgeEffect_aviary_edgeColor
    int AviaryEdgeEffect_aviary_edgeDrawable -> AviaryEdgeEffect_aviary_edgeDrawable
    int AviaryEdgeEffect_aviary_glowDrawable -> AviaryEdgeEffect_aviary_glowDrawable
    int[] AviaryEffectThumbLayout -> AviaryEffectThumbLayout
    int AviaryEffectThumbLayout_aviary_animationDuration -> AviaryEffectThumbLayout_aviary_animationDuration
    int[] AviaryGallery -> AviaryGallery
    int[] AviaryGalleryIndicatorView -> AviaryGalleryIndicatorView
    int AviaryGalleryIndicatorView_aviary_drawableStyle -> AviaryGalleryIndicatorView_aviary_drawableStyle
    int[] AviaryGalleryTopIndicator -> AviaryGalleryTopIndicator
    int AviaryGalleryTopIndicator_android_minHeight -> AviaryGalleryTopIndicator_android_minHeight
    int AviaryGalleryTopIndicator_android_shadowColor -> AviaryGalleryTopIndicator_android_shadowColor
    int AviaryGalleryTopIndicator_android_shadowDy -> AviaryGalleryTopIndicator_android_shadowDy
    int AviaryGalleryTopIndicator_aviary_color1 -> AviaryGalleryTopIndicator_aviary_color1
    int AviaryGalleryTopIndicator_aviary_direction -> AviaryGalleryTopIndicator_aviary_direction
    int AviaryGalleryTopIndicator_aviary_indicatorSize -> AviaryGalleryTopIndicator_aviary_indicatorSize
    int AviaryGalleryTopIndicator_aviary_offsety -> AviaryGalleryTopIndicator_aviary_offsety
    int AviaryGalleryTopIndicator_aviary_strokeColor -> AviaryGalleryTopIndicator_aviary_strokeColor
    int AviaryGalleryTopIndicator_aviary_strokeColor2 -> AviaryGalleryTopIndicator_aviary_strokeColor2
    int AviaryGalleryTopIndicator_aviary_strokeWidth -> AviaryGalleryTopIndicator_aviary_strokeWidth
    int AviaryGallery_android_animationDuration -> AviaryGallery_android_animationDuration
    int[] AviaryHighlightImageButton -> AviaryHighlightImageButton
    int AviaryHighlightImageButton_aviary_blendMode -> AviaryHighlightImageButton_aviary_blendMode
    int AviaryHighlightImageButton_aviary_checked -> AviaryHighlightImageButton_aviary_checked
    int AviaryHighlightImageButton_aviary_glowMode -> AviaryHighlightImageButton_aviary_glowMode
    int AviaryHighlightImageButton_aviary_glowSize -> AviaryHighlightImageButton_aviary_glowSize
    int AviaryHighlightImageButton_aviary_highlightColorChecked -> AviaryHighlightImageButton_aviary_highlightColorChecked
    int AviaryHighlightImageButton_aviary_highlightColorPressed -> AviaryHighlightImageButton_aviary_highlightColorPressed
    int AviaryHighlightImageButton_aviary_highlightColorSelected -> AviaryHighlightImageButton_aviary_highlightColorSelected
    int AviaryHighlightImageButton_aviary_highlightMode -> AviaryHighlightImageButton_aviary_highlightMode
    int AviaryHighlightImageButton_aviary_toggleable -> AviaryHighlightImageButton_aviary_toggleable
    int AviaryHighlightImageButton_aviary_untoggleable -> AviaryHighlightImageButton_aviary_untoggleable
    int[] AviaryImageViewDrawableOverlay -> AviaryImageViewDrawableOverlay
    int AviaryImageViewDrawableOverlay_aviary_highlightStyle -> AviaryImageViewDrawableOverlay_aviary_highlightStyle
    int[] AviaryPluginDividerDrawable -> AviaryPluginDividerDrawable
    int AviaryPluginDividerDrawable_android_textColor -> AviaryPluginDividerDrawable_android_textColor
    int AviaryPluginDividerDrawable_aviary_strokeColor -> AviaryPluginDividerDrawable_aviary_strokeColor
    int AviaryPluginDividerDrawable_aviary_strokeWidth -> AviaryPluginDividerDrawable_aviary_strokeWidth
    int AviaryPluginDividerDrawable_aviary_textPerc -> AviaryPluginDividerDrawable_aviary_textPerc
    int AviaryPluginDividerDrawable_aviary_typeface -> AviaryPluginDividerDrawable_aviary_typeface
    int[] AviaryPreviewFillDrawable -> AviaryPreviewFillDrawable
    int AviaryPreviewFillDrawable_aviary_radius -> AviaryPreviewFillDrawable_aviary_radius
    int AviaryPreviewFillDrawable_aviary_strokeColor -> AviaryPreviewFillDrawable_aviary_strokeColor
    int AviaryPreviewFillDrawable_aviary_strokeWidth -> AviaryPreviewFillDrawable_aviary_strokeWidth
    int[] AviaryPreviewSpotDrawable -> AviaryPreviewSpotDrawable
    int AviaryPreviewSpotDrawable_aviary_bg_color1 -> AviaryPreviewSpotDrawable_aviary_bg_color1
    int AviaryPreviewSpotDrawable_aviary_bg_color2 -> AviaryPreviewSpotDrawable_aviary_bg_color2
    int AviaryPreviewSpotDrawable_aviary_color1 -> AviaryPreviewSpotDrawable_aviary_color1
    int AviaryPreviewSpotDrawable_aviary_color2 -> AviaryPreviewSpotDrawable_aviary_color2
    int AviaryPreviewSpotDrawable_aviary_color3 -> AviaryPreviewSpotDrawable_aviary_color3
    int AviaryPreviewSpotDrawable_aviary_color4 -> AviaryPreviewSpotDrawable_aviary_color4
    int AviaryPreviewSpotDrawable_aviary_glowSize -> AviaryPreviewSpotDrawable_aviary_glowSize
    int AviaryPreviewSpotDrawable_aviary_highlightColorChecked -> AviaryPreviewSpotDrawable_aviary_highlightColorChecked
    int AviaryPreviewSpotDrawable_aviary_strokeColor -> AviaryPreviewSpotDrawable_aviary_strokeColor
    int AviaryPreviewSpotDrawable_aviary_strokeWidth -> AviaryPreviewSpotDrawable_aviary_strokeWidth
    int[] AviarySeekBar -> AviarySeekBar
    int AviarySeekBar_aviarySeekBarSecondary -> AviarySeekBar_aviarySeekBarSecondary
    int AviarySeekBar_aviarySeekBarSecondaryCenter -> AviarySeekBar_aviarySeekBarSecondaryCenter
    int AviarySeekBar_aviarySeekBarSecondaryInverted -> AviarySeekBar_aviarySeekBarSecondaryInverted
    int AviarySeekBar_aviarySeekBarThumb -> AviarySeekBar_aviarySeekBarThumb
    int AviarySeekBar_aviarySeekBarThumbOffset -> AviarySeekBar_aviarySeekBarThumbOffset
    int[] AviaryTextView -> AviaryTextView
    int AviaryTextView_aviary_typeface -> AviaryTextView_aviary_typeface
    int[] AviaryTiltShiftImageView -> AviaryTiltShiftImageView
    int AviaryTiltShiftImageView_aviaryCrosshair_enabled -> AviaryTiltShiftImageView_aviaryCrosshair_enabled
    int AviaryTiltShiftImageView_aviaryWave_animationDuration -> AviaryTiltShiftImageView_aviaryWave_animationDuration
    int AviaryTiltShiftImageView_aviaryWave_innerRadius -> AviaryTiltShiftImageView_aviaryWave_innerRadius
    int AviaryTiltShiftImageView_aviaryWave_outerRadius -> AviaryTiltShiftImageView_aviaryWave_outerRadius
    int AviaryTiltShiftImageView_aviaryWave_pointDrawable -> AviaryTiltShiftImageView_aviaryWave_pointDrawable
    int AviaryTiltShiftImageView_aviary_animationDuration -> AviaryTiltShiftImageView_aviary_animationDuration
    int AviaryTiltShiftImageView_aviary_crosshair_edge -> AviaryTiltShiftImageView_aviary_crosshair_edge
    int AviaryTiltShiftImageView_aviary_crosshair_radius -> AviaryTiltShiftImageView_aviary_crosshair_radius
    int AviaryTiltShiftImageView_aviary_crosshair_strokeWidth -> AviaryTiltShiftImageView_aviary_crosshair_strokeWidth
    int AviaryTiltShiftImageView_aviary_shape_defaultsize -> AviaryTiltShiftImageView_aviary_shape_defaultsize
    int AviaryTiltShiftImageView_aviary_shape_maxsize -> AviaryTiltShiftImageView_aviary_shape_maxsize
    int AviaryTiltShiftImageView_aviary_shape_minsize -> AviaryTiltShiftImageView_aviary_shape_minsize
    int AviaryTiltShiftImageView_aviary_strokeColor -> AviaryTiltShiftImageView_aviary_strokeColor
    int AviaryTiltShiftImageView_aviary_strokeColor2 -> AviaryTiltShiftImageView_aviary_strokeColor2
    int AviaryTiltShiftImageView_aviary_strokeWidth -> AviaryTiltShiftImageView_aviary_strokeWidth
    int AviaryTiltShiftImageView_aviary_timeout -> AviaryTiltShiftImageView_aviary_timeout
    int[] AviaryWheel -> AviaryWheel
    int AviaryWheel_aviaryWheelIndicator -> AviaryWheel_aviaryWheelIndicator
    int AviaryWheel_aviaryWheelLine -> AviaryWheel_aviaryWheelLine
    int AviaryWheel_aviaryWheelShadowTop -> AviaryWheel_aviaryWheelShadowTop
    int AviaryWheel_aviary_edgeStyle -> AviaryWheel_aviary_edgeStyle
    int[] AviaryWorkspace -> AviaryWorkspace
    int[] AviaryWorkspaceIndicator -> AviaryWorkspaceIndicator
    int AviaryWorkspaceIndicator_aviary_indicatorId -> AviaryWorkspaceIndicator_aviary_indicatorId
    int AviaryWorkspace_aviary_defaultScreen -> AviaryWorkspace_aviary_defaultScreen
    int AviaryWorkspace_aviary_overscroll -> AviaryWorkspace_aviary_overscroll
    int[] Theme -> Theme
    int Theme_aviaryAdjustDividerWeight -> Theme_aviaryAdjustDividerWeight
    int Theme_aviaryAdjustImageViewStyle -> Theme_aviaryAdjustImageViewStyle
    int Theme_aviaryAdjustItemWeight -> Theme_aviaryAdjustItemWeight
    int Theme_aviaryAdjustOptionPanelToggleButtonStyle -> Theme_aviaryAdjustOptionPanelToggleButtonStyle
    int Theme_aviaryAdjustOptionPanelToggleCenterButtonStyle -> Theme_aviaryAdjustOptionPanelToggleCenterButtonStyle
    int Theme_aviaryAdjustOptionPanelToggleLeftButtonStyle -> Theme_aviaryAdjustOptionPanelToggleLeftButtonStyle
    int Theme_aviaryAdjustOptionPanelToggleRightButtonStyle -> Theme_aviaryAdjustOptionPanelToggleRightButtonStyle
    int Theme_aviaryBackgroundColor -> Theme_aviaryBackgroundColor
    int Theme_aviaryBottomBarHeight -> Theme_aviaryBottomBarHeight
    int Theme_aviaryBottomBarHorizontalViewStyle -> Theme_aviaryBottomBarHorizontalViewStyle
    int Theme_aviaryBottomBarLogoContainerStyle -> Theme_aviaryBottomBarLogoContainerStyle
    int Theme_aviaryBottomBarLogoImageStyle -> Theme_aviaryBottomBarLogoImageStyle
    int Theme_aviaryBottomBarOptionPanelContainerStyle -> Theme_aviaryBottomBarOptionPanelContainerStyle
    int Theme_aviaryBottomBarOptionPanelContainerStyleNoMargin -> Theme_aviaryBottomBarOptionPanelContainerStyleNoMargin
    int Theme_aviaryBottomBarOptionPanelStyle -> Theme_aviaryBottomBarOptionPanelStyle
    int Theme_aviaryBottomBarToolFeedBackStyle -> Theme_aviaryBottomBarToolFeedBackStyle
    int Theme_aviaryBottomBarToolImageStyle -> Theme_aviaryBottomBarToolImageStyle
    int Theme_aviaryBottomBarToolStyle -> Theme_aviaryBottomBarToolStyle
    int Theme_aviaryBottomBarToolTextStyle -> Theme_aviaryBottomBarToolTextStyle
    int Theme_aviaryBottomBarViewFlipperStyle -> Theme_aviaryBottomBarViewFlipperStyle
    int Theme_aviaryColorSplashOptionPanelToggleButtonStyle -> Theme_aviaryColorSplashOptionPanelToggleButtonStyle
    int Theme_aviaryColorSplashOptionPanelToggleLeftButtonStyle -> Theme_aviaryColorSplashOptionPanelToggleLeftButtonStyle
    int Theme_aviaryColorSplashOptionPanelToggleRightButtonStyle -> Theme_aviaryColorSplashOptionPanelToggleRightButtonStyle
    int Theme_aviaryCropHighlightStyle -> Theme_aviaryCropHighlightStyle
    int Theme_aviaryCropImageViewStyle -> Theme_aviaryCropImageViewStyle
    int Theme_aviaryCustomDialogButtonSecondaryStyle -> Theme_aviaryCustomDialogButtonSecondaryStyle
    int Theme_aviaryCustomDialogButtonStyle -> Theme_aviaryCustomDialogButtonStyle
    int Theme_aviaryDefaultTextStyle -> Theme_aviaryDefaultTextStyle
    int Theme_aviaryEdgeEffectDefaultStyle -> Theme_aviaryEdgeEffectDefaultStyle
    int Theme_aviaryEffectThumbDividerLeftContainerStyle -> Theme_aviaryEffectThumbDividerLeftContainerStyle
    int Theme_aviaryEffectThumbDividerLeftStyle -> Theme_aviaryEffectThumbDividerLeftStyle
    int Theme_aviaryEffectThumbDividerRightContainerStyle -> Theme_aviaryEffectThumbDividerRightContainerStyle
    int Theme_aviaryEffectThumbDividerRightStyle -> Theme_aviaryEffectThumbDividerRightStyle
    int Theme_aviaryEffectThumbDividerStyle -> Theme_aviaryEffectThumbDividerStyle
    int Theme_aviaryEffectThumbDividerTextStyle -> Theme_aviaryEffectThumbDividerTextStyle
    int Theme_aviaryEffectThumbHiddenSelector -> Theme_aviaryEffectThumbHiddenSelector
    int Theme_aviaryEffectThumbLayoutExternalStyle -> Theme_aviaryEffectThumbLayoutExternalStyle
    int Theme_aviaryEffectThumbLayoutStyle -> Theme_aviaryEffectThumbLayoutStyle
    int Theme_aviaryEffectThumbTextStyle -> Theme_aviaryEffectThumbTextStyle
    int Theme_aviaryEffectsHorizontalViewStyle -> Theme_aviaryEffectsHorizontalViewStyle
    int Theme_aviaryEnhanceItemWeight -> Theme_aviaryEnhanceItemWeight
    int Theme_aviaryEnhanceOptionPanelToggleCenterButtonStyle -> Theme_aviaryEnhanceOptionPanelToggleCenterButtonStyle
    int Theme_aviaryEnhanceOptionPanelToggleLeftButtonStyle -> Theme_aviaryEnhanceOptionPanelToggleLeftButtonStyle
    int Theme_aviaryEnhanceOptionPanelToggleRightButtonStyle -> Theme_aviaryEnhanceOptionPanelToggleRightButtonStyle
    int Theme_aviaryFeedbackDialogDividerStyle -> Theme_aviaryFeedbackDialogDividerStyle
    int Theme_aviaryFeedbackDialogStyle -> Theme_aviaryFeedbackDialogStyle
    int Theme_aviaryFeedbackDialogTextMessageStyle -> Theme_aviaryFeedbackDialogTextMessageStyle
    int Theme_aviaryFeedbackDialogTextVersionStyle -> Theme_aviaryFeedbackDialogTextVersionStyle
    int Theme_aviaryFocusOptionPanelToggleLeftButtonStyle -> Theme_aviaryFocusOptionPanelToggleLeftButtonStyle
    int Theme_aviaryFocusOptionPanelToggleRightButtonStyle -> Theme_aviaryFocusOptionPanelToggleRightButtonStyle
    int Theme_aviaryFontLight -> Theme_aviaryFontLight
    int Theme_aviaryFontRegular -> Theme_aviaryFontRegular
    int Theme_aviaryGalleryBottomIndicatorStyle -> Theme_aviaryGalleryBottomIndicatorStyle
    int Theme_aviaryGalleryItemContainerStyle -> Theme_aviaryGalleryItemContainerStyle
    int Theme_aviaryGalleryItemCropImageViewStyle -> Theme_aviaryGalleryItemCropImageViewStyle
    int Theme_aviaryGalleryItemCropTextCustomStyle -> Theme_aviaryGalleryItemCropTextCustomStyle
    int Theme_aviaryGalleryItemCropTextNormalStyle -> Theme_aviaryGalleryItemCropTextNormalStyle
    int Theme_aviaryGalleryItemDividerStyle -> Theme_aviaryGalleryItemDividerStyle
    int Theme_aviaryGalleryItemHighlightImageStyle -> Theme_aviaryGalleryItemHighlightImageStyle
    int Theme_aviaryGalleryStyle -> Theme_aviaryGalleryStyle
    int Theme_aviaryGalleryTopIndicatorStyle -> Theme_aviaryGalleryTopIndicatorStyle
    int Theme_aviaryHiddenEditTextStyle -> Theme_aviaryHiddenEditTextStyle
    int Theme_aviaryHiddenEditTextStyleMultiline -> Theme_aviaryHiddenEditTextStyleMultiline
    int Theme_aviaryHighlightImageButtonStyle -> Theme_aviaryHighlightImageButtonStyle
    int Theme_aviaryIAPDialogContainerStyle -> Theme_aviaryIAPDialogContainerStyle
    int Theme_aviaryIAPDialogDownloadButtonStyle -> Theme_aviaryIAPDialogDownloadButtonStyle
    int Theme_aviaryIAPDialogGridBackground -> Theme_aviaryIAPDialogGridBackground
    int Theme_aviaryIAPDialogGridTopStyle -> Theme_aviaryIAPDialogGridTopStyle
    int Theme_aviaryIAPDialogHeightWeight -> Theme_aviaryIAPDialogHeightWeight
    int Theme_aviaryIAPDialogIcon -> Theme_aviaryIAPDialogIcon
    int Theme_aviaryIAPDialogMainLayout -> Theme_aviaryIAPDialogMainLayout
    int Theme_aviaryIAPDialogMarginTopWeight -> Theme_aviaryIAPDialogMarginTopWeight
    int Theme_aviaryIAPDialogShadowBottom -> Theme_aviaryIAPDialogShadowBottom
    int Theme_aviaryIAPDialogShadowTop -> Theme_aviaryIAPDialogShadowTop
    int Theme_aviaryIAPDialogTextStyle -> Theme_aviaryIAPDialogTextStyle
    int Theme_aviaryIAPDialogTitleStyle -> Theme_aviaryIAPDialogTitleStyle
    int Theme_aviaryIAPDialogWidthWeight -> Theme_aviaryIAPDialogWidthWeight
    int Theme_aviaryIAPDialogWorkspaceIndicatorStyle -> Theme_aviaryIAPDialogWorkspaceIndicatorStyle
    int Theme_aviaryIAPDialogWorkspaceStyle -> Theme_aviaryIAPDialogWorkspaceStyle
    int Theme_aviaryImageViewDrawableOverlaySticker -> Theme_aviaryImageViewDrawableOverlaySticker
    int Theme_aviaryImageViewDrawableOverlayStickerHighlightStyle -> Theme_aviaryImageViewDrawableOverlayStickerHighlightStyle
    int Theme_aviaryImageViewDrawableOverlayText -> Theme_aviaryImageViewDrawableOverlayText
    int Theme_aviaryImageViewDrawableOverlayTextHighlightStyle -> Theme_aviaryImageViewDrawableOverlayTextHighlightStyle
    int Theme_aviaryLensViewStyle -> Theme_aviaryLensViewStyle
    int Theme_aviaryLoaderToastStyle -> Theme_aviaryLoaderToastStyle
    int Theme_aviaryMainImagePadding -> Theme_aviaryMainImagePadding
    int Theme_aviaryMemeButtonStyle -> Theme_aviaryMemeButtonStyle
    int Theme_aviaryMemeClearButtonStyle -> Theme_aviaryMemeClearButtonStyle
    int Theme_aviaryNavBarHeight -> Theme_aviaryNavBarHeight
    int Theme_aviaryNavBarStyle -> Theme_aviaryNavBarStyle
    int Theme_aviaryNavButtonApplyStyle -> Theme_aviaryNavButtonApplyStyle
    int Theme_aviaryNavButtonStyle -> Theme_aviaryNavButtonStyle
    int Theme_aviaryNavDividerStyle -> Theme_aviaryNavDividerStyle
    int Theme_aviaryNavTitleStyle -> Theme_aviaryNavTitleStyle
    int Theme_aviaryOptionPanelBottomIndicatorStyle -> Theme_aviaryOptionPanelBottomIndicatorStyle
    int Theme_aviaryOptionPanelBottomLineStyle -> Theme_aviaryOptionPanelBottomLineStyle
    int Theme_aviaryOptionPanelDefaultButtonStyle -> Theme_aviaryOptionPanelDefaultButtonStyle
    int Theme_aviaryOptionPanelToggleButtonStyle -> Theme_aviaryOptionPanelToggleButtonStyle
    int Theme_aviaryOptionPanelToggleCenterButtonStyle -> Theme_aviaryOptionPanelToggleCenterButtonStyle
    int Theme_aviaryOptionPanelToggleLeftButtonStyle -> Theme_aviaryOptionPanelToggleLeftButtonStyle
    int Theme_aviaryOptionPanelToggleRightButtonStyle -> Theme_aviaryOptionPanelToggleRightButtonStyle
    int Theme_aviaryOptionPanelTopIndicatorStyle -> Theme_aviaryOptionPanelTopIndicatorStyle
    int Theme_aviaryPanelDisabledStatusBackground -> Theme_aviaryPanelDisabledStatusBackground
    int Theme_aviaryPreviewFillDrawableStyle -> Theme_aviaryPreviewFillDrawableStyle
    int Theme_aviaryPreviewSpotDrawableStyle -> Theme_aviaryPreviewSpotDrawableStyle
    int Theme_aviaryPreviewSpotViewStyle -> Theme_aviaryPreviewSpotViewStyle
    int Theme_aviaryPrimaryButtonStyle -> Theme_aviaryPrimaryButtonStyle
    int Theme_aviaryProgressBarActionBar -> Theme_aviaryProgressBarActionBar
    int Theme_aviaryProgressBarActionBarHeight -> Theme_aviaryProgressBarActionBarHeight
    int Theme_aviaryProgressBarActionBarWidth -> Theme_aviaryProgressBarActionBarWidth
    int Theme_aviaryProgressBarLarge -> Theme_aviaryProgressBarLarge
    int Theme_aviaryProgressBarLargeInverse -> Theme_aviaryProgressBarLargeInverse
    int Theme_aviaryProgressBarMedium -> Theme_aviaryProgressBarMedium
    int Theme_aviaryProgressBarMediumInverse -> Theme_aviaryProgressBarMediumInverse
    int Theme_aviaryProgressBarSmall -> Theme_aviaryProgressBarSmall
    int Theme_aviaryProgressBarSmallInverse -> Theme_aviaryProgressBarSmallInverse
    int Theme_aviarySecondaryButtonStyle -> Theme_aviarySecondaryButtonStyle
    int Theme_aviarySeekBarStyle -> Theme_aviarySeekBarStyle
    int Theme_aviarySplashDividerWeight -> Theme_aviarySplashDividerWeight
    int Theme_aviarySplashItemWeight -> Theme_aviarySplashItemWeight
    int Theme_aviarySymbolMinusStyle -> Theme_aviarySymbolMinusStyle
    int Theme_aviarySymbolPlusStyle -> Theme_aviarySymbolPlusStyle
    int Theme_aviaryTiltShiftViewStyle -> Theme_aviaryTiltShiftViewStyle
    int Theme_aviaryToastExitAnimation -> Theme_aviaryToastExitAnimation
    int Theme_aviaryToggleButtonStyle -> Theme_aviaryToggleButtonStyle
    int Theme_aviaryWheelStyle -> Theme_aviaryWheelStyle
    int Theme_textAppearance -> Theme_textAppearance
    int Theme_textAppearanceInverted -> Theme_textAppearanceInverted
    int Theme_textAppearanceLarge -> Theme_textAppearanceLarge
    int Theme_textAppearanceLargeInverted -> Theme_textAppearanceLargeInverted
    int Theme_textAppearanceMedium -> Theme_textAppearanceMedium
    int Theme_textAppearanceMediumInverted -> Theme_textAppearanceMediumInverted
    int Theme_textAppearanceSmall -> Theme_textAppearanceSmall
    int Theme_textAppearanceSmallInverted -> Theme_textAppearanceSmallInverted
    int Theme_textAppearanceSmallNoSelection -> Theme_textAppearanceSmallNoSelection
com.aviary.android.feather.async_tasks.AsyncImageManager -> com.aviary.android.feather.async_tasks.AsyncImageManager:
    java.util.concurrent.ExecutorService mExecutor1 -> a
    java.util.concurrent.ExecutorService mExecutor2 -> b
    java.lang.Boolean mStopped -> c
    com.aviary.android.feather.utils.SimpleBitmapCache mBitmapCache -> d
    com.aviary.android.feather.async_tasks.AsyncImageManager$OnImageLoadListener mListener -> e
    android.os.Handler mHandler -> f
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> g
    void setOnLoadCompleteListener(com.aviary.android.feather.async_tasks.AsyncImageManager$OnImageLoadListener) -> a
    void shutDownNow() -> a
    void execute(java.util.concurrent.Callable,java.lang.String,android.widget.ImageView,int,com.aviary.android.feather.async_tasks.AsyncImageManager$Priority) -> a
    com.aviary.android.feather.async_tasks.AsyncImageManager$MyRunnable getBitmapTask(android.widget.ImageView) -> b
    void clearCache() -> b
    com.aviary.android.feather.async_tasks.AsyncImageManager$OnImageLoadListener access$0(com.aviary.android.feather.async_tasks.AsyncImageManager) -> a
    java.lang.Boolean access$1(com.aviary.android.feather.async_tasks.AsyncImageManager) -> b
    com.aviary.android.feather.async_tasks.AsyncImageManager$MyRunnable access$2(android.widget.ImageView) -> a
    com.aviary.android.feather.library.log.LoggerFactory$Logger access$3(com.aviary.android.feather.async_tasks.AsyncImageManager) -> c
    com.aviary.android.feather.utils.SimpleBitmapCache access$4(com.aviary.android.feather.async_tasks.AsyncImageManager) -> d
    android.os.Handler access$5(com.aviary.android.feather.async_tasks.AsyncImageManager) -> e
com.aviary.android.feather.async_tasks.AsyncImageManager$1 -> com.aviary.android.feather.async_tasks.AsyncImageManager$1:
    com.aviary.android.feather.async_tasks.AsyncImageManager this$0 -> a
    java.util.concurrent.Callable val$executor -> b
    java.lang.String val$hash -> c
    android.widget.ImageView val$view -> d
    int val$tag -> e
    com.aviary.android.feather.async_tasks.AsyncImageManager$Priority val$priority -> f
    void run() -> run
com.aviary.android.feather.async_tasks.AsyncImageManager$2 -> com.aviary.android.feather.async_tasks.AsyncImageManager$2:
    com.aviary.android.feather.async_tasks.AsyncImageManager this$0 -> a
    java.lang.String val$hash -> c
    int val$tag -> d
    java.util.concurrent.Callable val$executor -> e
    void run() -> run
com.aviary.android.feather.async_tasks.AsyncImageManager$CustomTag -> com.aviary.android.feather.async_tasks.a:
    java.lang.ref.WeakReference taskReference -> a
    com.aviary.android.feather.async_tasks.AsyncImageManager$MyRunnable getDownloaderTask() -> a
com.aviary.android.feather.async_tasks.AsyncImageManager$MyHandler -> com.aviary.android.feather.async_tasks.b:
    java.lang.ref.WeakReference mParent -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.async_tasks.AsyncImageManager$MyRunnable -> com.aviary.android.feather.async_tasks.AsyncImageManager$MyRunnable:
    java.lang.ref.WeakReference mView -> b
com.aviary.android.feather.async_tasks.AsyncImageManager$OnImageLoadListener -> com.aviary.android.feather.async_tasks.c:
    void onLoadComplete(android.widget.ImageView,android.graphics.Bitmap,int) -> a
com.aviary.android.feather.async_tasks.AsyncImageManager$Priority -> com.aviary.android.feather.async_tasks.d:
    com.aviary.android.feather.async_tasks.AsyncImageManager$Priority HIGH -> a
    com.aviary.android.feather.async_tasks.AsyncImageManager$Priority LOW -> b
    com.aviary.android.feather.async_tasks.AsyncImageManager$Priority[] ENUM$VALUES -> c
    com.aviary.android.feather.async_tasks.AsyncImageManager$Priority[] values() -> values
    com.aviary.android.feather.async_tasks.AsyncImageManager$Priority valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.async_tasks.AsyncImageManager$Thumb -> com.aviary.android.feather.async_tasks.e:
    java.lang.ref.WeakReference bitmap -> a
    java.lang.ref.WeakReference image -> b
    int tag -> c
com.aviary.android.feather.async_tasks.DownloadImageAsyncTask -> com.aviary.android.feather.async_tasks.f:
    com.aviary.android.feather.async_tasks.DownloadImageAsyncTask$OnImageDownloadListener mListener -> a
    android.net.Uri mUri -> b
    java.lang.String error -> c
    com.aviary.android.feather.library.utils.ImageLoader$ImageSizes mImageSize -> d
    int mMaxSize -> e
    void setOnLoadListener(com.aviary.android.feather.async_tasks.DownloadImageAsyncTask$OnImageDownloadListener) -> a
    void onPreExecute() -> onPreExecute
    android.graphics.Bitmap doInBackground(android.content.Context[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    int getManagedMaxImageSize(android.content.Context) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.async_tasks.DownloadImageAsyncTask$OnImageDownloadListener -> com.aviary.android.feather.async_tasks.g:
    void onDownloadStart() -> x
    void onDownloadComplete(android.graphics.Bitmap,com.aviary.android.feather.library.utils.ImageLoader$ImageSizes) -> a
    void onDownloadError(java.lang.String) -> a
com.aviary.android.feather.async_tasks.ExifTask -> com.aviary.android.feather.async_tasks.h:
    android.os.Bundle call(com.aviary.android.feather.library.services.IAviaryController,java.lang.String) -> a
    java.lang.Object call(com.aviary.android.feather.library.services.IAviaryController,java.lang.Object) -> a
com.aviary.android.feather.effects.AbstractContentPanel -> com.aviary.android.feather.effects.a:
    com.aviary.android.feather.effects.AbstractPanel$OnContentReadyListener mContentReadyListener -> a
    android.view.View mDrawingPanel -> b
    it.sephiroth.android.library.imagezoom.ImageViewTouch mImageView -> c
    void setOnReadyListener(com.aviary.android.feather.effects.AbstractPanel$OnContentReadyListener) -> a
    android.view.View getContentView(android.view.LayoutInflater) -> a
    android.view.View getContentView() -> a
    void onDispose() -> b
    void setEnabled(boolean) -> a
    void contentReady() -> c
    android.view.View generateContentView(android.view.LayoutInflater) -> b
com.aviary.android.feather.effects.AbstractOptionPanel -> com.aviary.android.feather.effects.b:
    android.view.ViewGroup mOptionView -> d
    android.view.ViewGroup getOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> a
    android.view.ViewGroup getOptionView() -> d
    void onDispose() -> b
    void setEnabled(boolean) -> a
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    void disableHapticIsNecessary(com.aviary.android.feather.widget.VibrationWidget[]) -> a
    android.view.View getOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> c
com.aviary.android.feather.effects.AbstractPanel -> com.aviary.android.feather.effects.c:
    android.graphics.Bitmap mPreview -> e
    android.graphics.Bitmap mBitmap -> f
    android.os.Bundle mOptions -> a
    boolean mActive -> b
    boolean mCreated -> c
    boolean mChanged -> g
    boolean mSaving -> h
    long mRenderTime -> i
    boolean mEnabled -> j
    com.aviary.android.feather.headless.filters.IFilter mFilter -> k
    java.util.HashMap mTrackingAttributes -> l
    com.aviary.android.feather.effects.AbstractPanel$OnProgressListener mProgressListener -> m
    com.aviary.android.feather.effects.AbstractPanel$OnPreviewListener mListener -> n
    com.aviary.android.feather.effects.AbstractPanel$OnApplyResultListener mApplyListener -> o
    com.aviary.android.feather.effects.AbstractPanel$OnErrorListener mErrorListener -> p
    com.aviary.android.feather.library.services.IAviaryController mFilterContext -> d
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters mEntryName -> s
    com.aviary.android.feather.library.log.LoggerFactory$Logger mLogger -> q
    android.os.Handler mListenerHandler -> r
    android.os.Handler getHandler() -> e
    void setToolbarTitle(java.lang.CharSequence) -> a
    void restoreToolbarTitle() -> f
    void setApplyEnabled(boolean) -> b
    void onProgressStart() -> g
    void onProgressEnd() -> h
    void onProgressModalStart() -> i
    void onProgressModalEnd() -> j
    void setEnabled(boolean) -> a
    boolean isEnabled() -> k
    boolean isActive() -> l
    boolean isCreated() -> m
    void setOnPreviewListener(com.aviary.android.feather.effects.AbstractPanel$OnPreviewListener) -> a
    void setOnApplyResultListener(com.aviary.android.feather.effects.AbstractPanel$OnApplyResultListener) -> a
    void setOnErrorListener(com.aviary.android.feather.effects.AbstractPanel$OnErrorListener) -> a
    void setOnProgressListener(com.aviary.android.feather.effects.AbstractPanel$OnProgressListener) -> a
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    android.os.Bundle getOptions() -> n
    boolean hasOptions() -> o
    void onOpening() -> p
    void onClosing() -> q
    boolean onBackPressed() -> r
    void onConfigurationChanged(android.content.res.Configuration,android.content.res.Configuration) -> a
    void onSave() -> s
    boolean onCancel() -> t
    void onCancelled() -> u
    boolean getIsChanged() -> v
    void setIsChanged(boolean) -> c
    void onDestroy() -> w
    void onActivate() -> x
    void onDeactivate() -> y
    com.aviary.android.feather.library.services.IAviaryController getContext() -> z
    void onDispose() -> b
    void internalDispose() -> a
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters getName() -> A
    void recyclePreview() -> B
    void onPreviewUpdated() -> C
    void onPreviewChanged(android.graphics.Bitmap,boolean,boolean) -> a
    void onComplete(android.graphics.Bitmap,com.aviary.android.feather.headless.moa.MoaActionList) -> a
    void onGenericError(java.lang.CharSequence,int,android.content.DialogInterface$OnClickListener) -> a
    void onGenericError(java.lang.String,int,android.content.DialogInterface$OnClickListener,int,android.content.DialogInterface$OnClickListener) -> a
    void onGenericError(java.lang.Exception) -> a
    void onGenericMessage(java.lang.CharSequence,java.lang.CharSequence,int,android.content.DialogInterface$OnClickListener) -> a
    void onGenericMessage(java.lang.CharSequence,java.lang.CharSequence,int,android.content.DialogInterface$OnClickListener,int,android.content.DialogInterface$OnClickListener) -> a
    void onGenerateResult() -> D
    void onGenerateResult(com.aviary.android.feather.headless.moa.MoaActionList) -> a
com.aviary.android.feather.effects.AbstractPanel$1 -> com.aviary.android.feather.effects.d:
    com.aviary.android.feather.effects.AbstractPanel this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.effects.AbstractPanel$ContentPanel -> com.aviary.android.feather.effects.e:
    void setOnReadyListener(com.aviary.android.feather.effects.AbstractPanel$OnContentReadyListener) -> a
    android.view.View getContentView(android.view.LayoutInflater) -> a
com.aviary.android.feather.effects.AbstractPanel$OnApplyResultListener -> com.aviary.android.feather.effects.f:
    void onComplete(android.graphics.Bitmap,com.aviary.android.feather.headless.moa.MoaActionList,java.util.HashMap) -> a
com.aviary.android.feather.effects.AbstractPanel$OnContentReadyListener -> com.aviary.android.feather.effects.g:
    void onReady(com.aviary.android.feather.effects.AbstractPanel) -> a
com.aviary.android.feather.effects.AbstractPanel$OnErrorListener -> com.aviary.android.feather.effects.h:
    void onError(java.lang.CharSequence,int,android.content.DialogInterface$OnClickListener) -> a
    void onError(java.lang.CharSequence,int,android.content.DialogInterface$OnClickListener,int,android.content.DialogInterface$OnClickListener) -> a
    void onMessage(java.lang.CharSequence,java.lang.CharSequence,int,android.content.DialogInterface$OnClickListener) -> a
    void onMessage(java.lang.CharSequence,java.lang.CharSequence,int,android.content.DialogInterface$OnClickListener,int,android.content.DialogInterface$OnClickListener) -> a
com.aviary.android.feather.effects.AbstractPanel$OnPreviewListener -> com.aviary.android.feather.effects.i:
    void onPreviewChange(android.graphics.Bitmap,boolean) -> b
    void onPreviewUpdated() -> p
com.aviary.android.feather.effects.AbstractPanel$OnProgressListener -> com.aviary.android.feather.effects.j:
    void onProgressStart() -> r
    void onProgressEnd() -> s
    void onProgressModalStart() -> t
    void onProgressModalEnd() -> u
com.aviary.android.feather.effects.AbstractPanel$OptionPanel -> com.aviary.android.feather.effects.k:
    android.view.View getOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> c
com.aviary.android.feather.effects.AbstractPanelLoaderService -> com.aviary.android.feather.effects.AbstractPanelLoaderService:
    com.aviary.android.feather.library.content.ToolEntry[] mAllEntries -> a
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$filters$FilterLoaderFactory$Filters -> c
    com.aviary.android.feather.effects.AbstractPanel createNew(com.aviary.android.feather.library.content.ToolEntry) -> a
    com.aviary.android.feather.library.content.ToolEntry[] getToolsEntries() -> a
    void dispose() -> b
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$filters$FilterLoaderFactory$Filters() -> c
com.aviary.android.feather.effects.AdjustEffectPanel -> com.aviary.android.feather.effects.l:
    boolean isClosing -> s
    com.aviary.android.feather.widget.AviaryHighlightImageButton mButton1 -> t
    com.aviary.android.feather.widget.AviaryHighlightImageButton mButton2 -> u
    com.aviary.android.feather.widget.AviaryHighlightImageButton mButton3 -> v
    com.aviary.android.feather.widget.AviaryHighlightImageButton mButton4 -> w
    com.aviary.android.feather.widget.AdjustImageView mAdjustImageView -> x
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onActivate() -> x
    void onDeactivate() -> y
    void onDestroy() -> w
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    android.view.View generateContentView(android.view.LayoutInflater) -> b
    void onClick(android.view.View) -> onClick
    boolean getIsChanged() -> v
    void onGenerateResult() -> D
    boolean onCancel() -> t
    void onResetComplete() -> E
    void setEnabled(boolean) -> a
com.aviary.android.feather.effects.BordersPanel -> com.aviary.android.feather.effects.m:
    int mPluginType -> J
    it.sephiroth.android.library.widget.HorizontalVariableListView mHList -> s
    android.view.View mLoader -> t
    java.lang.Boolean mIsRendering -> u
    boolean mIsAnimating -> K
    com.aviary.android.feather.effects.BordersPanel$RenderTask mCurrentTask -> L
    com.aviary.android.feather.library.services.PluginService mPluginService -> v
    com.aviary.android.feather.library.services.ConfigService mConfigService -> w
    com.aviary.android.feather.library.services.CDSService mCDSService -> x
    com.aviary.android.feather.library.services.ImageCacheService mCacheService -> y
    com.aviary.android.feather.library.services.PreferenceService mPreferenceService -> M
    com.aviary.android.feather.widget.AviaryImageSwitcher mImageSwitcher -> z
    boolean mExternalPacksEnabled -> N
    com.aviary.android.feather.headless.moa.MoaActionList mActions -> A
    java.lang.String mRenderedEffect -> B
    java.lang.String mRenderedPackName -> C
    android.app.AlertDialog mUpdateDialog -> O
    int mCellWidth -> P
    int mThumbSize -> Q
    java.util.List mInstalledPackages -> R
    com.aviary.android.feather.async_tasks.AsyncImageManager mImageManager -> S
    android.graphics.Bitmap mThumbBitmap -> D
    int mSelectedPosition -> E
    int mListFirstValidPosition -> F
    boolean mShowGetMoreView -> T
    android.graphics.Bitmap updateArrowBitmap -> G
    int mFeaturedCount -> U
    boolean mUpdateErrorHandled -> V
    boolean mFirstTimeRenderer -> W
    android.graphics.BitmapFactory$Options mThumbnailOptions -> X
    boolean mEnableFastPreview -> H
    com.aviary.android.feather.widget.IAPDialog mIapDialog -> I
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onActivate() -> x
    void initContentImage(com.aviary.android.feather.widget.AviaryImageSwitcher) -> a
    int getPluginType() -> E
    void showUpdateAlert(java.lang.CharSequence,java.lang.CharSequence,int,java.lang.String,boolean) -> a
    void showUpdateAlertMultiplePlugins(int,boolean) -> a
    void showUpdateAlertMultipleItems(java.lang.String,java.util.Set) -> a
    java.lang.String getError(int,java.lang.String) -> a
    void onPostActivate() -> F
    void onDestroy() -> w
    void onDeactivate() -> y
    void onConfigurationChanged(android.content.res.Configuration,android.content.res.Configuration) -> a
    void onDispose() -> b
    void onGenerateResult() -> D
    void onComplete(android.graphics.Bitmap,com.aviary.android.feather.headless.moa.MoaActionList) -> a
    boolean onBackPressed() -> r
    void onCancelled() -> u
    boolean getIsChanged() -> v
    void onUpdate(com.aviary.android.feather.library.services.PluginService,android.os.Bundle) -> a
    void onExternalUpdate(com.aviary.android.feather.library.services.PluginService) -> a
    void onLoadComplete(android.widget.ImageView,android.graphics.Bitmap,int) -> a
    boolean validDelta(android.os.Bundle) -> a
    android.view.View makeView() -> makeView
    android.view.View generateContentView(android.view.LayoutInflater) -> b
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    android.graphics.Bitmap generateThumbnail(android.graphics.Bitmap,int,int) -> a
    void updateInstalledPacks(boolean) -> d
    android.widget.BaseAdapter createListAdapter(android.content.Context,java.util.List) -> a
    void onEffectListUpdated(java.util.List,java.util.List,int,int,int) -> a
    void displayIAPDialog(com.aviary.android.feather.widget.IAPDialog$IAPUpdater) -> a
    boolean removeIapDialog() -> L
    void handleErrors(java.util.List) -> a
    void renderEffect(com.aviary.android.feather.effects.BordersPanel$EffectPack,int) -> a
    com.aviary.android.feather.effects.BordersPanel$RenderTask createRenderTask(int) -> a
    boolean killCurrentTask() -> G
    com.aviary.android.feather.headless.filters.INativeFilter loadNativeFilter(com.aviary.android.feather.effects.BordersPanel$EffectPack,int,java.lang.CharSequence,boolean) -> a
    boolean backHandled() -> H
    boolean onItemClick(android.widget.AdapterView,android.view.View,int,long) -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    java.lang.CharSequence[] getOptionalEffectsValues() -> I
    java.lang.CharSequence[] getOptionalEffectsLabels() -> J
    java.util.List loadPluginItems(com.aviary.android.feather.library.plugins.PluginFactory$InternalPlugin) -> a
    java.util.List loadPluginIds(com.aviary.android.feather.library.plugins.PluginFactory$InternalPlugin) -> b
    void setEnabled(boolean) -> a
    boolean access$1(com.aviary.android.feather.effects.BordersPanel) -> a
    int access$2(com.aviary.android.feather.effects.BordersPanel) -> b
    int access$3(com.aviary.android.feather.effects.BordersPanel) -> c
    com.aviary.android.feather.async_tasks.AsyncImageManager access$4(com.aviary.android.feather.effects.BordersPanel) -> d
    android.graphics.BitmapFactory$Options access$5() -> K
    java.util.List access$6(com.aviary.android.feather.effects.BordersPanel) -> e
    int access$7(com.aviary.android.feather.effects.BordersPanel) -> f
    void access$8(com.aviary.android.feather.effects.BordersPanel,boolean) -> a
    boolean access$9(com.aviary.android.feather.effects.BordersPanel) -> g
    int access$10(com.aviary.android.feather.effects.BordersPanel) -> h
    void access$11(com.aviary.android.feather.effects.BordersPanel,java.util.List,java.util.List,int,int,int) -> a
    void access$12(com.aviary.android.feather.effects.BordersPanel,boolean) -> b
    void access$13(com.aviary.android.feather.effects.BordersPanel,com.aviary.android.feather.effects.BordersPanel$RenderTask) -> a
    boolean access$14(com.aviary.android.feather.effects.BordersPanel) -> i
com.aviary.android.feather.effects.BordersPanel$1 -> com.aviary.android.feather.effects.n:
    com.aviary.android.feather.effects.BordersPanel this$0 -> a
    java.lang.CharSequence val$packageName -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.BordersPanel$10 -> com.aviary.android.feather.effects.o:
    com.aviary.android.feather.effects.BordersPanel this$0 -> a
    void onClose() -> a
com.aviary.android.feather.effects.BordersPanel$11 -> com.aviary.android.feather.effects.BordersPanel$11:
    com.aviary.android.feather.effects.BordersPanel this$0 -> a
    void run() -> run
com.aviary.android.feather.effects.BordersPanel$2 -> com.aviary.android.feather.effects.p:
    com.aviary.android.feather.effects.BordersPanel this$0 -> a
    java.lang.CharSequence val$packageName -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.BordersPanel$3 -> com.aviary.android.feather.effects.q:
    com.aviary.android.feather.effects.BordersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.BordersPanel$4 -> com.aviary.android.feather.effects.r:
    com.aviary.android.feather.effects.BordersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.BordersPanel$5 -> com.aviary.android.feather.effects.s:
    com.aviary.android.feather.effects.BordersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.BordersPanel$6 -> com.aviary.android.feather.effects.t:
    com.aviary.android.feather.effects.BordersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.BordersPanel$7 -> com.aviary.android.feather.effects.BordersPanel$7:
    com.aviary.android.feather.effects.BordersPanel this$0 -> a
    android.widget.ImageView val$view -> b
    android.graphics.Bitmap val$bitmap -> c
    void run() -> run
com.aviary.android.feather.effects.BordersPanel$8 -> com.aviary.android.feather.effects.BordersPanel$8:
    com.aviary.android.feather.effects.BordersPanel this$0 -> a
    int val$delta -> b
    void run() -> run
com.aviary.android.feather.effects.BordersPanel$9 -> com.aviary.android.feather.effects.u:
    com.aviary.android.feather.effects.BordersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.BordersPanel$BorderThumbnailCallable -> com.aviary.android.feather.effects.v:
    com.aviary.android.feather.library.plugins.PluginFactory$InternalPlugin mPlugin -> a
    android.graphics.Bitmap mBitmap -> b
    int mFinalSize -> c
    java.lang.String mUrl -> d
    java.lang.ref.SoftReference cacheRef -> e
    android.graphics.Bitmap call() -> a
    com.aviary.android.feather.headless.moa.MoaActionList actionsForRoundedThumbnail(boolean,com.aviary.android.feather.headless.filters.INativeFilter) -> a
    java.lang.Object call() -> call
com.aviary.android.feather.effects.BordersPanel$EffectPack -> com.aviary.android.feather.effects.w:
    java.lang.CharSequence mPackageName -> a
    java.util.List mValues -> b
    java.util.List mIds -> c
    java.lang.CharSequence mTitle -> d
    int mStatus -> e
    java.lang.String mError -> f
    com.aviary.android.feather.library.plugins.PluginFactory$IPlugin mPluginRef -> g
    int size -> h
    int index -> i
    com.aviary.android.feather.effects.BordersPanel$EffectPack$EffectPackType mType -> j
    int getIndex() -> a
    void setIndex(int) -> a
    java.lang.CharSequence getItemAt(int) -> b
    long getItemIdAt(int) -> c
    java.lang.CharSequence getLabelAt(int) -> d
    void finalize() -> finalize
com.aviary.android.feather.effects.BordersPanel$EffectPack$EffectPackType -> com.aviary.android.feather.effects.x:
    com.aviary.android.feather.effects.BordersPanel$EffectPack$EffectPackType INTERNAL -> a
    com.aviary.android.feather.effects.BordersPanel$EffectPack$EffectPackType EXTERNAL -> b
    com.aviary.android.feather.effects.BordersPanel$EffectPack$EffectPackType PACK_DIVIDER -> c
    com.aviary.android.feather.effects.BordersPanel$EffectPack$EffectPackType LEFT_DIVIDER -> d
    com.aviary.android.feather.effects.BordersPanel$EffectPack$EffectPackType RIGHT_DIVIDER -> e
    com.aviary.android.feather.effects.BordersPanel$EffectPack$EffectPackType GET_MORE -> f
    com.aviary.android.feather.effects.BordersPanel$EffectPack$EffectPackType[] ENUM$VALUES -> g
    com.aviary.android.feather.effects.BordersPanel$EffectPack$EffectPackType[] values() -> values
    com.aviary.android.feather.effects.BordersPanel$EffectPack$EffectPackType valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.effects.BordersPanel$EffectPackError -> com.aviary.android.feather.effects.y:
    java.lang.CharSequence mPackageName -> a
    java.lang.CharSequence mLabel -> b
    int mError -> c
    java.lang.String mErrorMessage -> d
    com.aviary.android.feather.effects.BordersPanel this$0 -> e
com.aviary.android.feather.effects.BordersPanel$ExternalFramesThumbnailCallable -> com.aviary.android.feather.effects.z:
    java.lang.String mUri -> a
    int mFallbackResId -> b
    android.graphics.drawable.BitmapDrawable mFolder -> c
    java.lang.ref.SoftReference cacheServiceRef -> d
    java.lang.ref.SoftReference resourcesRef -> e
    android.graphics.Bitmap call() -> a
    android.graphics.Bitmap generateBitmap(android.graphics.Bitmap) -> a
    java.lang.Object call() -> call
com.aviary.android.feather.effects.BordersPanel$GenerateResultTask -> com.aviary.android.feather.effects.aa:
    android.app.ProgressDialog mProgress -> a
    com.aviary.android.feather.effects.BordersPanel this$0 -> b
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.BordersPanel$ListAdapter -> com.aviary.android.feather.effects.ab:
    java.lang.Object mLock -> a
    android.view.LayoutInflater mInflater -> b
    java.util.List mObjects -> c
    int mDefaultResId -> d
    int mMoreResId -> e
    int mExternalResId -> f
    int mDividerResId -> g
    int mCount -> h
    android.graphics.drawable.BitmapDrawable mExternalFolderIcon -> i
    com.aviary.android.feather.effects.BordersPanel this$0 -> j
    int[] $SWITCH_TABLE$com$aviary$android$feather$effects$BordersPanel$EffectPack$EffectPackType -> k
    android.graphics.drawable.BitmapDrawable getExternalBackgroundDrawable(android.content.Context) -> a
    com.aviary.android.feather.effects.BordersPanel$EffectPack getItem(int) -> a
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.util.concurrent.Callable createContentCallable(com.aviary.android.feather.effects.BordersPanel$EffectPack,int,java.lang.String) -> a
    java.util.concurrent.Callable createExternalContentCallable(java.lang.String) -> a
    java.lang.Object getItem(int) -> getItem
    int[] $SWITCH_TABLE$com$aviary$android$feather$effects$BordersPanel$EffectPack$EffectPackType() -> a
com.aviary.android.feather.effects.BordersPanel$PluginInstallTask -> com.aviary.android.feather.effects.ac:
    java.util.List mErrors -> a
    int mInstalledCount -> c
    int mExternalCount -> d
    int mFirstValidIndex -> e
    com.aviary.android.feather.effects.BordersPanel this$0 -> b
    void onPreExecute() -> onPreExecute
    java.util.List doInBackground(java.lang.Integer[]) -> a
    void onPostExecute(java.util.List) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.BordersPanel$RenderTask -> com.aviary.android.feather.effects.ad:
    int mPosition -> a
    java.lang.String mError -> b
    com.aviary.android.feather.headless.moa.MoaResult mMoaMainExecutor -> c
    com.aviary.android.feather.headless.moa.MoaResult mMoaPreviewExecutor -> d
    com.aviary.android.feather.effects.BordersPanel this$0 -> e
    void onPreExecute() -> a
    com.aviary.android.feather.headless.filters.INativeFilter initFilter(com.aviary.android.feather.effects.BordersPanel$EffectPack,int,java.lang.String) -> a
    com.aviary.android.feather.headless.moa.MoaResult initPreview(com.aviary.android.feather.headless.filters.INativeFilter) -> a
    void doSmallPreviewInBackground() -> b
    void doFullPreviewInBackground(java.lang.String) -> a
    android.graphics.Bitmap doInBackground(com.aviary.android.feather.effects.BordersPanel$EffectPack[]) -> a
    void onProgressUpdate(android.graphics.Bitmap[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onApplyNewBitmap(android.graphics.Bitmap) -> b
    void onRestoreOriginalBitmap() -> c
    void onCancelled() -> d
    void onCancel(android.content.DialogInterface) -> onCancel
    void onPostExecute(java.lang.Object) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> a
    void onProgressUpdate(java.lang.Object[]) -> b
com.aviary.android.feather.effects.BordersPanel$ViewHolder -> com.aviary.android.feather.effects.ae:
    android.widget.TextView text -> a
    android.widget.ImageView image -> b
com.aviary.android.feather.effects.ColorSplashPanel -> com.aviary.android.feather.effects.ColorSplashPanel:
    com.aviary.android.feather.widget.AviaryHighlightImageButton mLensButton -> u
    com.aviary.android.feather.effects.ColorSplashPanel$BackgroundDrawThread mBackgroundDrawThread -> v
    com.aviary.android.feather.library.filters.ColorSplashFilter mFilter -> w
    com.aviary.android.feather.widget.AviaryHighlightImageButton mSmart -> x
    com.aviary.android.feather.widget.AviaryHighlightImageButton mErase -> y
    com.aviary.android.feather.widget.AviaryHighlightImageButton mFree -> z
    com.aviary.android.feather.widget.AviaryHighlightImageButton mCurrent -> A
    android.view.View mDisabledStatusView -> B
    com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode mBrushType -> C
    double BRUSH_MULTIPLIER -> s
    com.aviary.android.feather.headless.moa.MoaActionList mActions -> t
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onActivate() -> x
    void onDispose() -> b
    void onClick(android.view.View) -> onClick
    void onCheckedChanged(com.aviary.android.feather.widget.AviaryHighlightImageButton,boolean,boolean) -> a
    void setSelectedTool(com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode) -> a
    void onDeactivate() -> y
    void onDestroy() -> w
    void onCancelled() -> u
    void onDrawStart(float[],int) -> a
    void onDrawing(float[],int) -> b
    void onDrawEnd() -> E
    void onGenerateResult() -> D
    void setPanelEnabled(boolean) -> d
    com.aviary.android.feather.library.filters.ColorSplashFilter createFilter() -> F
    android.view.View generateContentView(android.view.LayoutInflater) -> b
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    void setEnabled(boolean) -> a
    com.aviary.android.feather.library.filters.ColorSplashFilter access$1(com.aviary.android.feather.effects.ColorSplashPanel) -> a
    com.aviary.android.feather.effects.ColorSplashPanel$BackgroundDrawThread access$2(com.aviary.android.feather.effects.ColorSplashPanel) -> b
com.aviary.android.feather.effects.ColorSplashPanel$BackgroundDrawThread -> com.aviary.android.feather.effects.ColorSplashPanel$BackgroundDrawThread:
    boolean started -> a
    boolean running -> b
    java.util.Queue mQueue -> c
    com.aviary.android.feather.effects.ColorSplashPanel$DrawQueue mCurrentQueue -> d
    android.graphics.PointF mLastPoint -> e
    com.aviary.android.feather.effects.ColorSplashPanel this$0 -> f
    void init() -> a
    void start() -> start
    void quit() -> b
    void pathStart(int,float[],com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode) -> a
    void pathEnd() -> c
    void lineTo(float[]) -> a
    boolean isCompleted() -> d
    int getQueueSize() -> e
    void getLerp(android.graphics.PointF,android.graphics.PointF,float,android.graphics.PointF) -> a
    void clear() -> f
    void finish() -> g
    void run() -> run
com.aviary.android.feather.effects.ColorSplashPanel$DrawQueue -> com.aviary.android.feather.effects.af:
    com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode mode_ -> a
    int radius_ -> b
    boolean completed_ -> c
    com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode getMode() -> a
    int getRadius() -> b
    void end() -> c
    boolean isCompleted() -> d
com.aviary.android.feather.effects.ColorSplashPanel$GenerateResultTask -> com.aviary.android.feather.effects.ag:
    android.app.ProgressDialog mProgress -> a
    com.aviary.android.feather.effects.ColorSplashPanel this$0 -> b
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.CropPanel -> com.aviary.android.feather.effects.ah:
    com.aviary.android.feather.widget.AviaryGallery mGallery -> s
    java.lang.String[] mCropNames -> t
    java.lang.String[] mCropValues -> u
    int mSelectedPosition -> v
    boolean mIsPortrait -> w
    java.util.HashSet mNonInvertOptions -> x
    boolean mStrictPolicy -> y
    boolean isChecked -> z
    boolean mHasScrolled -> A
    void invertRatios(java.lang.String[],java.lang.String[]) -> a
    void populateInvertOptions(java.util.HashSet,java.lang.String[]) -> a
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onActivate() -> x
    double calculateAspectRatio(int,boolean) -> a
    void onDestroy() -> w
    void onDeactivate() -> y
    void createCropView(double,boolean) -> a
    void setCustomRatio(double,boolean) -> b
    void onGenerateResult() -> D
    android.view.View generateContentView(android.view.LayoutInflater) -> b
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    void onItemClick(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> a
    void onScrollStarted(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> b
    void onScroll(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> c
    void onScrollFinished(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> d
    void setEnabled(boolean) -> a
com.aviary.android.feather.effects.CropPanel$GalleryAdapter -> com.aviary.android.feather.effects.ai:
    int INVALID_POSITION -> a
    int VALID_POSITION -> b
    int VALID_POSITION_CUSTOM -> c
    java.lang.String[] mValues -> g
    android.view.LayoutInflater mLayoutInflater -> d
    android.content.res.Resources mRes -> e
    com.aviary.android.feather.effects.CropPanel this$0 -> f
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.CropPanel$GenerateResultTask -> com.aviary.android.feather.effects.aj:
    com.aviary.android.feather.library.graphics.RectD mCropRect -> a
    com.aviary.android.feather.headless.moa.MoaActionList mActionList -> b
    com.aviary.android.feather.effects.CropPanel this$0 -> c
    void onPreExecute() -> onPreExecute
    android.graphics.Bitmap doInBackground(android.graphics.Bitmap[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.DelayedSpotDrawPanel -> com.aviary.android.feather.effects.DelayedSpotDrawPanel:
    int mBrushSize -> s
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters mFilterType -> t
    com.aviary.android.feather.widget.AviaryGallery mGallery -> u
    int[] mBrushSizes -> v
    int mSelectedPosition -> w
    com.aviary.android.feather.widget.AviaryHighlightImageButton mLensButton -> x
    com.aviary.android.feather.effects.DelayedSpotDrawPanel$MyHandlerThread mBackgroundDrawThread -> D
    android.view.View mDisabledStatusView -> E
    android.widget.Toast mToast -> y
    com.aviary.android.feather.graphics.PreviewSpotDrawable mDrawable -> z
    com.aviary.android.feather.headless.moa.MoaActionList mActions -> A
    boolean mLimitDrawArea -> F
    float minRadiusSize -> B
    float maxRadiusSize -> C
    int mBrushSizeIndex -> G
    int minBrushSize -> H
    int maxBrushSize -> I
    void showSizePreview(int) -> a
    void updateSizePreview(int) -> b
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onActivate() -> x
    void onDispose() -> b
    void onClick(android.view.View) -> onClick
    void setSelectedTool(com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode) -> a
    void onDeactivate() -> y
    void onDestroy() -> w
    void onCancelled() -> u
    android.widget.Toast makeToast() -> G
    void onDrawStart(float[],int) -> a
    void onDrawing(float[],int) -> b
    void onDrawEnd() -> E
    void onGenerateResult() -> D
    void setPanelEnabled(boolean) -> d
    com.aviary.android.feather.headless.filters.IFilter createFilter() -> F
    android.view.View generateContentView(android.view.LayoutInflater) -> b
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    void onScrollStarted(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> b
    void onScroll(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> c
    void onScrollFinished(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> d
    void setEnabled(boolean) -> a
    int access$1(com.aviary.android.feather.effects.DelayedSpotDrawPanel) -> a
    int access$2(com.aviary.android.feather.effects.DelayedSpotDrawPanel) -> b
    com.aviary.android.feather.effects.DelayedSpotDrawPanel$MyHandlerThread access$3(com.aviary.android.feather.effects.DelayedSpotDrawPanel) -> c
com.aviary.android.feather.effects.DelayedSpotDrawPanel$GalleryAdapter -> com.aviary.android.feather.effects.ak:
    int VALID_POSITION -> d
    int INVALID_POSITION -> e
    int[] sizes -> f
    android.view.LayoutInflater mLayoutInflater -> a
    android.content.res.Resources mRes -> b
    com.aviary.android.feather.effects.DelayedSpotDrawPanel this$0 -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.DelayedSpotDrawPanel$GenerateResultTask -> com.aviary.android.feather.effects.al:
    android.app.ProgressDialog mProgress -> a
    com.aviary.android.feather.effects.DelayedSpotDrawPanel this$0 -> b
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.DelayedSpotDrawPanel$MyHandlerThread -> com.aviary.android.feather.effects.DelayedSpotDrawPanel$MyHandlerThread:
    boolean started -> a
    boolean running -> b
    boolean paused -> c
    java.util.Queue mQueue -> d
    com.aviary.android.feather.library.filters.SpotBrushFilter mCurrentFilter -> e
    float mRadius -> f
    com.aviary.android.feather.effects.DelayedSpotDrawPanel this$0 -> g
    void init() -> a
    void start() -> start
    void quit() -> b
    void pathStart(float,int) -> a
    void pathEnd() -> c
    void pause() -> d
    void setRadius(float,int) -> b
    void moveTo(float[]) -> a
    void lineTo(float[]) -> b
    void quadTo(float[]) -> c
    boolean isCompleted() -> e
    int queueSize() -> f
    android.graphics.PointF getLerp(android.graphics.PointF,android.graphics.PointF,float) -> a
    void run() -> run
com.aviary.android.feather.effects.DrawingPanel -> com.aviary.android.feather.effects.am:
    com.aviary.android.feather.widget.AviaryHighlightImageButton mLensButton -> s
    com.aviary.android.feather.widget.AviaryGallery mGallerySize -> t
    com.aviary.android.feather.widget.AviaryGallery mGalleryColor -> u
    int mSelectedColorPosition -> v
    int mSelectedSizePosition -> w
    int[] mBrushSizes -> x
    int[] mBrushColors -> y
    int mColor -> I
    int mSize -> J
    int mBlur -> K
    android.graphics.Paint mPaint -> L
    com.aviary.android.feather.library.services.ConfigService mConfig -> M
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool mSelectedTool -> N
    int mWidth -> z
    int mHeight -> A
    com.aviary.android.feather.headless.moa.MoaActionList mActionList -> B
    com.aviary.android.feather.headless.moa.MoaAction mAction -> C
    java.util.Collection mOperations -> D
    com.aviary.android.feather.headless.moa.MoaGraphicsOperationParameter mCurrentOperation -> E
    com.aviary.android.feather.graphics.PreviewFillColorDrawable mDrawable -> F
    com.aviary.android.feather.graphics.PreviewSpotDrawable mEraserDrawable -> G
    android.widget.Toast mToast -> H
    float minRadiusSize -> O
    float maxRadiusSize -> P
    int mBrushSizeIndex -> Q
    int mBrushColorIndex -> R
    int minBrushSize -> S
    int maxBrushSize -> T
    int[] $SWITCH_TABLE$com$aviary$android$feather$effects$DrawingPanel$DrawinTool -> U
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void setupSize() -> I
    void setupFill() -> J
    void resetBitmap() -> K
    void onActivate() -> x
    void onDeactivate() -> y
    void onClick(android.view.View) -> onClick
    android.widget.Toast makeToast() -> L
    void updateToast() -> M
    void setSelectedTool(com.aviary.android.feather.effects.DrawingPanel$DrawinTool) -> a
    void setPanelEnabled(boolean) -> d
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool getSelectedTool() -> N
    void onDestroy() -> w
    android.graphics.Paint initPaint(android.graphics.Paint) -> a
    android.view.View generateContentView(android.view.LayoutInflater) -> b
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    void onGenerateResult() -> D
    void onDrawStart() -> E
    void onStart() -> F
    void onMoveTo(float,float) -> a
    void onQuadTo(float,float,float,float) -> a
    void onEnd() -> G
    void setEnabled(boolean) -> a
    float access$1(com.aviary.android.feather.effects.DrawingPanel) -> a
    int access$2(com.aviary.android.feather.effects.DrawingPanel) -> b
    int access$3(com.aviary.android.feather.effects.DrawingPanel) -> c
    float access$4(com.aviary.android.feather.effects.DrawingPanel) -> d
    void access$5(com.aviary.android.feather.effects.DrawingPanel,int) -> a
    android.graphics.Paint access$6(com.aviary.android.feather.effects.DrawingPanel) -> e
    int access$7(com.aviary.android.feather.effects.DrawingPanel) -> f
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool access$8(com.aviary.android.feather.effects.DrawingPanel) -> g
    void access$9(com.aviary.android.feather.effects.DrawingPanel,com.aviary.android.feather.effects.DrawingPanel$DrawinTool) -> a
    void access$10(com.aviary.android.feather.effects.DrawingPanel) -> h
    void access$11(com.aviary.android.feather.effects.DrawingPanel,int) -> b
    int access$12(com.aviary.android.feather.effects.DrawingPanel) -> i
    int[] $SWITCH_TABLE$com$aviary$android$feather$effects$DrawingPanel$DrawinTool() -> H
com.aviary.android.feather.effects.DrawingPanel$1 -> com.aviary.android.feather.effects.an:
    com.aviary.android.feather.effects.DrawingPanel this$0 -> a
    void onScrollFinished(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> d
    void onScrollStarted(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> b
    void onScroll(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> c
com.aviary.android.feather.effects.DrawingPanel$2 -> com.aviary.android.feather.effects.ao:
    com.aviary.android.feather.effects.DrawingPanel this$0 -> a
    void onScrollFinished(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> d
    void onScrollStarted(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> b
    void onScroll(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> c
com.aviary.android.feather.effects.DrawingPanel$DrawinTool -> com.aviary.android.feather.effects.ap:
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool Draw -> a
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool Erase -> b
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool Zoom -> c
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool[] ENUM$VALUES -> d
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool[] values() -> values
    com.aviary.android.feather.effects.DrawingPanel$DrawinTool valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.effects.DrawingPanel$GalleryColorAdapter -> com.aviary.android.feather.effects.aq:
    int VALID_POSITION -> d
    int INVALID_POSITION -> e
    int ERASER_POSITION -> f
    int[] sizes -> g
    android.view.LayoutInflater mLayoutInflater -> a
    android.content.res.Resources mRes -> b
    com.aviary.android.feather.effects.DrawingPanel this$0 -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.DrawingPanel$GallerySizeAdapter -> com.aviary.android.feather.effects.ar:
    int VALID_POSITION -> d
    int INVALID_POSITION -> e
    int[] sizes -> f
    android.view.LayoutInflater mLayoutInflater -> a
    android.content.res.Resources mRes -> b
    com.aviary.android.feather.effects.DrawingPanel this$0 -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.EffectsPanel -> com.aviary.android.feather.effects.as:
    boolean mOpenGlEnabled -> K
    com.aviary.android.feather.opengl.AviaryGLSurfaceView mOpenGlView -> L
    android.graphics.Bitmap mSmallPreview -> M
    int mThumbPadding -> N
    int mThumbRoundedCorners -> O
    int mThumbStrokeColor -> P
    int mThumbStrokeWidth -> Q
    com.aviary.android.feather.opengl.AviaryGLSurfaceView$GLRendererListener mGLRendererListener -> J
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onPostActivate() -> F
    void onDeactivate() -> y
    void onDispose() -> b
    void onGenerateResult() -> D
    void onProgressEnd() -> h
    void onProgressStart() -> g
    com.aviary.android.feather.effects.BordersPanel$ListAdapter createListAdapter(android.content.Context,java.util.List) -> b
    com.aviary.android.feather.effects.BordersPanel$RenderTask createRenderTask(int) -> a
    android.view.View generateContentView(android.view.LayoutInflater) -> b
    void onClosing() -> q
    void initContentImage(com.aviary.android.feather.widget.AviaryImageSwitcher) -> a
    void checkOpenGL(com.aviary.android.feather.library.services.IAviaryController) -> a
    com.aviary.android.feather.headless.filters.INativeFilter loadNativeFilter(com.aviary.android.feather.effects.BordersPanel$EffectPack,int,java.lang.CharSequence,boolean) -> a
    java.lang.CharSequence[] getOptionalEffectsLabels() -> J
    java.lang.CharSequence[] getOptionalEffectsValues() -> I
    java.util.List loadPluginIds(com.aviary.android.feather.library.plugins.PluginFactory$InternalPlugin) -> b
    java.util.List loadPluginItems(com.aviary.android.feather.library.plugins.PluginFactory$InternalPlugin) -> a
    void renderFirstTime(java.lang.String) -> a
    android.widget.BaseAdapter createListAdapter(android.content.Context,java.util.List) -> a
    void setEnabled(boolean) -> a
    void access$2(com.aviary.android.feather.effects.EffectsPanel,java.lang.String) -> a
    boolean access$3(com.aviary.android.feather.effects.EffectsPanel) -> a
    android.graphics.Bitmap access$4(com.aviary.android.feather.effects.EffectsPanel) -> b
    com.aviary.android.feather.opengl.AviaryGLSurfaceView access$5(com.aviary.android.feather.effects.EffectsPanel) -> c
    int access$6(com.aviary.android.feather.effects.EffectsPanel) -> d
    int access$7(com.aviary.android.feather.effects.EffectsPanel) -> e
    int access$8(com.aviary.android.feather.effects.EffectsPanel) -> f
    int access$9(com.aviary.android.feather.effects.EffectsPanel) -> g
com.aviary.android.feather.effects.EffectsPanel$1 -> com.aviary.android.feather.effects.at:
    boolean mInitializedFirstTime -> a
    com.aviary.android.feather.effects.EffectsPanel this$0 -> b
    void OnSurfaceCreated() -> a
    void OnSurfaceChanged(boolean,int,int) -> a
com.aviary.android.feather.effects.EffectsPanel$2 -> com.aviary.android.feather.effects.au:
    com.aviary.android.feather.effects.EffectsPanel this$0 -> a
    void onFutureDone(com.aviary.android.feather.library.threading.Future) -> a
    com.aviary.android.feather.effects.EffectsPanel access$0(com.aviary.android.feather.effects.EffectsPanel$2) -> a
com.aviary.android.feather.effects.EffectsPanel$2$1 -> com.aviary.android.feather.effects.EffectsPanel$2$1:
    com.aviary.android.feather.effects.EffectsPanel$2 this$1 -> a
    void run() -> run
com.aviary.android.feather.effects.EffectsPanel$3 -> com.aviary.android.feather.effects.av:
    com.aviary.android.feather.effects.EffectsPanel this$0 -> a
    void onFutureDone(com.aviary.android.feather.library.threading.Future) -> a
com.aviary.android.feather.effects.EffectsPanel$EffectsListAdapter -> com.aviary.android.feather.effects.aw:
    com.aviary.android.feather.effects.EffectsPanel this$0 -> k
    java.util.concurrent.Callable createExternalContentCallable(java.lang.String) -> a
    java.util.concurrent.Callable createContentCallable(com.aviary.android.feather.effects.BordersPanel$EffectPack,int,java.lang.String) -> a
    android.graphics.drawable.BitmapDrawable getExternalBackgroundDrawable(android.content.Context) -> a
com.aviary.android.feather.effects.EffectsPanel$EffectsRenderTask -> com.aviary.android.feather.effects.ax:
    java.lang.Object mOpenGlCompleted -> h
    com.aviary.android.feather.library.threading.FutureListener mOpenGlBackgroundListener -> f
    com.aviary.android.feather.effects.EffectsPanel this$0 -> g
    com.aviary.android.feather.headless.moa.MoaResult initPreview(com.aviary.android.feather.headless.filters.INativeFilter) -> a
    void doFullPreviewInBackground(java.lang.String) -> a
    android.graphics.Bitmap doInBackground(com.aviary.android.feather.effects.BordersPanel$EffectPack[]) -> a
    void onRestoreOriginalBitmap() -> c
    void onApplyNewBitmap(android.graphics.Bitmap) -> b
    java.lang.Object access$0(com.aviary.android.feather.effects.EffectsPanel$EffectsRenderTask) -> a
    com.aviary.android.feather.effects.EffectsPanel access$1(com.aviary.android.feather.effects.EffectsPanel$EffectsRenderTask) -> b
com.aviary.android.feather.effects.EffectsPanel$EffectsRenderTask$1 -> com.aviary.android.feather.effects.ay:
    com.aviary.android.feather.effects.EffectsPanel$EffectsRenderTask this$1 -> a
    void onFutureDone(com.aviary.android.feather.library.threading.Future) -> a
com.aviary.android.feather.effects.EffectsPanel$ExternalEffectsThumbnailCallable -> com.aviary.android.feather.effects.az:
    android.graphics.Bitmap generateBitmap(android.graphics.Bitmap) -> a
com.aviary.android.feather.effects.EffectsPanel$FilterThumbnailCallable -> com.aviary.android.feather.effects.ba:
    com.aviary.android.feather.headless.filters.INativeFilter mFilter -> a
    java.lang.String mEffectName -> b
    android.graphics.Bitmap srcBitmap -> c
    android.graphics.Bitmap invalidBitmap -> d
    boolean isValid -> e
    long mEffectId -> f
    com.aviary.android.feather.effects.EffectsPanel this$0 -> g
    com.aviary.android.feather.headless.filters.INativeFilter loadFilter(long,java.lang.CharSequence) -> a
    android.graphics.Bitmap call() -> a
    void addUpdateArrow(android.graphics.Bitmap) -> a
    com.aviary.android.feather.headless.moa.MoaActionList actionsForRoundedThumbnail(boolean,com.aviary.android.feather.headless.filters.INativeFilter) -> a
    java.lang.Object call() -> call
com.aviary.android.feather.effects.EnhanceEffectPanel -> com.aviary.android.feather.effects.bb:
    com.aviary.android.feather.effects.EnhanceEffectPanel$RenderTask mCurrentTask -> v
    boolean mIsRendering -> a
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters mFilterType -> w
    boolean enableFastPreview -> b
    com.aviary.android.feather.headless.moa.MoaActionList mActions -> c
    com.aviary.android.feather.widget.AviaryHighlightImageButton mButton1 -> s
    com.aviary.android.feather.widget.AviaryHighlightImageButton mButton2 -> t
    com.aviary.android.feather.widget.AviaryHighlightImageButton mButton3 -> u
    com.aviary.android.feather.widget.AviaryHighlightImageButton mCurrent -> x
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onActivate() -> x
    void onDeactivate() -> y
    void onCheckedChanged(com.aviary.android.feather.widget.AviaryHighlightImageButton,boolean,boolean) -> a
    void onProgressStart() -> g
    void onProgressEnd() -> h
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    boolean onBackPressed() -> r
    void onCancelled() -> u
    boolean onCancel() -> t
    void killCurrentTask() -> a
    boolean getIsChanged() -> v
    void onGenerateResult() -> D
    void setEnabled(boolean) -> a
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters access$1(com.aviary.android.feather.effects.EnhanceEffectPanel) -> a
    void access$2(com.aviary.android.feather.effects.EnhanceEffectPanel,com.aviary.android.feather.effects.EnhanceEffectPanel$RenderTask) -> a
com.aviary.android.feather.effects.EnhanceEffectPanel$GenerateResultTask -> com.aviary.android.feather.effects.bc:
    android.app.ProgressDialog mProgress -> a
    com.aviary.android.feather.effects.EnhanceEffectPanel this$0 -> b
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.EnhanceEffectPanel$RenderTask -> com.aviary.android.feather.effects.bd:
    java.lang.String mError -> a
    com.aviary.android.feather.library.filters.EnhanceFilter renderFilter -> b
    com.aviary.android.feather.effects.EnhanceEffectPanel this$0 -> c
    void onPreExecute() -> onPreExecute
    android.graphics.Bitmap doInBackground(com.aviary.android.feather.library.filters.EnhanceFilter$Types[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onCancelled() -> onCancelled
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.MemePanel -> com.aviary.android.feather.effects.be:
    com.aviary.android.feather.widget.AviaryButton editTopButton -> s
    com.aviary.android.feather.widget.AviaryButton editBottomButton -> t
    android.widget.EditText editTopText -> u
    android.widget.EditText editBottomText -> v
    android.view.inputmethod.InputMethodManager mInputManager -> w
    android.graphics.Canvas mCanvas -> x
    com.aviary.android.feather.widget.DrawableHighlightView topHv -> y
    com.aviary.android.feather.widget.DrawableHighlightView bottomHv -> z
    android.graphics.Typeface mTypeface -> A
    java.lang.String fontName -> B
    android.view.View clearButtonTop -> C
    android.view.View clearButtonBottom -> D
    int paddingTop -> E
    int paddingBottom -> F
    int mTextColor -> G
    int mTextStrokeColor -> H
    boolean mTextStrokeEnabled -> I
    android.os.Handler mInputHandler -> J
    android.os.ResultReceiver mInputReceiver -> K
    com.aviary.android.feather.effects.MemePanel$MyTextWatcher mEditTextWatcher -> L
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onActivate() -> x
    void onDeactivate() -> y
    void onDestroy() -> w
    android.view.View generateContentView(android.view.LayoutInflater) -> b
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    void onGenerateResult() -> D
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
    void flattenText(com.aviary.android.feather.widget.DrawableHighlightView,com.aviary.android.feather.library.filters.MemeFilter) -> a
    void createAndConfigurePreview() -> E
    void onClick(android.view.View) -> onClick
    void onTopClick(com.aviary.android.feather.widget.DrawableHighlightView) -> a
    float[] getMatrixValues(android.graphics.Matrix) -> a
    void onAddTopText() -> F
    void onAddBottomText() -> G
    void onFocusChange(com.aviary.android.feather.widget.DrawableHighlightView,com.aviary.android.feather.widget.DrawableHighlightView) -> a
    void endEditView(com.aviary.android.feather.widget.DrawableHighlightView) -> e
    void beginEditView(com.aviary.android.feather.widget.DrawableHighlightView) -> f
    void clearEditView(com.aviary.android.feather.widget.DrawableHighlightView) -> g
    void checkIsChanged() -> H
    boolean checkIsChanged(com.aviary.android.feather.widget.DrawableHighlightView) -> h
    void onDown(com.aviary.android.feather.widget.DrawableHighlightView) -> b
    void onMove(com.aviary.android.feather.widget.DrawableHighlightView) -> c
    void onClick(com.aviary.android.feather.widget.DrawableHighlightView) -> d
    void beginEditText(com.aviary.android.feather.widget.DrawableHighlightView) -> i
    void endEditText(com.aviary.android.feather.widget.DrawableHighlightView) -> j
    void createTypeFace() -> I
    void onLayoutChanged(boolean,int,int,int,int) -> a
    void setEnabled(boolean) -> a
    void access$1(com.aviary.android.feather.effects.MemePanel) -> a
com.aviary.android.feather.effects.MemePanel$1 -> com.aviary.android.feather.effects.bf:
    com.aviary.android.feather.effects.MemePanel this$0 -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.aviary.android.feather.effects.MemePanel$2 -> com.aviary.android.feather.effects.bg:
    com.aviary.android.feather.effects.MemePanel this$0 -> a
    void onDrawableChanged(android.graphics.drawable.Drawable) -> a
com.aviary.android.feather.effects.MemePanel$MyTextWatcher -> com.aviary.android.feather.effects.bh:
    com.aviary.android.feather.widget.DrawableHighlightView view -> b
    com.aviary.android.feather.effects.MemePanel this$0 -> c
com.aviary.android.feather.effects.NativeEffectRangePanel -> com.aviary.android.feather.effects.bi:
    com.aviary.android.feather.effects.NativeEffectRangePanel$ApplyFilterTask mCurrentTask -> a
    boolean mIsRendering -> b
    boolean enableFastPreview -> c
    com.aviary.android.feather.headless.moa.MoaActionList mActions -> s
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onActivate() -> x
    void onSliderStart(int) -> a
    void onSliderEnd(int) -> b
    void onSliderChanged(int,boolean) -> a
    void onDestroy() -> w
    void onDeactivate() -> y
    void onGenerateResult() -> D
    boolean onBackPressed() -> r
    void onCancelled() -> u
    boolean getIsChanged() -> v
    boolean killCurrentTask() -> a
    void applyFilter(float,boolean) -> a
    void setEnabled(boolean) -> a
com.aviary.android.feather.effects.NativeEffectRangePanel$ApplyFilterTask -> com.aviary.android.feather.effects.bj:
    com.aviary.android.feather.headless.moa.MoaResult mResult -> a
    boolean mShowProgress -> b
    com.aviary.android.feather.effects.NativeEffectRangePanel this$0 -> c
    void onPreExecute() -> onPreExecute
    void onCancelled() -> onCancelled
    android.graphics.Bitmap doInBackground(android.graphics.Bitmap[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.NativeEffectRangePanel$GenerateResultTask -> com.aviary.android.feather.effects.bk:
    android.app.ProgressDialog mProgress -> a
    com.aviary.android.feather.effects.NativeEffectRangePanel this$0 -> b
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.SimpleStatusMachine -> com.aviary.android.feather.effects.bl:
    int INVALID_STATUS -> a
    int currentStatus -> b
    int previousStatus -> c
    com.aviary.android.feather.effects.SimpleStatusMachine$OnStatusChangeListener mStatusListener -> d
    void setOnStatusChangeListener(com.aviary.android.feather.effects.SimpleStatusMachine$OnStatusChangeListener) -> a
    void setStatus(int) -> a
    int getCurrentStatus() -> a
com.aviary.android.feather.effects.SimpleStatusMachine$OnStatusChangeListener -> com.aviary.android.feather.effects.bm:
    void OnStatusChanged(int,int) -> a
    void OnStatusUpdated(int) -> a
com.aviary.android.feather.effects.SliderEffectPanel -> com.aviary.android.feather.effects.bn:
    com.aviary.android.feather.effects.SliderEffectPanel$SliderStyle mStyle -> a
    com.aviary.android.feather.widget.AviaryWheel mWheel -> t
    com.aviary.android.feather.widget.AviarySeekBar mSeekBar -> u
    java.lang.String mResourceName -> v
    android.view.View mButtonMinus -> w
    android.view.View mButtonPlus -> x
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onActivate() -> x
    void onDeactivate() -> y
    void onClick(android.view.View) -> onClick
    void decreaseValue() -> c
    void increaseValue() -> E
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    void onStartTrackingTouch(com.aviary.android.feather.widget.AviaryWheel) -> a
    void OnValueChanged(com.aviary.android.feather.widget.AviaryWheel,int) -> a
    void onStopTrackingTouch(com.aviary.android.feather.widget.AviaryWheel) -> b
    void onSliderStart(int) -> a
    void onSliderChanged(int,boolean) -> a
    void onSliderEnd(int) -> b
    void setEnabled(boolean) -> a
com.aviary.android.feather.effects.SliderEffectPanel$SliderStyle -> com.aviary.android.feather.effects.bo:
    com.aviary.android.feather.effects.SliderEffectPanel$SliderStyle SeekBarStyle -> a
    com.aviary.android.feather.effects.SliderEffectPanel$SliderStyle WheelStyle -> b
    com.aviary.android.feather.effects.SliderEffectPanel$SliderStyle[] ENUM$VALUES -> c
    com.aviary.android.feather.effects.SliderEffectPanel$SliderStyle[] values() -> values
    com.aviary.android.feather.effects.SliderEffectPanel$SliderStyle valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.effects.StickersPanel -> com.aviary.android.feather.effects.StickersPanel:
    int STATUS_NULL -> s
    com.aviary.android.feather.effects.SimpleStatusMachine mStatus -> t
    boolean mIsAnimating -> u
    it.sephiroth.android.library.widget.HorizontalVariableListView mListPacks -> v
    it.sephiroth.android.library.widget.HorizontalVariableListView mListStickers -> w
    android.widget.ViewFlipper mViewFlipper -> x
    boolean mExternalPacksEnabled -> y
    android.app.AlertDialog mUpdateDialog -> z
    com.aviary.android.feather.async_tasks.AsyncImageManager mImageManager -> A
    android.graphics.Canvas mCanvas -> B
    int mPackCellWidth -> C
    int mStickerCellWidth -> D
    java.util.List mInstalledPackages -> E
    com.aviary.android.feather.library.services.PluginService mPluginService -> F
    com.aviary.android.feather.library.services.ConfigService mConfigService -> G
    com.aviary.android.feather.library.services.PreferenceService mPreferenceService -> H
    com.aviary.android.feather.library.services.ImageCacheService mCacheService -> I
    com.aviary.android.feather.library.services.DragControllerService mDragControllerService -> J
    int mFeaturedCount -> K
    com.aviary.android.feather.widget.IAPDialog mIapDialog -> L
    com.aviary.android.feather.library.plugins.PluginFactory$IPlugin mPlugin -> M
    com.aviary.android.feather.headless.moa.MoaActionList mActionList -> N
    com.aviary.android.feather.library.filters.StickerFilter mCurrentFilter -> O
    int mPackThumbSize -> P
    int mStickerThumbSize -> Q
    boolean mFirstTimeRenderer -> R
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onActivate() -> x
    boolean onBackPressed() -> r
    boolean onCancel() -> t
    void onDeactivate() -> y
    void onDestroy() -> w
    void onDispose() -> b
    void onGenerateResult() -> D
    void onConfigurationChanged(android.content.res.Configuration,android.content.res.Configuration) -> a
    android.view.View generateContentView(android.view.LayoutInflater) -> b
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    void onLoadComplete(android.widget.ImageView,android.graphics.Bitmap,int) -> a
    void OnStatusChanged(int,int) -> a
    void OnStatusUpdated(int) -> a
    void onUpdate(com.aviary.android.feather.library.services.PluginService,android.os.Bundle) -> a
    boolean onItemClick(android.widget.AdapterView,android.view.View,int,long) -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    boolean startDrag(android.widget.AdapterView,android.view.View,int,long,boolean) -> a
    void setDragController(com.aviary.android.feather.library.services.DragControllerService) -> a
    com.aviary.android.feather.library.services.DragControllerService getDragController() -> E
    void onDropCompleted(android.view.View,boolean) -> a
    boolean onDragEnd() -> F
    void onDragStart(com.aviary.android.feather.library.services.DragControllerService$DragSource,java.lang.Object,int) -> a
    boolean acceptDrop(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> a
    void onDrop(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> b
    boolean validDelta(android.os.Bundle) -> a
    void askToLeaveWithoutApply() -> G
    void createAndConfigurePreview() -> J
    void updateInstalledPacks(boolean) -> d
    void showIAPDialog() -> H
    void createIAPDialog(com.aviary.android.feather.widget.IAPDialog$IAPUpdater) -> a
    boolean removeIAPDialog() -> K
    void loadStickers() -> I
    void addSticker(java.lang.String,android.graphics.RectF) -> a
    void addSticker(com.aviary.android.feather.library.graphics.drawable.FeatherDrawable,android.graphics.RectF) -> a
    void onApplyCurrent() -> L
    void onClearCurrent(boolean) -> e
    void onClearCurrent(com.aviary.android.feather.widget.DrawableHighlightView,boolean) -> a
    boolean stickersOnScreen() -> M
    void onStickersPackListUpdated(java.util.List,int,int,int) -> a
    void setEnabled(boolean) -> a
    com.aviary.android.feather.async_tasks.AsyncImageManager access$1(com.aviary.android.feather.effects.StickersPanel) -> a
    boolean access$2(com.aviary.android.feather.effects.StickersPanel) -> b
    com.aviary.android.feather.library.services.PluginService access$3(com.aviary.android.feather.effects.StickersPanel) -> c
    java.util.List access$4(com.aviary.android.feather.effects.StickersPanel) -> d
    int access$5(com.aviary.android.feather.effects.StickersPanel) -> e
    void access$6(com.aviary.android.feather.effects.StickersPanel,boolean) -> a
    void access$7(com.aviary.android.feather.effects.StickersPanel,java.util.List,int,int,int) -> a
    int access$8(com.aviary.android.feather.effects.StickersPanel) -> f
    int access$9(com.aviary.android.feather.effects.StickersPanel) -> g
    com.aviary.android.feather.library.services.ImageCacheService access$10(com.aviary.android.feather.effects.StickersPanel) -> h
    int access$11(com.aviary.android.feather.effects.StickersPanel) -> i
    com.aviary.android.feather.library.plugins.PluginFactory$IPlugin access$12(com.aviary.android.feather.effects.StickersPanel) -> j
    int access$13(com.aviary.android.feather.effects.StickersPanel) -> k
    it.sephiroth.android.library.widget.HorizontalVariableListView access$14(com.aviary.android.feather.effects.StickersPanel) -> l
    boolean access$15(com.aviary.android.feather.effects.StickersPanel,android.widget.AdapterView,android.view.View,int,long,boolean) -> a
    void access$16(com.aviary.android.feather.effects.StickersPanel,java.lang.String,android.graphics.RectF) -> a
    void access$17(com.aviary.android.feather.effects.StickersPanel) -> m
    com.aviary.android.feather.effects.SimpleStatusMachine access$18(com.aviary.android.feather.effects.StickersPanel) -> n
    void access$19(com.aviary.android.feather.effects.StickersPanel,boolean) -> b
    it.sephiroth.android.library.widget.HorizontalVariableListView access$20(com.aviary.android.feather.effects.StickersPanel) -> o
com.aviary.android.feather.effects.StickersPanel$1 -> com.aviary.android.feather.effects.bp:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.StickersPanel$10 -> com.aviary.android.feather.effects.bq:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.StickersPanel$2 -> com.aviary.android.feather.effects.br:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.StickersPanel$3 -> com.aviary.android.feather.effects.bs:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.StickersPanel$4 -> com.aviary.android.feather.effects.bt:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.StickersPanel$5 -> com.aviary.android.feather.effects.bu:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.StickersPanel$6 -> com.aviary.android.feather.effects.bv:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aviary.android.feather.effects.StickersPanel$7 -> com.aviary.android.feather.effects.bw:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onClose() -> a
com.aviary.android.feather.effects.StickersPanel$8 -> com.aviary.android.feather.effects.bx:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onDeleteClick() -> a
com.aviary.android.feather.effects.StickersPanel$9 -> com.aviary.android.feather.effects.StickersPanel$9:
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    int val$delta -> b
    void run() -> run
com.aviary.android.feather.effects.StickersPanel$ExternalThumbnailCallable -> com.aviary.android.feather.effects.by:
    java.lang.String mUri -> a
    android.graphics.drawable.BitmapDrawable mFolder -> b
    java.lang.ref.SoftReference cacheServiceRef -> c
    java.lang.ref.SoftReference resourcesRef -> d
    int mDefaultIconResId -> e
    android.graphics.Bitmap call() -> a
    java.lang.Object call() -> call
com.aviary.android.feather.effects.StickersPanel$LoadStickersRunner -> com.aviary.android.feather.effects.StickersPanel$LoadStickersRunner:
    java.lang.String[] mlist -> a
    com.aviary.android.feather.effects.StickersPanel this$0 -> b
    void run() -> run
    com.aviary.android.feather.effects.StickersPanel access$0(com.aviary.android.feather.effects.StickersPanel$LoadStickersRunner) -> a
com.aviary.android.feather.effects.StickersPanel$LoadStickersRunner$1 -> com.aviary.android.feather.effects.bz:
    com.aviary.android.feather.effects.StickersPanel$LoadStickersRunner this$1 -> a
    boolean onItemStartDrag(android.widget.AdapterView,android.view.View,int,long) -> a
com.aviary.android.feather.effects.StickersPanel$LoadStickersRunner$2 -> com.aviary.android.feather.effects.ca:
    com.aviary.android.feather.effects.StickersPanel$LoadStickersRunner this$1 -> a
    boolean onItemClick(android.widget.AdapterView,android.view.View,int,long) -> a
com.aviary.android.feather.effects.StickersPanel$PluginInstallTask -> com.aviary.android.feather.effects.cb:
    int mInstalledCount -> b
    int mExternalCount -> c
    int mFirstValidIndex -> d
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    void onPreExecute() -> onPreExecute
    java.util.List doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.util.List) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.effects.StickersPanel$StickerEffectPack -> com.aviary.android.feather.effects.cc:
    java.lang.CharSequence mPackageName -> a
    java.lang.CharSequence mTitle -> b
    int mPluginStatus -> c
    com.aviary.android.feather.library.plugins.PluginFactory$IPlugin mPluginRef -> d
    com.aviary.android.feather.effects.StickersPanel$StickerEffectPack$StickerEffectPackType mType -> e
    void finalize() -> finalize
com.aviary.android.feather.effects.StickersPanel$StickerEffectPack$StickerEffectPackType -> com.aviary.android.feather.effects.cd:
    com.aviary.android.feather.effects.StickersPanel$StickerEffectPack$StickerEffectPackType GET_MORE_FIRST -> a
    com.aviary.android.feather.effects.StickersPanel$StickerEffectPack$StickerEffectPackType GET_MORE_LAST -> b
    com.aviary.android.feather.effects.StickersPanel$StickerEffectPack$StickerEffectPackType EXTERNAL -> c
    com.aviary.android.feather.effects.StickersPanel$StickerEffectPack$StickerEffectPackType INTERNAL -> d
    com.aviary.android.feather.effects.StickersPanel$StickerEffectPack$StickerEffectPackType LEFT_DIVIDER -> e
    com.aviary.android.feather.effects.StickersPanel$StickerEffectPack$StickerEffectPackType RIGHT_DIVIDER -> f
    com.aviary.android.feather.effects.StickersPanel$StickerEffectPack$StickerEffectPackType[] ENUM$VALUES -> g
    com.aviary.android.feather.effects.StickersPanel$StickerEffectPack$StickerEffectPackType[] values() -> values
    com.aviary.android.feather.effects.StickersPanel$StickerEffectPack$StickerEffectPackType valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.effects.StickersPanel$StickerPackThumbnailCallable -> com.aviary.android.feather.effects.ce:
    com.aviary.android.feather.library.plugins.PluginFactory$InternalPlugin mPlugin -> a
    android.graphics.drawable.BitmapDrawable mFolder -> b
    android.graphics.Bitmap call() -> a
    java.lang.Object call() -> call
com.aviary.android.feather.effects.StickersPanel$StickerPacksAdapter -> com.aviary.android.feather.effects.cf:
    int mLayoutResId -> b
    int mExternalLayoutResId -> c
    int mMoreResId -> d
    android.view.LayoutInflater mLayoutInflater -> e
    android.graphics.drawable.BitmapDrawable mFolderIcon -> f
    android.graphics.drawable.BitmapDrawable mExternalFolderIcon -> g
    java.util.List mObjects -> h
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    int[] $SWITCH_TABLE$com$aviary$android$feather$effects$StickersPanel$StickerEffectPack$StickerEffectPackType -> i
    int getCount() -> getCount
    int getViewTypeCount() -> getViewTypeCount
    com.aviary.android.feather.effects.StickersPanel$StickerEffectPack getItem(int) -> a
    long getItemId(int) -> getItemId
    boolean hasStableIds() -> hasStableIds
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
    int[] $SWITCH_TABLE$com$aviary$android$feather$effects$StickersPanel$StickerEffectPack$StickerEffectPackType() -> a
com.aviary.android.feather.effects.StickersPanel$StickerThumbnailCallable -> com.aviary.android.feather.effects.cg:
    com.aviary.android.feather.library.plugins.PluginFactory$InternalPlugin mPlugin -> a
    int mFinalSize -> b
    java.lang.String mUrl -> c
    android.graphics.Bitmap call() -> a
    java.lang.Object call() -> call
com.aviary.android.feather.effects.StickersPanel$StickersAdapter -> com.aviary.android.feather.effects.ch:
    android.view.LayoutInflater mLayoutInflater -> b
    int mStickerResourceId -> c
    com.aviary.android.feather.effects.StickersPanel this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.TextPanel -> com.aviary.android.feather.effects.ci:
    int[] mColors -> s
    int mColor -> t
    com.aviary.android.feather.widget.AviaryGallery mGallery -> u
    int mSelectedPosition -> v
    int mDefaultTextSize -> w
    android.graphics.Canvas mCanvas -> x
    android.widget.EditText mEditText -> y
    com.aviary.android.feather.library.services.ConfigService config -> z
    com.aviary.android.feather.effects.TextPanel$MyTextWatcher mEditTextWatcher -> A
    void beginEdit(com.aviary.android.feather.widget.DrawableHighlightView) -> a
    void createAndConfigurePreview() -> E
    void endEdit(com.aviary.android.feather.widget.DrawableHighlightView) -> e
    android.view.View generateContentView(android.view.LayoutInflater) -> b
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    boolean getIsChanged() -> v
    void onAddNewText() -> F
    com.aviary.android.feather.headless.moa.MoaActionList onApplyCurrent() -> G
    com.aviary.android.feather.headless.moa.MoaActionList onApplyCurrent(com.aviary.android.feather.widget.DrawableHighlightView) -> f
    void onClearCurrent(com.aviary.android.feather.widget.DrawableHighlightView) -> g
    void onClick(com.aviary.android.feather.widget.DrawableHighlightView) -> d
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onActivate() -> x
    void onDeactivate() -> y
    void onDestroy() -> w
    void onScrollStarted(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> b
    void onScroll(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> c
    void onScrollFinished(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> d
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    void onDown(com.aviary.android.feather.widget.DrawableHighlightView) -> b
    void onFocusChange(com.aviary.android.feather.widget.DrawableHighlightView,com.aviary.android.feather.widget.DrawableHighlightView) -> a
    void onGenerateResult() -> D
    void onMove(com.aviary.android.feather.widget.DrawableHighlightView) -> c
    void updateCurrentHighlightColor() -> H
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
    void setEnabled(boolean) -> a
    com.aviary.android.feather.widget.AviaryGallery access$1(com.aviary.android.feather.effects.TextPanel) -> a
    int access$2(com.aviary.android.feather.effects.TextPanel) -> b
    void access$3(com.aviary.android.feather.effects.TextPanel) -> c
com.aviary.android.feather.effects.TextPanel$1 -> com.aviary.android.feather.effects.cj:
    com.aviary.android.feather.effects.TextPanel this$0 -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.aviary.android.feather.effects.TextPanel$2 -> com.aviary.android.feather.effects.TextPanel$2:
    com.aviary.android.feather.effects.TextPanel this$0 -> a
    void run() -> run
com.aviary.android.feather.effects.TextPanel$GalleryAdapter -> com.aviary.android.feather.effects.ck:
    int VALID_POSITION -> d
    int INVALID_POSITION -> e
    int[] sizes -> f
    android.view.LayoutInflater mLayoutInflater -> a
    android.content.res.Resources mRes -> b
    com.aviary.android.feather.effects.TextPanel this$0 -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.effects.TextPanel$MyTextWatcher -> com.aviary.android.feather.effects.cl:
    com.aviary.android.feather.widget.DrawableHighlightView view -> b
    com.aviary.android.feather.effects.TextPanel this$0 -> c
com.aviary.android.feather.effects.TiltShiftPanel -> com.aviary.android.feather.effects.TiltShiftPanel:
    com.aviary.android.feather.effects.TiltShiftPanel$BackgroundDrawThread mBackgroundDrawThread -> v
    com.aviary.android.feather.library.filters.TiltShiftFilter mFilter -> w
    com.aviary.android.feather.widget.AviaryHighlightImageButton mCircleButton -> x
    com.aviary.android.feather.widget.AviaryHighlightImageButton mRectButton -> y
    float BRUSH_MULTIPLIER -> s
    com.aviary.android.feather.headless.moa.MoaActionList mActions -> t
    com.aviary.android.feather.headless.filters.NativeToolFilter$TiltShiftMode mTiltShiftMode -> u
    void onCreate(android.graphics.Bitmap,android.os.Bundle) -> a
    void onActivate() -> x
    void onDispose() -> b
    void onCheckedChanged(com.aviary.android.feather.widget.AviaryHighlightImageButton,boolean,boolean) -> a
    void onDeactivate() -> y
    void onDestroy() -> w
    void onCancelled() -> u
    void onDrawStart(float[],com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode,float,float,float,float,float,float) -> a
    void onDrawing(float[],float,float,float,float,float,float) -> a
    void onDrawEnd() -> E
    void onDrawableChanged(android.graphics.drawable.Drawable) -> a
    void onGenerateResult() -> D
    void onComplete(android.graphics.Bitmap,com.aviary.android.feather.headless.moa.MoaActionList) -> a
    com.aviary.android.feather.library.filters.TiltShiftFilter createFilter() -> F
    android.view.View generateContentView(android.view.LayoutInflater) -> b
    android.view.ViewGroup generateOptionView(android.view.LayoutInflater,android.view.ViewGroup) -> b
    void setEnabled(boolean) -> a
    com.aviary.android.feather.library.filters.TiltShiftFilter access$1(com.aviary.android.feather.effects.TiltShiftPanel) -> a
    com.aviary.android.feather.effects.TiltShiftPanel$BackgroundDrawThread access$2(com.aviary.android.feather.effects.TiltShiftPanel) -> b
    com.aviary.android.feather.widget.AviaryHighlightImageButton access$3(com.aviary.android.feather.effects.TiltShiftPanel) -> c
    com.aviary.android.feather.widget.AviaryHighlightImageButton access$4(com.aviary.android.feather.effects.TiltShiftPanel) -> d
com.aviary.android.feather.effects.TiltShiftPanel$1 -> com.aviary.android.feather.effects.TiltShiftPanel$1:
    com.aviary.android.feather.effects.TiltShiftPanel this$0 -> a
    void run() -> run
com.aviary.android.feather.effects.TiltShiftPanel$BackgroundDrawThread -> com.aviary.android.feather.effects.TiltShiftPanel$BackgroundDrawThread:
    boolean started -> a
    boolean running -> b
    java.util.Queue mQueue -> c
    com.aviary.android.feather.effects.TiltShiftPanel$DrawQueue mCurrentQueue -> d
    com.aviary.android.feather.effects.TiltShiftPanel this$0 -> e
    void init() -> a
    void start() -> start
    void quit() -> b
    void drawStart(float[],com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode,float,float,float,float,float,float) -> a
    void draw(float[],float,float,float,float,float,float) -> a
    void pathEnd() -> c
    boolean isCompleted() -> d
    int getQueueSize() -> e
    void clear() -> f
    void finish() -> g
    void run() -> run
com.aviary.android.feather.effects.TiltShiftPanel$DrawQueue -> com.aviary.android.feather.effects.cm:
    com.aviary.android.feather.headless.filters.NativeToolFilter$TiltShiftMode mode_ -> a
    boolean completed_ -> b
    void end() -> a
    boolean isCompleted() -> b
    com.aviary.android.feather.headless.filters.NativeToolFilter$TiltShiftMode access$0(com.aviary.android.feather.effects.TiltShiftPanel$DrawQueue) -> a
com.aviary.android.feather.effects.TiltShiftPanel$GenerateResultTask -> com.aviary.android.feather.effects.cn:
    android.app.ProgressDialog mProgress -> a
    com.aviary.android.feather.effects.TiltShiftPanel this$0 -> b
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.graphics.GalleryTopIndicatorDrawable -> com.aviary.android.feather.a.a:
    int mShadowColor -> a
    int mFillColor -> b
    int mStrokeColor1 -> c
    int mStrokeColor2 -> d
    float mIndicatorSize -> e
    int mStrokeWidth -> f
    int mShadowDy -> g
    int mDirection -> h
    int mOffsetY -> i
    int mMinHeight -> j
    android.graphics.Matrix mMatrix -> k
    android.graphics.Rect destRect -> l
    android.graphics.Paint paint -> m
    int getMinimumHeight() -> getMinimumHeight
    int getIntrinsicHeight() -> getIntrinsicHeight
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
com.aviary.android.feather.graphics.GlowBitmapDrawable -> com.aviary.android.feather.a.b:
    android.graphics.Rect mDstRect -> e
    android.graphics.Bitmap mPressedBitmap -> f
    android.graphics.Bitmap mCheckedBitmap -> g
    android.graphics.Bitmap mSelectedBitmap -> h
    android.graphics.Bitmap mCurrent -> i
    boolean mPressed -> j
    boolean mChecked -> k
    boolean mSelected -> l
    int mHighlightColorPressed -> m
    int mHighlightColorChecked -> n
    int mHighlightColorSelected -> o
    int mBlurValue -> p
    int mGlowMode -> q
    int mHighlightMode -> r
    void init(int,int,int,int,int,int) -> b
    void setBitmap(android.graphics.Bitmap) -> a
    void recycleBitmaps() -> c
    void updateConfig(int,int,int,int,int,int) -> a
    android.graphics.Bitmap generateBlurBitmap(android.graphics.Bitmap,int,int,android.graphics.PorterDuff$Mode,boolean,android.graphics.Paint) -> a
    boolean isStateful() -> isStateful
    void draw(android.graphics.Canvas) -> draw
    boolean onStateChange(int[]) -> onStateChange
com.aviary.android.feather.graphics.PluginDividerDrawable -> com.aviary.android.feather.a.c:
    float mTextSize -> a
    int mStrokeWidth -> b
    int mStrokeColor -> c
    int mFillColor -> d
    float mTextDivider -> e
    android.graphics.Paint$FontMetrics mMetrics -> f
    java.lang.String mLabel -> g
    android.graphics.Paint mTextPaint -> h
    android.graphics.Paint mTextStrokePaint -> i
    android.graphics.Rect mBounds -> j
    int mWidth -> k
    int mHeight -> l
    int mTextY -> m
    int mMaxHeight -> n
    void setTitle(java.lang.String) -> a
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void clearColorFilter() -> clearColorFilter
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getMinimumHeight() -> getMinimumHeight
    int getMinimumWidth() -> getMinimumWidth
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void onTextBoundsChanged() -> a
    void draw(android.graphics.Canvas) -> draw
com.aviary.android.feather.graphics.PreviewFillColorDrawable -> com.aviary.android.feather.a.d:
    int mStrokeWidth -> a
    int mStrokeColor -> b
    android.graphics.Paint mPaint -> c
    float mRadius -> d
    android.graphics.Rect mDstRect -> e
    android.graphics.Matrix mGradientMatrix -> f
    boolean mRadiusFixed -> g
    android.graphics.LinearGradient mGradient -> h
    int mColor -> i
    int mLightenColor -> j
    boolean mChecked -> k
    boolean mPressed -> l
    void setColor(int) -> a
    void setFixedRadius(float) -> a
    void draw(android.graphics.Canvas) -> draw
    boolean isStateful() -> isStateful
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    boolean onStateChange(int[]) -> onStateChange
com.aviary.android.feather.graphics.PreviewSpotDrawable -> com.aviary.android.feather.a.e:
    int mStrokeWidth -> a
    int mStrokeWidthOuter -> b
    int mGlowColor -> c
    int mStrokeColor -> d
    int mBackgroundColorUnselected -> e
    int mBackgroundColorSelected -> f
    android.graphics.Paint mPaint -> g
    float mRadius -> h
    android.graphics.Rect mDstRect -> i
    android.graphics.LinearGradient mGradientShaderUnselected -> j
    android.graphics.LinearGradient mGradientShaderSelected -> k
    android.graphics.BlurMaskFilter mGlowBlurMaskFilter -> l
    android.graphics.Matrix mGradientMatrix -> m
    boolean mRadiusFixed -> n
    android.graphics.LinearGradient mGradient -> o
    boolean mChecked -> p
    boolean mPressed -> q
    android.graphics.Xfermode mPorterDuffSrcInMode -> r
    void setRadius(float) -> a
    void setFixedRadius(float) -> b
    void draw(android.graphics.Canvas) -> draw
    boolean isStateful() -> isStateful
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    boolean onStateChange(int[]) -> onStateChange
com.aviary.android.feather.headless.AviaryEffect -> com.aviary.android.feather.headless.AviaryEffect:
com.aviary.android.feather.headless.AviaryInitializationException -> com.aviary.android.feather.headless.a:
    com.aviary.android.feather.headless.AviaryInitializationException fromInt(int) -> a
com.aviary.android.feather.headless.AviaryInitializationException$AviaryInvalidApiKeyException -> com.aviary.android.feather.headless.b:
com.aviary.android.feather.headless.AviaryInitializationException$AviaryInvalidContextException -> com.aviary.android.feather.headless.c:
com.aviary.android.feather.headless.filters.IFilter -> com.aviary.android.feather.headless.filters.IFilter:
com.aviary.android.feather.headless.filters.INativeFilter -> com.aviary.android.feather.headless.filters.INativeFilter:
    com.aviary.android.feather.headless.moa.MoaActionList getActions() -> a
    com.aviary.android.feather.headless.moa.MoaResult prepare(android.graphics.Bitmap,android.graphics.Bitmap,int,int) -> a
com.aviary.android.feather.headless.filters.INativeRangeFilter -> com.aviary.android.feather.headless.filters.INativeRangeFilter:
    void setValue(java.lang.Float) -> a
com.aviary.android.feather.headless.filters.NativeFilter -> com.aviary.android.feather.headless.filters.NativeFilter:
    com.aviary.android.feather.headless.moa.MoaActionList mActions -> a
    com.aviary.android.feather.headless.moa.MoaResult mResult -> b
    com.aviary.android.feather.headless.moa.MoaActionList getActions() -> a
    void executeInPlace(android.graphics.Bitmap) -> a
    android.graphics.Bitmap execute(android.graphics.Bitmap,android.graphics.Bitmap,int,int) -> b
    com.aviary.android.feather.headless.moa.MoaResult prepare(android.graphics.Bitmap,android.graphics.Bitmap,int,int) -> a
    boolean stop() -> b
    void setPreviewSize(int,int) -> a
com.aviary.android.feather.headless.filters.NativeFilterProxy -> com.aviary.android.feather.headless.filters.NativeFilterProxy:
    boolean mInitialized -> a
    void init(android.content.Context,java.lang.String) -> a
    com.aviary.android.feather.headless.moa.MoaResult prepareActions(com.aviary.android.feather.headless.moa.MoaActionList,android.graphics.Bitmap) -> a
    com.aviary.android.feather.headless.moa.MoaResult prepareActions(com.aviary.android.feather.headless.moa.MoaActionList,android.graphics.Bitmap,android.graphics.Bitmap,int,int) -> a
com.aviary.android.feather.headless.filters.NativeRangeFilter -> com.aviary.android.feather.headless.filters.NativeRangeFilter:
    java.lang.String mKey -> c
    com.aviary.android.feather.headless.moa.MoaFloatParameter defaultParam -> d
    void setValue(java.lang.Float) -> a
com.aviary.android.feather.headless.filters.NativeToolFilter -> com.aviary.android.feather.headless.filters.NativeToolFilter:
    long n_ptr -> c
    android.graphics.Rect mBitmapRect -> d
    com.aviary.android.feather.headless.filters.NativeToolFilter$NativeToolType mType -> e
    com.aviary.android.feather.headless.moa.MoaAction mFirstAction -> f
    long nativeCtor(java.lang.String) -> nativeCtor
    int nativeSetTiltShiftMode(long,java.lang.String) -> nativeSetTiltShiftMode
    int nativeSetColorSplashMode(long,java.lang.String) -> nativeSetColorSplashMode
    int nativeInit(long,android.graphics.Bitmap,android.graphics.Bitmap) -> nativeInit
    int nativeDrawStart(long,float,float,float,float) -> nativeDrawStart
    int nativeColorSplash_Draw(long,float,float) -> nativeColorSplash_Draw
    int nativeTiltShift_Draw(long,float,float,float,float) -> nativeTiltShift_Draw
    int nativeRenderPreview(long,int,int,int,int) -> nativeRenderPreview
    void nativeDispose(long) -> nativeDispose
    boolean valid() -> c
    int init(android.graphics.Bitmap,android.graphics.Bitmap) -> a
    boolean renderPreview(int,int,int,int) -> a
    boolean renderPreview() -> d
    boolean renderPreview(android.graphics.Rect) -> a
    boolean renderPreview(android.graphics.RectF) -> a
    boolean drawStart(float,float,float,float) -> a
    boolean colorsplash_draw(float,float) -> a
    boolean tiltshift_draw(float,float,float,float) -> b
    boolean setTiltShiftMode(com.aviary.android.feather.headless.filters.NativeToolFilter$TiltShiftMode) -> a
    boolean setColorSplashMode(com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode) -> a
    void dispose() -> e
    void finalize() -> finalize
com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode -> com.aviary.android.feather.headless.filters.a:
    com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode None -> a
    com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode Smart -> b
    com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode Free -> c
    com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode Erase -> d
    com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode[] ENUM$VALUES -> e
    com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode[] values() -> values
    com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.headless.filters.NativeToolFilter$NativeToolType -> com.aviary.android.feather.headless.filters.b:
    com.aviary.android.feather.headless.filters.NativeToolFilter$NativeToolType ColorSplash -> a
    com.aviary.android.feather.headless.filters.NativeToolFilter$NativeToolType TiltShift -> b
    com.aviary.android.feather.headless.filters.NativeToolFilter$NativeToolType None -> c
    com.aviary.android.feather.headless.filters.NativeToolFilter$NativeToolType[] ENUM$VALUES -> d
    com.aviary.android.feather.headless.filters.NativeToolFilter$NativeToolType[] values() -> values
    com.aviary.android.feather.headless.filters.NativeToolFilter$NativeToolType valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.headless.filters.NativeToolFilter$TiltShiftMode -> com.aviary.android.feather.headless.filters.c:
    com.aviary.android.feather.headless.filters.NativeToolFilter$TiltShiftMode Radial -> a
    com.aviary.android.feather.headless.filters.NativeToolFilter$TiltShiftMode Linear -> b
    com.aviary.android.feather.headless.filters.NativeToolFilter$TiltShiftMode None -> c
    com.aviary.android.feather.headless.filters.NativeToolFilter$TiltShiftMode[] ENUM$VALUES -> d
    com.aviary.android.feather.headless.filters.NativeToolFilter$TiltShiftMode[] values() -> values
    com.aviary.android.feather.headless.filters.NativeToolFilter$TiltShiftMode valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.headless.filters.impl.CropFilter -> com.aviary.android.feather.headless.filters.impl.CropFilter:
    void setTopLeft(com.aviary.android.feather.headless.moa.MoaPointParameter) -> a
    void setSize(com.aviary.android.feather.headless.moa.MoaPointParameter) -> b
    void setPreviewSize(com.aviary.android.feather.headless.moa.MoaPointParameter) -> c
com.aviary.android.feather.headless.filters.impl.EffectFilter -> com.aviary.android.feather.headless.filters.impl.EffectFilter:
    void setEffectName(java.lang.CharSequence) -> a
    void setMoaLiteEffectContent(java.lang.String) -> a
com.aviary.android.feather.headless.gl.GLUtils -> com.aviary.android.feather.headless.gl.GLUtils:
    int mGlEsVersion -> a
    int getGlEsVersion(android.content.Context) -> a
    boolean getGlEsEnabled(android.content.Context) -> b
    boolean n_getOpenGLEnabled() -> n_getOpenGLEnabled
com.aviary.android.feather.headless.media.ExifInterfaceWrapper -> com.aviary.android.feather.headless.media.ExifInterfaceWrapper:
    java.text.SimpleDateFormat sFormatter -> a
    java.text.SimpleDateFormat sGpsDateFormatter -> b
    java.text.SimpleDateFormat sGpsTimeFormatter -> c
    java.lang.String mFilename -> d
    java.util.HashMap mAttributes -> e
    boolean mHasThumbnail -> f
    java.lang.Object sLock -> g
    java.lang.String toString() -> toString
    java.lang.String getAttribute(java.lang.String) -> a
    int getAttributeInt(java.lang.String,int) -> a
    void setAttribute(java.lang.String,java.lang.String) -> a
    void copyTo(android.os.Bundle) -> a
    void copyFrom(android.os.Bundle) -> b
    int getOrientation() -> a
    void loadAttributes() -> d
    void saveAttributes() -> b
    boolean hasThumbnail() -> c
    boolean appendThumbnailNative(java.lang.String,java.lang.String) -> appendThumbnailNative
    void saveAttributesNative(java.lang.String,java.lang.String) -> saveAttributesNative
    java.lang.String getAttributesNative(java.lang.String) -> getAttributesNative
    void commitChangesNative(java.lang.String) -> commitChangesNative
    byte[] getThumbnailNative(java.lang.String) -> getThumbnailNative
com.aviary.android.feather.headless.moa.JSONWriter -> com.aviary.android.feather.headless.moa.a:
    java.lang.String encode(com.aviary.android.feather.headless.moa.MoaActionList,com.aviary.android.feather.headless.moa.MoaMetadata) -> a
    void encodeCollection(org.json.JSONArray,java.util.Collection) -> a
com.aviary.android.feather.headless.moa.Moa -> com.aviary.android.feather.headless.moa.Moa:
    java.lang.Object mLock -> a
    int n_init(android.content.Context,java.lang.String,java.lang.String,java.lang.String,int) -> n_init
    void n_setid(java.lang.String) -> n_setid
    void n_applyActions(com.aviary.android.feather.headless.moa.MoaResult) -> n_applyActions
    java.lang.String[] n_getActions() -> n_getActions
    java.lang.String[] n_getEffects() -> n_getEffects
    int n_getVersion() -> n_getVersion
    boolean n_cpuIsArmv7() -> n_cpuIsArmv7
    int n_getCpuFamily() -> n_getCpuFamily
    int n_getCpuBuild() -> n_getCpuBuild
    void n_notifyPixelsChanged(android.graphics.Bitmap) -> n_notifyPixelsChanged
    java.lang.String n_getProclistVersion() -> n_getProclistVersion
    boolean n_enterpriseVersion() -> n_enterpriseVersion
    boolean n_premiumVersion() -> n_premiumVersion
    void notifyPixelsChanged(android.graphics.Bitmap) -> a
    void init(android.content.Context,java.lang.String,java.lang.String,java.lang.String,int) -> a
    int getVersion() -> a
    java.lang.String getProclistVersion() -> b
    boolean getEnterpriseVersion() -> c
    void applyActions(com.aviary.android.feather.headless.moa.MoaResult) -> a
    com.aviary.android.feather.headless.moa.Moa$CPUArchAbi getCpuBuild() -> d
com.aviary.android.feather.headless.moa.Moa$CPUArchAbi -> com.aviary.android.feather.headless.moa.b:
    com.aviary.android.feather.headless.moa.Moa$CPUArchAbi CPU_TYPE_NONE -> a
    com.aviary.android.feather.headless.moa.Moa$CPUArchAbi CPU_TYPE_X86 -> b
    com.aviary.android.feather.headless.moa.Moa$CPUArchAbi CPU_TYPE_ARM5 -> c
    com.aviary.android.feather.headless.moa.Moa$CPUArchAbi CPU_TYPE_ARM7 -> d
    com.aviary.android.feather.headless.moa.Moa$CPUArchAbi[] ENUM$VALUES -> e
    com.aviary.android.feather.headless.moa.Moa$CPUArchAbi parseInt(int) -> a
    com.aviary.android.feather.headless.moa.Moa$CPUArchAbi[] values() -> values
    com.aviary.android.feather.headless.moa.Moa$CPUArchAbi valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.headless.moa.MoaAction -> com.aviary.android.feather.headless.moa.c:
    java.util.HashMap mOptions -> d
    java.lang.String name -> a
    java.lang.String description -> b
    org.json.JSONArray jsonParameters -> c
    java.lang.Object clone() -> clone
    void addParam(java.lang.String,java.lang.Object) -> a
    void setValue(java.lang.String,com.aviary.android.feather.headless.moa.MoaParameter) -> a
    void setValue(java.lang.String,java.util.Collection) -> a
    void setValue(java.lang.String,java.lang.String) -> a
    void setValue(java.lang.String,java.lang.CharSequence) -> a
    void setValue(java.lang.String,int) -> a
    void setValue(java.lang.String,float) -> a
    void setValue(java.lang.String,double) -> a
    void setValue(java.lang.String,boolean) -> a
    java.util.Set entrySet() -> a
    java.lang.String getName() -> b
com.aviary.android.feather.headless.moa.MoaActionFactory -> com.aviary.android.feather.headless.moa.d:
    com.aviary.android.feather.headless.moa.MoaActionList actionList() -> a
    com.aviary.android.feather.headless.moa.MoaActionList actionList(java.lang.String[]) -> a
    com.aviary.android.feather.headless.moa.MoaAction action(java.lang.String) -> a
    com.aviary.android.feather.headless.moa.MoaMetadata metadata() -> b
com.aviary.android.feather.headless.moa.MoaActionList -> com.aviary.android.feather.headless.moa.e:
    java.util.List actions -> a
    java.lang.Object clone() -> clone
    void clear() -> clear
    int size() -> size
    boolean add(com.aviary.android.feather.headless.moa.MoaAction) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    void add(int,com.aviary.android.feather.headless.moa.MoaAction) -> a
    boolean addAll(int,java.util.Collection) -> addAll
    com.aviary.android.feather.headless.moa.MoaAction get(int) -> a
    com.aviary.android.feather.headless.moa.MoaAction get(java.lang.String) -> a
    int indexOf(java.lang.Object) -> indexOf
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    com.aviary.android.feather.headless.moa.MoaAction remove(int) -> b
    com.aviary.android.feather.headless.moa.MoaAction set(int,com.aviary.android.feather.headless.moa.MoaAction) -> b
    java.util.List subList(int,int) -> subList
    java.lang.Object get(int) -> get
    void add(int,java.lang.Object) -> add
    boolean add(java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
com.aviary.android.feather.headless.moa.MoaColorParameter -> com.aviary.android.feather.headless.moa.f:
    java.lang.Object encode() -> a
    java.lang.Object clone() -> clone
com.aviary.android.feather.headless.moa.MoaFloatParameter -> com.aviary.android.feather.headless.moa.g:
    java.lang.Object encode() -> a
    java.lang.Object clone() -> clone
com.aviary.android.feather.headless.moa.MoaGraphicsCommandParameter -> com.aviary.android.feather.headless.moa.h:
    int commandType -> c
    java.text.DecimalFormatSymbols symbols -> a
    java.text.DecimalFormat formatter -> b
    void init(int) -> a
    void setPoint(float,float) -> a
    void setPoint(float,float,float,float) -> a
    java.lang.Object encode() -> a
    java.lang.Object clone() -> clone
com.aviary.android.feather.headless.moa.MoaGraphicsOperationParameter -> com.aviary.android.feather.headless.moa.i:
    java.lang.Object mLock -> a
    int mBlurSize -> b
    int mColor -> c
    int mErase -> d
    float mRadius -> e
    java.util.List mCommands -> f
    void addCommand(com.aviary.android.feather.headless.moa.MoaGraphicsCommandParameter) -> a
    java.lang.Object encode() -> a
    java.lang.Object clone() -> clone
com.aviary.android.feather.headless.moa.MoaHD -> com.aviary.android.feather.headless.moa.MoaHD:
    long m_ptr -> a
    boolean disposed -> b
    int m_width(long) -> m_width
    int m_height(long) -> m_height
    long m_nativeCtor() -> m_nativeCtor
    int m_nativeLoad(long,java.lang.String) -> m_nativeLoad
    int m_nativeLoad(long,int) -> m_nativeLoad
    int m_nativeLoad(long,java.io.FileDescriptor) -> m_nativeLoad
    int m_nativeLoad(long,java.io.InputStream,byte[]) -> m_nativeLoad
    boolean m_nativeIsValid(long) -> m_nativeIsValid
    boolean m_nativeIsLoaded(long) -> m_nativeIsLoaded
    int m_nativeUnload(long) -> m_nativeUnload
    void m_nativeDispose(long) -> m_nativeDispose
    void m_nativeApplyActions(long,java.lang.String) -> m_nativeApplyActions
    int m_nativeSave(long,java.lang.String) -> m_nativeSave
    int m_nativeSaveWithQualityAndConfig(long,java.lang.String,int,int) -> m_nativeSaveWithQualityAndConfig
    int m_getMaxBitmapSize(long) -> m_getMaxBitmapSize
    void m_setMaxMegaPixels(long,int) -> m_setMaxMegaPixels
com.aviary.android.feather.headless.moa.MoaMetadata -> com.aviary.android.feather.headless.moa.j:
    int[] imagesize -> a
    int[] cellsize -> b
    int[] grid -> c
    int inplace -> d
    void setImageSize(int,int) -> a
    void setTransformInputBitmap(boolean) -> a
    int cellWidth() -> a
    int cellHeight() -> b
    int cols() -> c
    int rows() -> d
    org.json.JSONObject encode() -> e
com.aviary.android.feather.headless.moa.MoaParameter -> com.aviary.android.feather.headless.moa.k:
    java.lang.String type -> g
    java.lang.Object value -> h
    java.lang.Object encode() -> a
    java.lang.Object clone() -> clone
    java.lang.Object getValue() -> b
    void setValue(java.lang.Object) -> a
com.aviary.android.feather.headless.moa.MoaPointParameter -> com.aviary.android.feather.headless.moa.l:
    void init() -> c
    void setValue(float,float) -> a
    void setValue(double,double) -> a
    java.lang.Object encode() -> a
    java.lang.Object clone() -> clone
com.aviary.android.feather.headless.moa.MoaResult -> com.aviary.android.feather.headless.moa.MoaResult:
    java.lang.String inputString -> inputString
    android.graphics.Bitmap inputBitmap -> inputBitmap
    java.lang.String outputString -> outputString
    android.graphics.Bitmap outputBitmap -> outputBitmap
    int active -> active
    void execute() -> execute
    void cancel() -> cancel
com.aviary.android.feather.headless.moa.MoaStrokeParameter -> com.aviary.android.feather.headless.moa.m:
    java.lang.Object mLock -> a
    java.util.List mList -> b
    double radius -> c
    com.aviary.android.feather.headless.filters.NativeToolFilter$ColorSplashBrushMode brushmode -> d
    void addPoint(com.aviary.android.feather.headless.moa.MoaPointParameter) -> a
    void addPoint(float,float) -> a
    void addPoint(float[]) -> a
    java.lang.Object encode() -> a
    java.lang.Object clone() -> clone
com.aviary.android.feather.headless.moa.moalite.MoaLitePack -> com.aviary.android.feather.headless.moa.a.a:
    int packVersionCode -> a
    java.lang.String packType -> b
    java.lang.String identifier -> c
    java.lang.String codename -> d
    java.lang.String displayName -> e
    java.lang.String minVersion -> f
    java.util.List items -> g
    boolean valid() -> a
    void addItem(com.aviary.android.feather.headless.moa.moalite.MoaLitePack$MoaLiteItem) -> a
    void setIdentifier(java.lang.String) -> a
    void setCodename(java.lang.String) -> b
    void setDisplayName(java.lang.String) -> c
    void setMinVersion(java.lang.String) -> d
    void setPackType(java.lang.String) -> e
    void setPackVersionCode(int) -> a
    int getCount() -> b
    com.aviary.android.feather.headless.moa.moalite.MoaLitePack$MoaLiteItem getItemAt(int) -> b
    int getPackVersionCode() -> c
    java.lang.String getPackType() -> d
    int getPackTypeInt() -> e
    java.lang.String getIdentifier() -> f
    java.lang.String getCodename() -> g
    java.lang.String getDisplayName() -> h
    java.lang.String getMinVersion() -> i
    com.aviary.android.feather.headless.moa.moalite.MoaLiteProclistVersion getProclistVersion() -> j
    java.lang.String toString() -> toString
com.aviary.android.feather.headless.moa.moalite.MoaLitePack$MoaLiteItem -> com.aviary.android.feather.headless.moa.a.b:
    java.lang.String displayName -> a
    java.lang.String ref -> b
    java.lang.String getDisplayName() -> a
    java.lang.String getRef() -> b
    void setDisplayName(java.lang.String) -> a
    void setRef(java.lang.String) -> b
    boolean loadContentFromZip(java.io.InputStream,java.io.OutputStream) -> a
    boolean loadContent(java.io.File,java.io.OutputStream) -> a
    boolean loadContent(java.io.InputStream,java.io.OutputStream) -> b
com.aviary.android.feather.headless.moa.moalite.MoaLiteParserDefault -> com.aviary.android.feather.headless.moa.a.c:
    com.aviary.android.feather.headless.moa.moalite.MoaLitePack parseStream(java.io.InputStream) -> a
com.aviary.android.feather.headless.moa.moalite.MoaLiteParserFactory -> com.aviary.android.feather.headless.moa.a.d:
    com.aviary.android.feather.headless.moa.moalite.MoaLiteParserFactory$MoaLiteParser create() -> a
com.aviary.android.feather.headless.moa.moalite.MoaLiteParserFactory$MoaLiteParser -> com.aviary.android.feather.headless.moa.a.e:
    com.aviary.android.feather.headless.moa.moalite.MoaLitePack parseStream(java.io.InputStream) -> a
    com.aviary.android.feather.headless.moa.moalite.MoaLitePack parseZip(java.io.InputStream) -> b
com.aviary.android.feather.headless.moa.moalite.MoaLiteParserNew -> com.aviary.android.feather.headless.moa.a.f:
    com.aviary.android.feather.headless.moa.moalite.MoaLitePack parseStream(java.io.InputStream) -> a
com.aviary.android.feather.headless.moa.moalite.MoaLiteProclistVersion -> com.aviary.android.feather.headless.moa.a.g:
    java.util.regex.Pattern pattern -> a
    int major -> b
    int minor -> c
    int patch -> d
    java.lang.String toString() -> toString
    boolean supports(com.aviary.android.feather.headless.moa.moalite.MoaLiteProclistVersion) -> a
    com.aviary.android.feather.headless.moa.moalite.MoaLiteProclistVersion fromString(java.lang.String) -> a
com.aviary.android.feather.headless.utils.CameraUtils -> com.aviary.android.feather.headless.utils.CameraUtils:
    int n_getMaximumMp() -> n_getMaximumMp
    int n_getSmallMp() -> n_getSmallMp
    int n_getLargeMp() -> n_getLargeMp
    int n_getMediumMp() -> n_getMediumMp
    int n_getMaxSize(int) -> n_getMaxSize
com.aviary.android.feather.headless.utils.IOUtils -> com.aviary.android.feather.headless.utils.a:
    java.io.File mkdirs(java.io.File,java.lang.String) -> a
    boolean readFileFromZip(java.util.zip.ZipInputStream,java.lang.String,java.io.OutputStream) -> a
    void closeSilently(java.io.Closeable) -> a
    void closeSilently(android.database.Cursor) -> a
    void copyFile(java.io.InputStream,java.io.OutputStream) -> a
    void copyFile(java.io.InputStream,java.nio.ByteBuffer) -> a
    int readSystemFileAsInt(java.lang.String) -> a
    java.lang.String readFully(java.io.InputStream) -> a
    java.lang.String getRealFilePath(android.content.Context,android.net.Uri) -> a
    java.io.InputStream ensureMarkSupported(java.io.InputStream) -> b
    void unzip(java.io.InputStream,java.io.File) -> a
    void unzipEntry(java.util.zip.ZipEntry,java.util.zip.ZipInputStream,java.io.File) -> a
    boolean mkdir(java.io.File) -> a
com.aviary.android.feather.headless.utils.StringUtils -> com.aviary.android.feather.headless.utils.b:
    byte[] SALT -> a
    long[] sCrcTable -> b
    java.lang.String padRight(java.lang.String,char,int) -> a
    byte[] getBytes(java.lang.String) -> a
    long crc64Long(byte[]) -> a
com.aviary.android.feather.library.MonitoredActivity -> com.aviary.android.feather.library.a:
    java.util.ArrayList mListeners -> a
    java.lang.String mApiKey -> g
    void addLifeCycleListener(com.aviary.android.feather.library.MonitoredActivity$LifeCycleListener) -> a
    void removeLifeCycleListener(com.aviary.android.feather.library.MonitoredActivity$LifeCycleListener) -> b
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.String getApiKey(android.content.Context) -> a
    java.lang.String readApiKey(android.content.Context) -> b
    void onDestroy() -> onDestroy
    void onStart() -> onStart
    void onStop() -> onStop
    void onPause() -> onPause
    void onResume() -> onResume
com.aviary.android.feather.library.MonitoredActivity$LifeCycleAdapter -> com.aviary.android.feather.library.b:
    void onActivityCreated(com.aviary.android.feather.library.MonitoredActivity) -> a
    void onActivityDestroyed(com.aviary.android.feather.library.MonitoredActivity) -> b
    void onActivityStarted(com.aviary.android.feather.library.MonitoredActivity) -> c
    void onActivityStopped(com.aviary.android.feather.library.MonitoredActivity) -> d
com.aviary.android.feather.library.MonitoredActivity$LifeCycleListener -> com.aviary.android.feather.library.c:
    void onActivityCreated(com.aviary.android.feather.library.MonitoredActivity) -> a
    void onActivityDestroyed(com.aviary.android.feather.library.MonitoredActivity) -> b
    void onActivityStarted(com.aviary.android.feather.library.MonitoredActivity) -> c
    void onActivityStopped(com.aviary.android.feather.library.MonitoredActivity) -> d
com.aviary.android.feather.library.content.FeatherIntent -> com.aviary.android.feather.library.content.FeatherIntent:
com.aviary.android.feather.library.content.FeatherIntent$PluginType -> com.aviary.android.feather.library.content.a:
    boolean typeof(int,int) -> a
    boolean isSticker(int) -> a
    boolean isFilter(int) -> b
    boolean isTool(int) -> c
    boolean isBorder(int) -> d
    boolean isTypeOf(int,int) -> b
    java.lang.String getName(int) -> e
com.aviary.android.feather.library.content.ToolEntry -> com.aviary.android.feather.library.content.b:
    int labelResourceId -> a
    int iconResourceId -> b
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters name -> c
com.aviary.android.feather.library.content.cache.BlobCache -> com.aviary.android.feather.library.content.a.a:
    boolean LOG_ENABLED -> a
    java.io.RandomAccessFile mIndexFile -> b
    java.io.RandomAccessFile mDataFile0 -> c
    java.io.RandomAccessFile mDataFile1 -> d
    java.nio.channels.FileChannel mIndexChannel -> e
    java.nio.MappedByteBuffer mIndexBuffer -> f
    int mMaxEntries -> g
    int mMaxBytes -> h
    int mActiveRegion -> i
    int mActiveEntries -> j
    int mActiveBytes -> k
    int mVersion -> l
    java.io.RandomAccessFile mActiveDataFile -> m
    java.io.RandomAccessFile mInactiveDataFile -> n
    int mActiveHashStart -> o
    int mInactiveHashStart -> p
    byte[] mIndexHeader -> q
    byte[] mBlobHeader -> r
    java.util.zip.Adler32 mAdler32 -> s
    java.lang.String mPath -> t
    com.aviary.android.feather.library.content.cache.BlobCache$LookupRequest mLookupRequest -> u
    int mSlotOffset -> v
    int mFileOffset -> w
    void deleteFiles(java.lang.String) -> a
    void deleteFileSilently(java.lang.String) -> b
    void close(boolean) -> a
    void closeAll() -> c
    boolean loadIndex() -> d
    void setActiveVariables() -> e
    void resetCache(int,int) -> a
    void flipRegion() -> f
    void updateIndexHeader() -> g
    void clearHash(int) -> a
    void insert(long,byte[]) -> a
    void insertInternal(long,byte[],int) -> a
    byte[] lookup(long) -> a
    boolean lookup(com.aviary.android.feather.library.content.cache.BlobCache$LookupRequest) -> a
    boolean getBlob(java.io.RandomAccessFile,int,com.aviary.android.feather.library.content.cache.BlobCache$LookupRequest) -> a
    boolean lookupInternal(long,int) -> a
    void syncIndex() -> a
    void syncAll() -> b
    int checkSum(byte[]) -> a
    int checkSum(byte[],int,int) -> a
    void closeSilently(java.io.Closeable) -> a
    int readInt(byte[],int) -> a
    long readLong(byte[],int) -> b
    void writeInt(byte[],int,int) -> b
    void writeLong(byte[],int,long) -> a
com.aviary.android.feather.library.content.cache.BlobCache$LookupRequest -> com.aviary.android.feather.library.content.a.b:
    long key -> a
    byte[] buffer -> b
    int length -> c
com.aviary.android.feather.library.content.cache.CacheManager -> com.aviary.android.feather.library.content.a.c:
    boolean LOG_ENABLED -> a
    java.util.HashMap sCacheMap -> b
    java.util.HashMap sOldCheckDone -> c
    boolean DEBUG -> d
    long[] mMaxCacheAge -> e
    com.aviary.android.feather.library.content.cache.BlobCache getCache(android.content.Context,com.aviary.android.feather.library.content.cache.CacheManager$Type,long,int,int,int) -> a
    void close(android.content.Context,com.aviary.android.feather.library.content.cache.CacheManager$Type,boolean) -> a
    java.lang.String getRootPath(android.content.Context) -> a
    void removeOldFilesIfNecessary(android.content.Context,com.aviary.android.feather.library.content.cache.CacheManager$Type) -> a
    void removeCacheFiles(android.content.Context,com.aviary.android.feather.library.content.cache.CacheManager$Type) -> b
com.aviary.android.feather.library.content.cache.CacheManager$Type -> com.aviary.android.feather.library.content.a.d:
    com.aviary.android.feather.library.content.cache.CacheManager$Type Image -> a
    com.aviary.android.feather.library.content.cache.CacheManager$Type File -> b
    com.aviary.android.feather.library.content.cache.CacheManager$Type[] ENUM$VALUES -> c
    com.aviary.android.feather.library.content.cache.CacheManager$Type[] values() -> values
    com.aviary.android.feather.library.content.cache.CacheManager$Type valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.external.tracking.Constants -> com.aviary.android.feather.library.external.tracking.a:
    int CURRENT_API_LEVEL -> a
com.aviary.android.feather.library.external.tracking.DatapointHelper -> com.aviary.android.feather.library.external.tracking.b:
    java.lang.Class[] STRING_CLASS_ARRAY -> a
    java.lang.Object[] HARDWARE_WIFI -> b
    java.lang.Object[] HARDWARE_TELEPHONY -> c
    int getApiLevel() -> a
    java.lang.String getAndroidIdHashOrNull(android.content.Context) -> a
    java.lang.String getSerialNumberHashOrNull() -> b
    java.lang.String getTelephonyDeviceIdOrNull(android.content.Context) -> b
    java.lang.String getTelephonyDeviceIdHashOrNull(android.content.Context) -> c
    java.lang.String getWifiMacHashOrNull(android.content.Context) -> d
    java.lang.String getNetworkType(android.content.Context,android.telephony.TelephonyManager) -> a
    java.lang.String getManufacturer() -> c
    java.lang.String getAppVersion(android.content.Context) -> e
    java.lang.String getSha256_buggy(java.lang.String) -> a
com.aviary.android.feather.library.external.tracking.LocalyticsProvider -> com.aviary.android.feather.library.external.tracking.c:
    java.util.Map sLocalyticsProviderMap -> a
    java.lang.Object[] sLocalyticsProviderIntrinsicLock -> b
    java.util.Map sCountProjectionMap -> c
    java.util.Set sValidTables -> d
    android.database.sqlite.SQLiteDatabase mDb -> e
    com.aviary.android.feather.library.external.tracking.LocalyticsProvider getInstance(android.content.Context,java.lang.String) -> a
    long insert(java.lang.String,android.content.ContentValues) -> a
    android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> a
    int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[]) -> a
    int delete(java.lang.String,java.lang.String,java.lang.String[]) -> a
    void runBatchTransaction(java.lang.Runnable) -> a
    java.util.Set getValidTables() -> a
    java.util.HashMap getCountProjectionMap() -> b
    void deleteOldFiles(android.content.Context) -> a
    boolean deleteDirectory(java.io.File) -> a
com.aviary.android.feather.library.external.tracking.LocalyticsProvider$AttributesDbColumns -> com.aviary.android.feather.library.external.tracking.d:
    java.lang.String ATTRIBUTE_CUSTOM_DIMENSION_1 -> a
    java.lang.String ATTRIBUTE_CUSTOM_DIMENSION_2 -> b
    java.lang.String ATTRIBUTE_CUSTOM_DIMENSION_3 -> c
    java.lang.String ATTRIBUTE_CUSTOM_DIMENSION_4 -> d
com.aviary.android.feather.library.external.tracking.LocalyticsProvider$DatabaseHelper -> com.aviary.android.feather.library.external.tracking.e:
    android.content.Context mContext -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onOpen(android.database.sqlite.SQLiteDatabase) -> onOpen
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.aviary.android.feather.library.external.tracking.LocalyticsSession -> com.aviary.android.feather.library.external.tracking.f:
    java.lang.String OPEN_EVENT -> a
    java.lang.String CLOSE_EVENT -> b
    java.lang.String OPT_IN_EVENT -> c
    java.lang.String OPT_OUT_EVENT -> d
    java.lang.String FLOW_EVENT -> e
    android.os.HandlerThread sSessionHandlerThread -> h
    android.os.HandlerThread sUploadHandlerThread -> f
    java.util.Map sLocalyticsSessionHandlerMap -> i
    java.lang.Object[] sLocalyticsSessionIntrinsicLock -> j
    android.os.Handler mSessionHandler -> k
    android.content.Context mContext -> l
    java.util.Map sIsUploadingMap -> g
    android.os.HandlerThread getHandlerThread(java.lang.String) -> a
    void open(java.util.List) -> a
    void close(java.util.List) -> b
    void tagEvent(java.lang.String,java.util.Map,java.util.List) -> a
    void upload() -> a
    java.util.Map convertDimensionsToAttributes(java.util.List) -> c
com.aviary.android.feather.library.external.tracking.LocalyticsSession$Pair -> com.aviary.android.feather.library.external.tracking.g:
    java.lang.Object first -> a
    java.lang.Object second -> b
com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler -> com.aviary.android.feather.library.external.tracking.h:
    java.lang.String UPLOAD_BLOBS_EVENTS_SORT_ORDER -> b
    java.lang.String EVENTS_SORT_ORDER -> c
    android.content.Context mContext -> d
    com.aviary.android.feather.library.external.tracking.LocalyticsProvider mProvider -> a
    java.lang.String mApiKey -> e
    long mApiKeyId -> f
    java.lang.String mAppVersion -> g
    android.os.Handler mUploadHandler -> h
    java.lang.String[] PROJECTION_INIT_API_KEY -> i
    java.lang.String SELECTION_INIT_API_KEY -> j
    java.lang.String SELECTION_OPT_IN_OUT -> k
    java.lang.String[] PROJECTION_GET_OPEN_SESSION_ID_SESSION_ID -> l
    java.lang.String[] PROJECTION_GET_OPEN_SESSION_ID_EVENT_COUNT -> m
    java.lang.String SELECTION_GET_OPEN_SESSION_ID_EVENT_COUNT -> n
    java.lang.String[] PROJECTION_OPEN_EVENT_ID -> o
    java.lang.String SELECTION_OPEN -> p
    java.lang.String[] PROJECTION_OPEN_BLOB_EVENTS -> q
    java.lang.String[] PROJECTION_OPEN_SESSIONS -> r
    java.lang.String SELECTION_OPEN_NEW_SESSION -> s
    java.lang.String SELECTION_OPEN_DELETE_EMPTIES_EVENT_HISTORY_SESSION_KEY_REF -> t
    java.lang.String SELECTION_OPEN_DELETE_EMPTIES_EVENTS_SESSION_KEY_REF -> u
    java.lang.String[] PROJECTION_OPEN_DELETE_EMPTIES_EVENT_ID -> v
    java.lang.String[] PROJECTION_OPEN_DELETE_EMPTIES_PROCESSED_IN_BLOB -> w
    java.lang.String SELECTION_OPEN_DELETE_EMPTIES_UPLOAD_BLOBS_ID -> x
    java.lang.String SELECTION_OPEN_DELETE_EMPTIES_SESSIONS_ID -> y
    java.lang.String[] PROJECTION_GET_INSTALLATION_ID -> z
    java.lang.String SELECTION_GET_INSTALLATION_ID -> A
    java.lang.String[] PROJECTION_OPEN_CLOSED_SESSION -> B
    java.lang.String SELECTION_OPEN_CLOSED_SESSION -> C
    java.lang.String SELECTION_OPEN_CLOSED_SESSION_ATTRIBUTES -> D
    java.lang.String[] PROJECTION_GET_NUMBER_OF_SESSIONS -> E
    java.lang.String[] PROJECTION_TAG_EVENT -> F
    java.lang.String SELECTION_TAG_EVENT -> G
    java.lang.String[] PROJECTION_TAG_SCREEN -> H
    java.lang.String SELECTION_TAG_SCREEN -> I
    java.lang.String SORT_ORDER_TAG_SCREEN -> J
    java.lang.String[] PROJECTION_FLOW_EVENTS -> K
    java.lang.String SELECTION_FLOW_EVENTS -> L
    java.lang.String[] SELECTION_ARGS_FLOW_EVENTS -> M
    java.lang.String[] PROJECTION_FLOW_BLOBS -> N
    java.lang.String[] PROJECTION_UPLOAD_EVENTS -> O
    java.lang.String[] PROJECTION_UPLOAD_BLOBS -> P
    java.lang.String SELECTION_UPLOAD_NULL_BLOBS -> Q
    java.lang.String[] JOINER_ARG_UPLOAD_EVENTS_COLUMNS -> R
    java.lang.String[] PROJECTION_IS_OPTED_OUT -> S
    java.lang.String SELECTION_IS_OPTED_OUT -> T
    int[] $SWITCH_TABLE$android$database$CursorJoiner$Result -> U
    void handleMessage(android.os.Message) -> handleMessage
    void init() -> a
    void optOut(boolean) -> a
    java.lang.Long getOpenSessionId(com.aviary.android.feather.library.external.tracking.LocalyticsProvider) -> a
    void open(boolean,java.util.Map) -> a
    void openNewSession(java.util.Map) -> b
    java.lang.String getInstallationId(com.aviary.android.feather.library.external.tracking.LocalyticsProvider,java.lang.String) -> b
    void openClosedSession(long) -> a
    long getNumberOfSessions(com.aviary.android.feather.library.external.tracking.LocalyticsProvider) -> b
    void close(java.util.Map) -> a
    void tagEvent(java.lang.String,java.util.Map) -> a
    void tagScreen(java.lang.String) -> a
    void conditionallyAddFlowEvent() -> c
    void preUploadBuildBlobs(com.aviary.android.feather.library.external.tracking.LocalyticsProvider) -> c
    void upload(java.lang.Runnable) -> a
    boolean isOptedOut(com.aviary.android.feather.library.external.tracking.LocalyticsProvider,java.lang.String) -> a
    int[] $SWITCH_TABLE$android$database$CursorJoiner$Result() -> b
com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler$1 -> com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler$1:
    com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler this$1 -> a
    boolean val$isOptingOut -> b
    void run() -> run
com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler$2 -> com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler$2:
    com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler this$1 -> a
    android.os.Message val$msg -> b
    void run() -> run
com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler$3 -> com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler$3:
    com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler this$1 -> a
    android.os.Message val$msg -> b
    void run() -> run
com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler$4 -> com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler$4:
    com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler this$1 -> a
    java.lang.String val$event -> b
    java.util.Map val$attributes -> c
    void run() -> run
com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler$5 -> com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler$5:
    com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler this$1 -> a
    java.lang.String val$screen -> b
    void run() -> run
com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler$6 -> com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler$6:
    com.aviary.android.feather.library.external.tracking.LocalyticsSession$SessionHandler this$1 -> a
    java.lang.Runnable val$callback -> b
    void run() -> run
com.aviary.android.feather.library.external.tracking.LocalyticsSession$UploadHandler -> com.aviary.android.feather.library.external.tracking.i:
    com.aviary.android.feather.library.external.tracking.LocalyticsProvider mProvider -> a
    android.content.Context mContext -> b
    java.lang.String mApiKey -> c
    android.os.Handler mSessionHandler -> d
    void handleMessage(android.os.Message) -> handleMessage
    boolean uploadSessions(java.lang.String,java.lang.String) -> a
    java.util.List convertDatabaseToJson(android.content.Context,com.aviary.android.feather.library.external.tracking.LocalyticsProvider,java.lang.String) -> a
    void deleteBlobsAndSessions(com.aviary.android.feather.library.external.tracking.LocalyticsProvider) -> a
    long getApiKeyCreationTime(com.aviary.android.feather.library.external.tracking.LocalyticsProvider,java.lang.String) -> a
    org.json.JSONObject getAttributesFromSession(com.aviary.android.feather.library.external.tracking.LocalyticsProvider,java.lang.String,long) -> a
    org.json.JSONObject convertEventToJson(com.aviary.android.feather.library.external.tracking.LocalyticsProvider,android.content.Context,long,long,java.lang.String) -> a
    long getSessionIdForEventId(com.aviary.android.feather.library.external.tracking.LocalyticsProvider,long) -> a
    java.lang.String getSessionUuid(com.aviary.android.feather.library.external.tracking.LocalyticsProvider,long) -> b
    long getSessionStartTime(com.aviary.android.feather.library.external.tracking.LocalyticsProvider,long) -> c
    org.json.JSONObject convertAttributesToJson(com.aviary.android.feather.library.external.tracking.LocalyticsProvider,android.content.Context,long) -> a
    long getSessionIdForBlobId(com.aviary.android.feather.library.external.tracking.LocalyticsProvider,long) -> d
com.aviary.android.feather.library.external.tracking.LocalyticsSession$UploadHandler$1 -> com.aviary.android.feather.library.external.tracking.LocalyticsSession$UploadHandler$1:
    com.aviary.android.feather.library.external.tracking.LocalyticsSession$UploadHandler this$1 -> a
    void run() -> run
com.aviary.android.feather.library.external.tracking.LocalyticsTracker -> com.aviary.android.feather.library.external.tracking.LocalyticsTracker:
    boolean LOG_ENABLED -> a
    java.lang.String localyticsKey -> b
    com.aviary.android.feather.library.external.tracking.LocalyticsSession localyticsSession -> c
    java.util.HashMap mDefaultAttributes -> d
    java.util.List mCustomDimensions -> e
    void setABGroup(java.lang.String) -> setABGroup
    void setExternalAppName(java.lang.String) -> setExternalAppName
    boolean recordTag(java.lang.String,java.util.HashMap) -> recordTag
    void open() -> open
    void upload() -> upload
    boolean close() -> close
com.aviary.android.feather.library.external.tracking.ReflectionUtils -> com.aviary.android.feather.library.external.tracking.j:
    java.lang.Object tryInvokeInstance(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
    java.lang.Object helper(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
com.aviary.android.feather.library.external.tracking.TrackerFactory -> com.aviary.android.feather.library.external.tracking.TrackerFactory:
    com.aviary.android.feather.library.tracking.AbstractTracker create(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> create
com.aviary.android.feather.library.filters.AdjustFilter -> com.aviary.android.feather.library.filters.AdjustFilter:
    boolean setStraighten(double,double,double) -> a
    boolean setFixedRotation(int) -> a
    void setFeatherEditSize(int,int) -> b
    boolean setFlip(boolean,boolean) -> a
com.aviary.android.feather.library.filters.BorderFilter -> com.aviary.android.feather.library.filters.BorderFilter:
    void setSourceApp(java.lang.CharSequence) -> a
    void setBorderName(java.lang.CharSequence) -> b
    void setHiRes(boolean) -> a
    void setSize(double) -> a
com.aviary.android.feather.library.filters.ColorSplashFilter -> com.aviary.android.feather.library.filters.ColorSplashFilter:
    java.util.List strokes -> c
    void addStrokeData(com.aviary.android.feather.headless.moa.MoaStrokeParameter) -> a
com.aviary.android.feather.library.filters.EnhanceFilter -> com.aviary.android.feather.library.filters.EnhanceFilter:
    void setType(com.aviary.android.feather.library.filters.EnhanceFilter$Types) -> a
    void executeInPlace(android.graphics.Bitmap) -> a
com.aviary.android.feather.library.filters.EnhanceFilter$Types -> com.aviary.android.feather.library.filters.a:
    com.aviary.android.feather.library.filters.EnhanceFilter$Types HiDef -> a
    com.aviary.android.feather.library.filters.EnhanceFilter$Types Illuminate -> b
    com.aviary.android.feather.library.filters.EnhanceFilter$Types ColorFix -> c
    com.aviary.android.feather.library.filters.EnhanceFilter$Types[] ENUM$VALUES -> d
    com.aviary.android.feather.library.filters.EnhanceFilter$Types[] values() -> values
    com.aviary.android.feather.library.filters.EnhanceFilter$Types valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.filters.FilterLoaderFactory -> com.aviary.android.feather.library.filters.b:
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$filters$FilterLoaderFactory$Filters -> a
    java.lang.String[] getDefaultFilters() -> a
    com.aviary.android.feather.headless.filters.IFilter get(com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters) -> a
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$filters$FilterLoaderFactory$Filters() -> b
com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters -> com.aviary.android.feather.library.filters.c:
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters SHARPNESS -> a
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters BRIGHTNESS -> b
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters CONTRAST -> c
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters SATURATION -> d
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters EFFECTS -> e
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters RED_EYE -> f
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters CROP -> g
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters WHITEN -> h
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters DRAWING -> i
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters STICKERS -> j
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters TEXT -> k
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters BLEMISH -> l
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters MEME -> m
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters ADJUST -> n
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters ENHANCE -> o
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters COLORTEMP -> p
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters BORDERS -> q
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters COLOR_SPLASH -> r
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters TILT_SHIFT -> s
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters[] ENUM$VALUES -> t
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters[] values() -> values
    com.aviary.android.feather.library.filters.FilterLoaderFactory$Filters valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.filters.ILevelFilter -> com.aviary.android.feather.library.filters.ILevelFilter:
com.aviary.android.feather.library.filters.MemeFilter -> com.aviary.android.feather.library.filters.MemeFilter:
    com.aviary.android.feather.headless.moa.MoaAction mAction -> c
    void setTopText(java.lang.String) -> a
    void setBottomText(java.lang.String) -> b
    void setTextSize(double) -> a
    void setFillColor(int) -> a
    void setStrokeColor(int) -> b
    void setAssetFontName(java.lang.String) -> c
    void setPaddingTop(double) -> b
    void setPaddingBottom(double) -> c
com.aviary.android.feather.library.filters.SaturationFilter -> com.aviary.android.feather.library.filters.SaturationFilter:
    void setValue(java.lang.Float) -> a
    void executeInPlace(android.graphics.Bitmap) -> a
com.aviary.android.feather.library.filters.SpotBrushFilter -> com.aviary.android.feather.library.filters.SpotBrushFilter:
    com.aviary.android.feather.headless.moa.MoaPointParameter center -> c
    java.util.ArrayList pointlist -> d
    com.aviary.android.feather.library.graphics.FlattenPath mFlattenPath -> e
    float mX -> f
    float mY -> g
    float mRadius -> h
    java.lang.String OPTION_CENTER -> i
    java.lang.String OPTION_RADIUS -> j
    java.lang.String OPTION_POINTS -> k
    com.aviary.android.feather.library.graphics.FlattenPath getFlattenPath() -> c
    void moveTo(float[]) -> a
    void lineTo(float[]) -> b
    void quadTo(float[]) -> c
    void setRadius(float,int) -> a
    float getRealRadius() -> d
    void addPoint(float,float) -> a
    void draw(android.graphics.Bitmap) -> b
com.aviary.android.feather.library.filters.StickerFilter -> com.aviary.android.feather.library.filters.StickerFilter:
    void setSourceDir(java.lang.String) -> a
    void setUrl(java.lang.String) -> b
    void setSize(int,int) -> b
    void setExternal(int) -> a
    void setTopLeft(float,float) -> a
    void setBottomRight(float,float) -> b
    void setRotation(double) -> a
    void setCenter(float,float) -> c
    void setScale(float,float) -> d
com.aviary.android.feather.library.filters.TextFilter -> com.aviary.android.feather.library.filters.TextFilter:
    void setText(java.lang.CharSequence) -> a
    void setFillColor(int) -> a
    void setStrokeColor(int) -> b
    void setRotation(float) -> a
    void setTopLeft(double,double) -> a
    void setBottomRight(double,double) -> b
    void setTextSize(double) -> a
com.aviary.android.feather.library.filters.TiltShiftFilter -> com.aviary.android.feather.library.filters.TiltShiftFilter:
com.aviary.android.feather.library.graphics.CircleF -> com.aviary.android.feather.library.graphics.CircleF:
    float radius -> a
    float x -> b
    float y -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void set(float,float,float) -> a
    float centerX() -> a
    float centerY() -> b
    float getRadius() -> c
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void readFromParcel(android.os.Parcel) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.aviary.android.feather.library.graphics.CircleF$1 -> com.aviary.android.feather.library.graphics.a:
    com.aviary.android.feather.library.graphics.CircleF createFromParcel(android.os.Parcel) -> a
    com.aviary.android.feather.library.graphics.CircleF[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.aviary.android.feather.library.graphics.CubicCurve -> com.aviary.android.feather.library.graphics.b:
    double _x0 -> a
    double _y0 -> b
    double _x1 -> c
    double _y1 -> d
    double _x2 -> e
    double _y2 -> f
    double _x3 -> g
    double _y3 -> h
    void update(double,double,double,double,double,double,double,double) -> a
    android.graphics.PointF getB() -> a
    double getSquareFlatness() -> b
    double[] subdivide() -> c
com.aviary.android.feather.library.graphics.FlattenPath -> com.aviary.android.feather.library.graphics.c:
    double DEFAULT_FLATNESS -> a
    double MIN_CHORD_LENGTH_SQ -> b
    double MAX_CHORD_LENGTH_SQ -> c
    double flatness -> d
    java.util.LinkedList points -> e
    android.graphics.PointF lastPoint -> f
    com.aviary.android.feather.library.graphics.CubicCurve cubic -> g
    android.graphics.PointF remove() -> a
    int size() -> b
    void moveTo(float,float) -> a
    void lineTo(float,float) -> b
    void quadTo(float,float,float,float) -> a
    void flattenCubicPoints(double,double,double,double,double,double,double,double) -> a
com.aviary.android.feather.library.graphics.IGeom -> com.aviary.android.feather.library.graphics.IGeom:
com.aviary.android.feather.library.graphics.LineF -> com.aviary.android.feather.library.graphics.LineF:
    android.graphics.PointF start -> a
    android.graphics.PointF end -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void set(float,float,float,float) -> a
    float getStartX() -> a
    float getStartY() -> b
    float getEndX() -> c
    float getEndY() -> d
    void reset() -> e
    android.graphics.PointF intersect(float,float,float,float) -> b
    android.graphics.PointF[] intersect(android.graphics.RectF) -> a
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void readFromParcel(android.os.Parcel) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.aviary.android.feather.library.graphics.LineF$1 -> com.aviary.android.feather.library.graphics.d:
    com.aviary.android.feather.library.graphics.LineF createFromParcel(android.os.Parcel) -> a
    com.aviary.android.feather.library.graphics.LineF[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.aviary.android.feather.library.graphics.Point2D -> com.aviary.android.feather.library.graphics.e:
    double angleBetweenPoints(float[],float[]) -> a
    double angleBetweenPoints(float,float,float,float,float) -> a
    double angle360(double) -> a
    double angleBetweenPoints(android.graphics.PointF,android.graphics.PointF) -> a
    double angleBetweenPoints(android.graphics.PointF,android.graphics.PointF,float) -> a
    double degrees(double) -> b
    double distance(float[],float[]) -> b
    double distance(android.graphics.PointF,android.graphics.PointF) -> b
    double distance(float,float,float,float) -> a
    double hypotenuse(android.graphics.RectF) -> a
    double radians(double) -> c
    void rotate(android.graphics.PointF[],double) -> a
    void rotate(android.graphics.PointF,double) -> a
    void translate(android.graphics.PointF[],float,float) -> a
    void translate(android.graphics.PointF,float,float) -> a
    android.graphics.PointF intersection(android.graphics.PointF[],android.graphics.PointF[]) -> a
    void getLerp(android.graphics.PointF,android.graphics.PointF,float,android.graphics.PointF) -> a
    void grow(android.graphics.RectF,float,float) -> a
com.aviary.android.feather.library.graphics.RectD -> com.aviary.android.feather.library.graphics.RectD:
    double left -> a
    double top -> b
    double right -> c
    double bottom -> d
    android.os.Parcelable$Creator CREATOR -> CREATOR
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double width() -> a
    double height() -> b
    void set(double,double,double,double) -> a
    void set(com.aviary.android.feather.library.graphics.RectD) -> a
    void offset(double,double) -> a
    void inset(double,double) -> b
    boolean contains(com.aviary.android.feather.library.graphics.RectD) -> b
    void sort() -> c
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void readFromParcel(android.os.Parcel) -> a
com.aviary.android.feather.library.graphics.RectD$1 -> com.aviary.android.feather.library.graphics.f:
    com.aviary.android.feather.library.graphics.RectD createFromParcel(android.os.Parcel) -> a
    com.aviary.android.feather.library.graphics.RectD[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.aviary.android.feather.library.graphics.drawable.AviaryMemeTextDrawable -> com.aviary.android.feather.library.graphics.a.a:
    int mContentWidth -> a
    int mContentHeight -> b
    boolean mTextChanged -> E
    float xoff -> F
    float yoff -> G
    android.graphics.Paint mTempPaint -> H
    float maxSize -> I
    float padW -> J
    boolean mBoundsChanged -> K
    boolean mTop -> c
    void setContentSize(float,float) -> a
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    void setTextSize(float) -> a
    void setText(java.lang.String) -> a
    void onTextInvalidate() -> a
    boolean validateSize(android.graphics.RectF) -> a
    void setBounds(float,float,float,float) -> a
    void draw(android.graphics.Canvas) -> draw
    int getNumLines() -> b
com.aviary.android.feather.library.graphics.drawable.AviaryTextDrawable -> com.aviary.android.feather.library.graphics.a.b:
    boolean LOG_ENABLED -> d
    android.graphics.Paint mPaint -> e
    android.graphics.Paint mCursorPaint -> f
    android.graphics.Paint mStrokePaint -> g
    android.graphics.Paint mDebugPaint -> h
    int mPaintAlpha -> i
    int mStrokeAlpha -> j
    java.lang.String mHintString -> k
    java.lang.String mText -> l
    android.graphics.RectF mBoundsF -> m
    boolean mEditing -> n
    long mNow -> o
    boolean mShowCursor -> p
    java.util.List linesBreak -> q
    boolean mTextHint -> r
    float mCursorWidth -> s
    float mCursorDistance -> t
    boolean mStrokeEnabled -> u
    float mDefaultTextSize -> v
    float mIntrinsicHeight -> w
    float mIntrinsicWidth -> x
    float mMinWidth -> y
    float mMinHeight -> z
    float mMinTextSize -> A
    android.graphics.Paint$FontMetrics metrics -> B
    android.graphics.Rect lastRect -> C
    android.graphics.RectF drawRect -> D
    com.aviary.android.feather.library.graphics.drawable.EditableDrawable$OnSizeChange mSizeChangeListener -> a
    float getDefaultTextSize() -> c
    void setCursorWidth(int) -> a
    void setStrokeEnabled(boolean) -> a
    boolean getStrokeEnabled() -> d
    void setTextHint(java.lang.CharSequence) -> a
    void setTextHint(java.lang.String) -> b
    boolean isTextHint() -> e
    float getMinWidth() -> f
    float getMinHeight() -> g
    void beginEdit() -> h
    void endEdit() -> i
    float getCurrentHeight() -> j
    float getCurrentWidth() -> k
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    void invalidateSize() -> l
    int getOpacity() -> getOpacity
    java.lang.CharSequence getText() -> m
    int getTextColor() -> n
    int getTextStrokeColor() -> o
    float getTextSize() -> p
    boolean isEditing() -> q
    void setAlpha(int) -> setAlpha
    void setBounds(float,float,float,float) -> a
    void setBounds(int,int,int,int) -> setBounds
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void setStrokeColor(int) -> b
    void setText(java.lang.CharSequence) -> b
    void setText(java.lang.String) -> a
    void setTextColor(int) -> c
    void setTextSize(float) -> a
    boolean validateSize(android.graphics.RectF) -> a
    void setMinSize(float,float) -> b
    void setMinTextSize(float) -> b
    float getMinTextSize() -> r
    float getFontMetrics(android.graphics.Paint$FontMetrics) -> a
    void computeMinSize() -> s
    float getMinTextWidth() -> t
    float getTotal(float[]) -> a
    float computeTextHeight() -> u
    float computeTextWidth() -> v
    float getTextWidth(int,int) -> a
    void copyBounds(android.graphics.RectF) -> b
    void draw(android.graphics.Canvas) -> draw
    void getLineBounds(int,android.graphics.Rect) -> a
    int getNumLines() -> b
    void onTextInvalidate() -> a
    void setOnSizeChangeListener(com.aviary.android.feather.library.graphics.drawable.EditableDrawable$OnSizeChange) -> a
com.aviary.android.feather.library.graphics.drawable.EditableDrawable -> com.aviary.android.feather.library.graphics.a.c:
    void setOnSizeChangeListener(com.aviary.android.feather.library.graphics.drawable.EditableDrawable$OnSizeChange) -> a
    void beginEdit() -> h
    void endEdit() -> i
    boolean isEditing() -> q
    java.lang.CharSequence getText() -> m
    void setText(java.lang.CharSequence) -> b
    void setText(java.lang.String) -> a
    boolean isTextHint() -> e
    void setBounds(float,float,float,float) -> a
    void setTextColor(int) -> c
    int getTextColor() -> n
    float getTextSize() -> p
    int getTextStrokeColor() -> o
    boolean getStrokeEnabled() -> d
com.aviary.android.feather.library.graphics.drawable.EditableDrawable$OnSizeChange -> com.aviary.android.feather.library.graphics.a.d:
    void onSizeChanged(com.aviary.android.feather.library.graphics.drawable.EditableDrawable,float,float,float,float) -> a
com.aviary.android.feather.library.graphics.drawable.FakeBitmapDrawable -> com.aviary.android.feather.library.graphics.a.e:
    int mFakeWidth -> e
    int mFakeHeight -> f
    int mRealWidth -> g
    int mRealHeight -> h
    android.graphics.Matrix mMatrix -> i
    void draw(android.graphics.Canvas) -> draw
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
com.aviary.android.feather.library.graphics.drawable.FeatherDrawable -> com.aviary.android.feather.library.graphics.a.f:
    void setMinSize(float,float) -> b
    float getMinWidth() -> f
    float getMinHeight() -> g
    boolean validateSize(android.graphics.RectF) -> a
    void draw(android.graphics.Canvas) -> draw
    void setBounds(int,int,int,int) -> setBounds
    void setBounds(android.graphics.Rect) -> setBounds
    float getCurrentWidth() -> k
    float getCurrentHeight() -> j
com.aviary.android.feather.library.graphics.drawable.StickerDrawable -> com.aviary.android.feather.library.graphics.a.g:
    float minWidth -> f
    float minHeight -> g
    java.lang.String mStickerName -> h
    java.lang.String mPackLabel -> i
    android.graphics.BlurMaskFilter mBlurFilter -> a
    android.graphics.Paint mShadowPaint -> b
    android.graphics.Bitmap mShadowBitmap -> c
    boolean mDrawShadow -> d
    android.graphics.Rect mTempRect -> e
    int getBitmapWidth() -> a
    int getBitmapHeight() -> b
    void draw(android.graphics.Canvas) -> draw
    void setDropShadow(boolean) -> a
    java.lang.String getStickerName() -> c
    java.lang.String getPackLabel() -> d
    boolean validateSize(android.graphics.RectF) -> a
    void setMinSize(float,float) -> b
    float getMinWidth() -> f
    float getMinHeight() -> g
    float getCurrentWidth() -> k
    float getCurrentHeight() -> j
com.aviary.android.feather.library.log.LoggerFactory -> com.aviary.android.feather.library.a.a:
    boolean LOG_ENABLED -> a
    com.aviary.android.feather.library.log.LoggerFactory$Logger getLogger(java.lang.String,com.aviary.android.feather.library.log.LoggerFactory$LoggerType) -> a
com.aviary.android.feather.library.log.LoggerFactory$BaseLogger -> com.aviary.android.feather.library.a.b:
    java.lang.String tag -> a
    java.lang.StringBuilder formatArguments(java.lang.Object[]) -> a
com.aviary.android.feather.library.log.LoggerFactory$ConsoleLogger -> com.aviary.android.feather.library.a.c:
    void info(java.lang.Object[]) -> b
    void log(java.lang.Object[]) -> c
    void debug(java.lang.Object[]) -> d
    void warning(java.lang.Object[]) -> e
    void error(java.lang.Object[]) -> f
com.aviary.android.feather.library.log.LoggerFactory$Logger -> com.aviary.android.feather.library.a.d:
    void log(java.lang.Object[]) -> c
    void debug(java.lang.Object[]) -> d
    void warning(java.lang.Object[]) -> e
    void error(java.lang.Object[]) -> f
    void info(java.lang.Object[]) -> b
com.aviary.android.feather.library.log.LoggerFactory$LoggerType -> com.aviary.android.feather.library.a.e:
    com.aviary.android.feather.library.log.LoggerFactory$LoggerType ConsoleLoggerType -> a
    com.aviary.android.feather.library.log.LoggerFactory$LoggerType[] ENUM$VALUES -> b
    com.aviary.android.feather.library.log.LoggerFactory$LoggerType[] values() -> values
    com.aviary.android.feather.library.log.LoggerFactory$LoggerType valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.log.LoggerFactory$NullLogger -> com.aviary.android.feather.library.a.f:
    void log(java.lang.Object[]) -> c
    void debug(java.lang.Object[]) -> d
    void warning(java.lang.Object[]) -> e
    void error(java.lang.Object[]) -> f
    void info(java.lang.Object[]) -> b
com.aviary.android.feather.library.plugins.ApplicationType -> com.aviary.android.feather.library.b.a:
    com.aviary.android.feather.library.plugins.ApplicationType mThisType -> f
    java.lang.String mPackageName -> a
    int mPluginType -> b
    int mStickerVersion -> c
    int mBorderVersion -> d
    int packageVersionCode -> e
    int getPackageVersionCode() -> a
    java.lang.String getPackageName() -> b
    int getPluginType() -> c
    boolean isSticker() -> d
    boolean isFilter() -> e
    boolean isTool() -> f
    boolean isBorder() -> g
    int getStickerVersion() -> h
    int getBorderVersion() -> i
    java.lang.String toString() -> toString
    com.aviary.android.feather.library.plugins.ApplicationType getDefault(android.content.Context) -> a
com.aviary.android.feather.library.plugins.ExternalPacksTask -> com.aviary.android.feather.library.b.b:
    java.text.SimpleDateFormat sSimpleDateFormatter -> a
    java.text.SimpleDateFormat sDateFormatter -> b
    android.os.Bundle call(com.aviary.android.feather.library.services.IAviaryController,android.os.Bundle) -> a
    java.lang.String convertStreamToString(java.io.InputStream) -> a
    java.io.ByteArrayInputStream download(com.aviary.android.feather.library.services.FileCacheService,android.content.Context,boolean) -> a
    boolean parseJSON(java.io.InputStream,java.util.List,java.util.Date) -> a
    java.lang.Object call(com.aviary.android.feather.library.services.IAviaryController,java.lang.Object) -> a
com.aviary.android.feather.library.plugins.ExternalPacksTask$ExternalPluginsComparator -> com.aviary.android.feather.library.b.c:
    int compare(com.aviary.android.feather.library.plugins.ExternalType,com.aviary.android.feather.library.plugins.ExternalType) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.aviary.android.feather.library.plugins.ExternalType -> com.aviary.android.feather.library.b.d:
    java.lang.String mLabel -> f
    java.lang.String mIconUrl -> g
    long mReleaseDate -> h
    int mMinMoaVersion -> i
    int mMaxMoaVersion -> j
    boolean mNeedsPurchase -> k
    int mNumFilters -> l
    int mNumStickers -> m
    int mNumTools -> n
    int mNumBorders -> o
    int mOrder -> p
    java.lang.String mDescription -> q
    org.json.JSONArray mItems -> r
    java.lang.String[] mStringItems -> s
    java.lang.String[] getItems() -> j
    int getOrder() -> k
    java.lang.String getDescription() -> l
    java.lang.String getLabel() -> m
    java.lang.String getIconUrl() -> n
    long getReleaseDate() -> o
    int getMinMoaVersion() -> p
    int getMaxMoaVersion() -> q
    boolean isNeedsPurchase() -> r
    int getNumFilters() -> s
    int getNumStickers() -> t
    int getNumBorders() -> u
    void setOrder(int) -> a
    void setNumFilters(int) -> b
    void setNumStickers(int) -> c
    void setNumTools(int) -> d
    void setNumBorders(int) -> e
    void setIconUrl(java.lang.String) -> a
    void setDescription(java.lang.String) -> b
    void setItems(org.json.JSONArray) -> a
    void setItems(java.lang.String[]) -> a
com.aviary.android.feather.library.plugins.FeatherExternalPack -> com.aviary.android.feather.library.b.e:
    java.lang.String mPackageName -> a
    int mPackageVersionCode -> b
    boolean mIsFree -> c
    int mNumFilters -> d
    int mNumStickers -> e
    int mNumBorders -> f
    int mPluginType -> g
    java.lang.String mIconUrl -> h
    int mStickerVersion -> i
    int mBorderVersion -> j
    java.lang.String mDescription -> k
    java.lang.String mLabel -> l
    java.lang.String[] items -> m
    java.lang.String[] getItems() -> a
    java.lang.String getLabel() -> b
    java.lang.String getDescription() -> c
    java.lang.String getIconUrl() -> d
    java.lang.String getPackageName() -> e
    int getPackageVersionCode() -> f
    boolean isFree() -> g
    int getPluginType() -> h
    java.lang.String getPluginVersion(int) -> a
com.aviary.android.feather.library.plugins.FeatherInternalPack -> com.aviary.android.feather.library.b.f:
    com.aviary.android.feather.library.plugins.FeatherPack mDefault -> a
    java.lang.String mPackageName -> b
    int mPackageVersion -> c
    int mPluginType -> d
    int mStickerVersion -> e
    int mBorderVersion -> f
    java.lang.String getPackageName() -> a
    int getPackageVersionCode() -> b
    java.lang.String getPluginVersion(int) -> a
    com.aviary.android.feather.library.plugins.FeatherInternalPack getDefault(android.content.Context) -> a
com.aviary.android.feather.library.plugins.FeatherPack -> com.aviary.android.feather.library.b.g:
com.aviary.android.feather.library.plugins.PluginFactory -> com.aviary.android.feather.library.b.h:
    com.aviary.android.feather.library.plugins.PluginFactory$IPlugin create(android.content.Context,com.aviary.android.feather.library.plugins.FeatherPack,int) -> a
com.aviary.android.feather.library.plugins.PluginFactory$EffectPlugin -> com.aviary.android.feather.library.b.i:
    com.aviary.android.feather.library.services.CDSPackage mPackage -> a
    boolean loaded() -> a_
    boolean installAndLoad(android.content.Context,com.aviary.android.feather.library.services.PluginService) -> a
    boolean available(com.aviary.android.feather.library.services.PluginService) -> a
    boolean load(com.aviary.android.feather.library.services.PluginService) -> b
    boolean install(android.content.Context,com.aviary.android.feather.library.services.PluginService) -> b
    int size() -> b
    com.aviary.android.feather.library.services.CDSPackage$CDSEntry getItemAt(int) -> a
    java.lang.CharSequence getPackageLabel() -> c
    int getType() -> d
    android.graphics.drawable.Drawable getPackageIcon() -> e
    java.lang.CharSequence getResourceLabel(java.lang.CharSequence) -> a
com.aviary.android.feather.library.plugins.PluginFactory$ExternalPlugin -> com.aviary.android.feather.library.b.j:
    int pluginType -> a
    java.lang.String packagename -> b
    java.lang.String version -> c
    java.lang.String label -> d
    java.lang.String iconUrl -> e
    boolean isfree -> f
    java.lang.String description -> g
    java.lang.String[] items -> h
    int packageversioncode -> i
    java.lang.String getDescription() -> a
    java.lang.String[] getItems() -> e
    java.lang.String getPackageName() -> f
    int size() -> b
    java.lang.CharSequence getPackageLabel() -> c
    int getType() -> d
    java.lang.String getIconUrl() -> g
com.aviary.android.feather.library.plugins.PluginFactory$FramePlugin -> com.aviary.android.feather.library.b.k:
    int version -> a
    int[] bordersSizeCache -> c
    void dispose() -> a
    int size() -> b
    java.lang.CharSequence getPackageLabel() -> c
    int getType() -> d
    android.graphics.drawable.Drawable getPackageIcon() -> e
    java.lang.String getSourceDir() -> g
    java.lang.String[] listBorders() -> h
    int[] listBordersWidths() -> i
    java.io.InputStream openThumbnail(java.lang.String) -> a
    java.lang.CharSequence getResourceLabel(java.lang.CharSequence) -> a
com.aviary.android.feather.library.plugins.PluginFactory$ICDSPlugin -> com.aviary.android.feather.library.b.l:
    boolean installAndLoad(android.content.Context,com.aviary.android.feather.library.services.PluginService) -> a
    com.aviary.android.feather.library.services.CDSPackage$CDSEntry getItemAt(int) -> a
com.aviary.android.feather.library.plugins.PluginFactory$IPlugin -> com.aviary.android.feather.library.b.m:
    java.lang.String getPackageName() -> f
    int size() -> b
    java.lang.CharSequence getPackageLabel() -> c
    int getType() -> d
com.aviary.android.feather.library.plugins.PluginFactory$InternalPlugin -> com.aviary.android.feather.library.b.n:
    int packageversioncode -> a
    java.lang.String packagename -> c
    boolean isExternal -> d
    android.content.pm.PackageManager packageManager -> e
    java.lang.ref.WeakReference applicationInfo -> f
    java.lang.ref.WeakReference resources -> g
    java.lang.String[] itemsCache -> b
    java.util.HashMap resourceIdentifierCache -> h
    boolean isExternal() -> j
    java.lang.String getPackageName() -> f
    int getPackageVersionCode() -> k
    boolean installed() -> l
    android.graphics.drawable.Drawable getPackageIcon() -> e
    java.lang.CharSequence getResourceLabel(java.lang.CharSequence) -> a
    android.content.pm.ApplicationInfo getApplicationInfo() -> m
    android.content.res.Resources getResources() -> n
    java.lang.CharSequence loadLabel(java.lang.String,java.lang.CharSequence) -> a
    java.lang.CharSequence loadDefaultAppLabel() -> o
    int getIdentifier(android.content.res.Resources,java.lang.String,java.lang.String) -> a
    android.graphics.drawable.Drawable getDrawable(java.lang.String,boolean) -> a
    android.graphics.drawable.Drawable loadDefaultAppIcon() -> g
    java.lang.String[] getStringArray(java.lang.String) -> b
    java.lang.String[] listAssets(java.lang.String) -> c
    java.io.InputStream openRawResource(java.lang.String) -> d
    java.io.InputStream openAsset(java.lang.String) -> e
    void dispose() -> a
    void finalize() -> finalize
com.aviary.android.feather.library.plugins.PluginFactory$StickerPlugin -> com.aviary.android.feather.library.b.o:
    int version -> a
    int size() -> b
    java.lang.CharSequence getPackageLabel() -> c
    int getType() -> d
    android.graphics.drawable.Drawable getPackageIcon() -> e
    java.lang.String[] listStickers() -> g
    java.lang.String getSourceDir() -> h
    java.lang.String[] listStickersRaw(com.aviary.android.feather.library.services.PluginService$StickerType) -> a
    java.lang.String[] listStickersAssets(com.aviary.android.feather.library.services.PluginService$StickerType) -> b
    java.lang.CharSequence getResourceLabel(java.lang.CharSequence) -> a
    java.io.InputStream getStickerStream(java.lang.String,com.aviary.android.feather.library.services.PluginService$StickerType) -> a
    java.io.InputStream openStickerRawStream(java.lang.String,com.aviary.android.feather.library.services.PluginService$StickerType) -> b
    java.io.InputStream openStickerAssetStream(java.lang.String,com.aviary.android.feather.library.services.PluginService$StickerType) -> c
com.aviary.android.feather.library.plugins.PluginFetchTask -> com.aviary.android.feather.library.b.p:
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> a
    com.aviary.android.feather.library.plugins.PluginFetchTask$Result call(com.aviary.android.feather.library.services.IAviaryController,android.os.Bundle) -> a
    java.lang.Object call(com.aviary.android.feather.library.services.IAviaryController,java.lang.Object) -> a
com.aviary.android.feather.library.plugins.PluginFetchTask$Result -> com.aviary.android.feather.library.b.q:
    java.util.Map installed -> a
    android.os.Bundle delta -> b
com.aviary.android.feather.library.plugins.PluginUpdaterTask -> com.aviary.android.feather.library.b.r:
    android.os.Handler mHandler -> a
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> b
    com.aviary.android.feather.library.plugins.PluginFetchTask$Result call(com.aviary.android.feather.library.services.IAviaryController,android.os.Bundle) -> a
    int getApplicationType(java.util.Map,java.lang.String) -> a
    void printBundle(android.os.Bundle) -> a
    java.lang.Object call(com.aviary.android.feather.library.services.IAviaryController,java.lang.Object) -> a
com.aviary.android.feather.library.plugins.UpdateType -> com.aviary.android.feather.library.b.s:
    java.lang.String mPackageName -> a
    java.lang.String mAction -> b
    int mPluginType -> c
    int mPackageVersionCode -> d
    int getPackageVersionCode() -> a
    java.lang.String getPackageName() -> b
    java.lang.String getAction() -> c
    int getPluginType() -> d
    java.lang.String toString() -> toString
com.aviary.android.feather.library.providers.FeatherContentProvider -> com.aviary.android.feather.library.c.a:
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> a
    java.lang.String mAuthority -> d
    com.aviary.android.feather.library.providers.FeatherContentProvider$DatabaseHelper mDatabase -> e
    android.content.UriMatcher mUriMatcher -> f
    java.util.HashMap mSessionProjectionMap -> b
    java.util.HashMap mActionProjectionMap -> c
    void initializeStaticMethods(android.content.Context) -> b
    java.lang.String loadAuthority(android.content.Context) -> c
    java.lang.String getAuthority(android.content.Context) -> a
    boolean onCreate() -> onCreate
    void printDatabaseStats() -> a
    void purgeDatabase() -> b
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    java.lang.String getSessionUUID(long) -> a
    long getSessionID(java.lang.String) -> a
com.aviary.android.feather.library.providers.FeatherContentProvider$ActionsDbColumns -> com.aviary.android.feather.library.c.b:
    android.net.Uri getContentUri(android.content.Context,java.lang.String) -> a
    android.net.Uri getContentUri(android.content.Context,long) -> a
    android.net.Uri getContentUri(android.content.Context,java.lang.String,long) -> a
com.aviary.android.feather.library.providers.FeatherContentProvider$DatabaseHelper -> com.aviary.android.feather.library.c.c:
    com.aviary.android.feather.library.providers.FeatherContentProvider this$0 -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.aviary.android.feather.library.providers.FeatherContentProvider$SessionsDbColumns -> com.aviary.android.feather.library.c.d:
    android.net.Uri mContentIdUriBase -> a
    void init(android.content.Context) -> a
    android.net.Uri getContentIdUriBase(android.content.Context) -> b
    android.net.Uri getContentUri(android.content.Context,java.lang.String) -> a
com.aviary.android.feather.library.providers.cds.CDSContentParser -> com.aviary.android.feather.library.c.a.a:
    android.content.Context mContext -> a
    java.io.File mFolder -> b
    com.aviary.android.feather.headless.moa.moalite.MoaLitePack mPack -> c
    com.aviary.android.feather.headless.moa.moalite.MoaLitePack getPack() -> a
    void loadItem(java.lang.String,java.io.OutputStream) -> a
    com.aviary.android.feather.headless.moa.moalite.MoaLitePack parsePack() -> b
com.aviary.android.feather.library.providers.cds.ContentResolverDownloader -> com.aviary.android.feather.library.c.a.b:
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> a
    void downloadAndExtract(android.content.Context,java.lang.String,java.io.File,int) -> a
    java.io.InputStream downloadEffect(android.content.Context,java.lang.String) -> a
    void extractStream(android.content.Context,java.io.InputStream,java.io.File) -> a
com.aviary.android.feather.library.receivers.AviarySystemReceiver -> com.aviary.android.feather.library.receivers.a:
    boolean LOG_ENABLED -> a
    android.os.Handler handler -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void handlePackage(android.content.Context,java.lang.String,android.content.Intent) -> a
    void handlePackageReplaced(android.content.Context,android.content.Intent) -> a
    void handlePackageRemoved(android.content.Context,android.content.Intent) -> b
    void handlePackageAdded(android.content.Context,android.content.Intent) -> c
    boolean isReplacing(android.os.Bundle) -> a
    java.lang.String getParentPackage(java.lang.String) -> b
    void trackPackageAdded(android.content.Context,java.lang.String,java.lang.String) -> a
    boolean access$0() -> a
    android.os.Handler access$1() -> b
    java.lang.String access$2(java.lang.String) -> a
com.aviary.android.feather.library.receivers.AviarySystemReceiver$TrackPackageAsyncTask -> com.aviary.android.feather.library.receivers.b:
    java.lang.String pname -> a
    java.lang.ref.SoftReference contextRef -> b
    java.lang.String purchasedPackageName -> c
    long INSTALL_TIME_THRESHOLD -> d
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Integer) -> a
    java.lang.Integer doInBackground(java.lang.String[]) -> a
    int trackPackage(android.content.Context,java.lang.String,java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    java.lang.ref.SoftReference access$2(com.aviary.android.feather.library.receivers.AviarySystemReceiver$TrackPackageAsyncTask) -> a
    java.lang.String access$3(com.aviary.android.feather.library.receivers.AviarySystemReceiver$TrackPackageAsyncTask) -> b
com.aviary.android.feather.library.receivers.AviarySystemReceiver$TrackPackageAsyncTask$1 -> com.aviary.android.feather.library.receivers.AviarySystemReceiver$TrackPackageAsyncTask$1:
    com.aviary.android.feather.library.receivers.AviarySystemReceiver$TrackPackageAsyncTask this$1 -> a
    void run() -> run
com.aviary.android.feather.library.receivers.AviarySystemReceiver$UpdateGolbalSettingsAsyncTask -> com.aviary.android.feather.library.receivers.c:
    java.lang.ref.SoftReference contextRef -> a
    java.lang.Void doInBackground(java.lang.String[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.library.services.BaseContextService -> com.aviary.android.feather.library.services.BaseContextService:
    com.aviary.android.feather.library.services.IAviaryController mContext -> a
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> b
    com.aviary.android.feather.library.services.IAviaryController getContext() -> d
    void internalDispose() -> e
    void dispose() -> b
com.aviary.android.feather.library.services.CDSDatabaseHelper -> com.aviary.android.feather.library.services.a:
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> a
    com.aviary.android.feather.library.services.CDSDatabaseHelper instance -> b
    android.content.Context mContext -> c
    java.lang.Object mLock1 -> d
    com.aviary.android.feather.library.services.CDSDatabaseHelper getInstance(android.content.Context) -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int) -> onDowngrade
    void onOpen(android.database.sqlite.SQLiteDatabase) -> onOpen
    int total(android.database.sqlite.SQLiteDatabase,java.lang.String) -> a
    boolean existsOrLoitering(java.lang.String,int) -> a
    boolean exists(java.lang.String,int,int) -> a
    boolean exists(android.database.sqlite.SQLiteDatabase,java.lang.String,int,int) -> a
    int deletePack(java.lang.String,int) -> b
    int deletePack(android.database.sqlite.SQLiteDatabase,java.lang.String,int) -> a
    int deletePack(java.lang.String) -> a
    int deletePack(android.database.sqlite.SQLiteDatabase,java.lang.String) -> b
    long insertPack(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,int) -> a
    long insertPack(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,int) -> a
    long insertItem(long,java.lang.String,java.lang.String,byte[]) -> a
    long insertItem(android.database.sqlite.SQLiteDatabase,long,java.lang.String,java.lang.String,byte[]) -> a
    com.aviary.android.feather.library.services.CDSPackage load(java.lang.String,int,int) -> b
    byte[] loadEntryContent(long) -> a
    void printDatabase() -> a
    void printDatabase(android.database.sqlite.SQLiteDatabase) -> a
    void initializeDatabase(android.database.sqlite.SQLiteDatabase) -> b
    void installFromRes(android.database.sqlite.SQLiteDatabase,android.content.res.Resources,int,boolean) -> a
    boolean defaultInstalled(android.database.sqlite.SQLiteDatabase) -> c
    void installFromStream(android.database.sqlite.SQLiteDatabase,java.io.InputStream,boolean) -> a
com.aviary.android.feather.library.services.CDSPackage -> com.aviary.android.feather.library.services.b:
    long id -> a
    java.lang.String identifier -> b
    java.lang.String displayName -> c
    java.lang.String minVersion -> d
    int packVersion -> e
    int packType -> f
    java.util.List entries -> g
    long getId() -> a
    java.lang.String getDisplayName() -> b
    int size() -> c
    com.aviary.android.feather.library.services.CDSPackage$CDSEntry getItemAt(int) -> a
    boolean addItem(long,java.lang.String,java.lang.String) -> a
com.aviary.android.feather.library.services.CDSPackage$CDSEntry -> com.aviary.android.feather.library.services.c:
    long id -> a
    long packId -> b
    java.lang.String displayName -> c
    java.lang.String identifier -> d
    long getId() -> a
    java.lang.String getIdentifier() -> b
    java.lang.String getDisplayName() -> c
com.aviary.android.feather.library.services.CDSService -> com.aviary.android.feather.library.services.CDSService:
    com.aviary.android.feather.library.services.CDSDatabaseHelper mHelper -> a
    boolean mCreated -> c
    boolean opened() -> a
    void open() -> c
    boolean uninstall(java.lang.String) -> a
    boolean install(com.aviary.android.feather.library.providers.cds.CDSContentParser) -> a
    boolean installed(java.lang.String,int,int) -> a
    com.aviary.android.feather.library.services.CDSPackage load(java.lang.String,int,int) -> b
    byte[] loadEntryContent(long) -> a
    void throwIfNotOpened() -> g
    void close() -> f
    void dispose() -> b
com.aviary.android.feather.library.services.CDSService$1 -> com.aviary.android.feather.library.services.CDSService$1:
    com.aviary.android.feather.library.services.CDSService this$0 -> a
    com.aviary.android.feather.library.services.CDSService$OnCDSLoadComplete val$listener -> b
    void run() -> run
com.aviary.android.feather.library.services.CDSService$OnCDSLoadComplete -> com.aviary.android.feather.library.services.d:
    void OnLoadComplete() -> a
    void OnLoadError(android.database.sqlite.SQLiteException) -> a
com.aviary.android.feather.library.services.ConfigService -> com.aviary.android.feather.library.services.ConfigService:
    android.content.res.Resources mResources -> a
    int getInteger(int) -> a
    int[] getIntArray(int) -> b
    int[] getSizeArray(int) -> c
    int getColor(int) -> d
    boolean getBoolean(int) -> e
    java.lang.String getString(int) -> f
    int getDimensionPixelSize(int) -> g
    java.lang.String[] getStringArray(int) -> h
    void dispose() -> b
com.aviary.android.feather.library.services.DragControllerService -> com.aviary.android.feather.library.services.DragControllerService:
    int DRAG_ACTION_MOVE -> a
    int DRAG_ACTION_COPY -> c
    android.os.Vibrator mVibrator -> d
    android.graphics.Rect mRectTemp -> e
    int[] mCoordinatesTemp -> f
    float mMotionDownX -> g
    float mMotionDownY -> h
    android.util.DisplayMetrics mDisplayMetrics -> i
    android.view.View mOriginator -> j
    float mTouchOffsetX -> k
    float mTouchOffsetY -> l
    com.aviary.android.feather.library.services.DragControllerService$DragSource mDragSource -> m
    java.lang.Object mDragInfo -> n
    com.aviary.android.feather.library.services.drag.DragView mDragView -> o
    java.util.ArrayList mDropTargets -> p
    com.aviary.android.feather.library.services.DragControllerService$DragListener mListener -> q
    android.os.IBinder mWindowToken -> r
    android.view.View mMoveTarget -> s
    com.aviary.android.feather.library.services.drag.DropTarget mLastDropTarget -> t
    android.view.inputmethod.InputMethodManager mInputMethodManager -> u
    void activate() -> a
    void deactivate() -> c
    boolean active() -> f
    boolean startDrag(android.view.View,com.aviary.android.feather.library.services.DragControllerService$DragSource,java.lang.Object,int,boolean) -> a
    boolean startDrag(android.view.View,android.graphics.Bitmap,int,int,com.aviary.android.feather.library.services.DragControllerService$DragSource,java.lang.Object,int,boolean) -> a
    boolean startDrag(android.graphics.Bitmap,int,int,int,int,int,int,com.aviary.android.feather.library.services.DragControllerService$DragSource,java.lang.Object,int,boolean) -> a
    boolean isDragging() -> g
    android.graphics.Bitmap getViewBitmap(android.view.View) -> b
    boolean dispatchKeyEvent(android.view.KeyEvent) -> a
    void cancelDrag() -> h
    void endDrag() -> i
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> a
    void setMoveTarget(android.view.View) -> a
    boolean dispatchUnhandledMove(android.view.View,int) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> b
    boolean drop(float,float) -> a
    com.aviary.android.feather.library.services.drag.DropTarget findDropTarget(int,int,int[]) -> a
    void recordScreenSize() -> j
    int clamp(int,int,int) -> a
    void setDragListener(com.aviary.android.feather.library.services.DragControllerService$DragListener) -> a
    void addDropTarget(com.aviary.android.feather.library.services.drag.DropTarget) -> a
    void removeDropTarget(com.aviary.android.feather.library.services.drag.DropTarget) -> b
    void dispose() -> b
com.aviary.android.feather.library.services.DragControllerService$DragListener -> com.aviary.android.feather.library.services.e:
    void onDragStart(com.aviary.android.feather.library.services.DragControllerService$DragSource,java.lang.Object,int) -> a
    boolean onDragEnd() -> F
com.aviary.android.feather.library.services.DragControllerService$DragSource -> com.aviary.android.feather.library.services.f:
    void onDropCompleted(android.view.View,boolean) -> a
com.aviary.android.feather.library.services.FileCacheService -> com.aviary.android.feather.library.services.FileCacheService:
    java.lang.Object mCacheLock -> a
    com.aviary.android.feather.library.content.cache.BlobCache mCache -> c
    void close(boolean) -> a
    com.aviary.android.feather.library.services.ImageCacheService$FileData readFileData(java.lang.String) -> a
    java.io.ByteArrayInputStream readStream(java.lang.String) -> b
    void writeStream(java.lang.String,java.io.InputStream) -> a
    void dispose() -> b
    void finalize() -> finalize
    com.aviary.android.feather.library.services.FileCacheService$SimpleCachedHttpUrlConnection createConnection(java.lang.String) -> c
com.aviary.android.feather.library.services.FileCacheService$SimpleCachedHttpUrlConnection -> com.aviary.android.feather.library.services.g:
    java.net.HttpURLConnection mUrlConnection -> a
    java.net.URL mUrl -> b
    java.lang.String mSpec -> c
    java.lang.ref.WeakReference mServiceRef -> d
    java.lang.String getUri() -> a
    java.io.ByteArrayInputStream getInputStream(boolean) -> a
com.aviary.android.feather.library.services.FutureListener -> com.aviary.android.feather.library.services.h:
    void onFutureDone(java.util.concurrent.Future) -> a
com.aviary.android.feather.library.services.HiResService -> com.aviary.android.feather.library.services.HiResService:
    boolean running -> a
    android.os.Looper mServiceLooper -> c
    com.aviary.android.feather.library.services.HiResService$InternalHandler mServiceHandler -> d
    android.os.HandlerThread thread -> e
    void start() -> a
    boolean isRunning() -> c
    void stop() -> f
    void dispose() -> b
    void load(java.lang.String,java.lang.String,android.net.Uri) -> a
    void replace(java.lang.String,java.lang.String,android.net.Uri) -> b
    void execute(java.lang.String,java.lang.String,com.aviary.android.feather.headless.moa.MoaActionList) -> a
    void handleFile(android.content.Context,java.lang.String,java.lang.String,android.net.Uri) -> a
    void access$0(com.aviary.android.feather.library.services.HiResService,android.content.Context,java.lang.String,java.lang.String,android.net.Uri) -> a
com.aviary.android.feather.library.services.HiResService$1 -> com.aviary.android.feather.library.services.HiResService$1:
    com.aviary.android.feather.library.services.HiResService this$0 -> a
    android.net.Uri val$uri -> b
    java.lang.String val$session -> c
    java.lang.String val$apiKey -> d
    void run() -> run
com.aviary.android.feather.library.services.HiResService$2 -> com.aviary.android.feather.library.services.HiResService$2:
    com.aviary.android.feather.library.services.HiResService this$0 -> a
    java.lang.String val$session -> b
    java.lang.String val$apiKey -> c
    android.net.Uri val$uri -> d
    void run() -> run
com.aviary.android.feather.library.services.HiResService$3 -> com.aviary.android.feather.library.services.HiResService$3:
    com.aviary.android.feather.library.services.HiResService this$0 -> a
    java.lang.String val$session -> b
    com.aviary.android.feather.headless.moa.MoaActionList val$actions -> c
    void run() -> run
com.aviary.android.feather.library.services.HiResService$InternalHandler -> com.aviary.android.feather.library.services.i:
    com.aviary.android.feather.library.services.HiResService this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.library.services.IAviaryController -> com.aviary.android.feather.library.services.IAviaryController:
    java.lang.Object getService(java.lang.Class) -> a
    android.content.Context getBaseContext() -> c
    android.app.Activity getBaseActivity() -> d
    android.graphics.Matrix getCurrentImageViewMatrix() -> h
    void cancel() -> o
    void setToolbarTitle(int) -> a
    void setToolbarTitle(java.lang.CharSequence) -> a
    void restoreToolbarTitle() -> v
    void setPanelApplyStatusEnabled(boolean) -> b
    void downloadPlugin(java.lang.String,int) -> a
    void searchPlugin(int) -> b
    com.aviary.android.feather.library.services.drag.DragLayer getDragLayer() -> w
com.aviary.android.feather.library.services.ImageCacheService -> com.aviary.android.feather.library.services.ImageCacheService:
    boolean LOG_ENABLED -> a
    java.lang.Object mCacheLock -> c
    com.aviary.android.feather.library.content.cache.BlobCache mCache -> d
    void close(boolean) -> a
    android.graphics.Bitmap getBitmap(java.lang.String,android.graphics.BitmapFactory$Options) -> a
    boolean putBitmap(java.lang.String,android.graphics.Bitmap) -> a
    boolean putBitmap(java.lang.String,java.lang.String,android.graphics.Bitmap) -> a
    android.graphics.Bitmap getBitmap(java.lang.String,java.lang.String,android.graphics.BitmapFactory$Options) -> a
    com.aviary.android.feather.library.services.ImageCacheService$FileData getImageData(java.lang.String,java.lang.String) -> a
    void putImageData(java.lang.String,java.lang.String,byte[]) -> a
    byte[] makeKey(java.lang.String,java.lang.String) -> b
    boolean isSameKey(byte[],byte[]) -> a
    void dispose() -> b
    void finalize() -> finalize
    com.aviary.android.feather.library.services.ImageCacheService$SimpleCachedRemoteBitmap requestRemoteBitmap(java.lang.String) -> a
    boolean access$0() -> a
com.aviary.android.feather.library.services.ImageCacheService$FileData -> com.aviary.android.feather.library.services.j:
    byte[] mData -> a
    int mOffset -> b
    int size() -> a
    int offset() -> b
    byte[] data() -> c
com.aviary.android.feather.library.services.ImageCacheService$SimpleCachedRemoteBitmap -> com.aviary.android.feather.library.services.k:
    java.net.URL mUrl -> a
    java.lang.String mSpec -> b
    java.lang.ref.WeakReference mServiceRef -> c
    android.graphics.Bitmap getBitmap(android.graphics.BitmapFactory$Options) -> a
com.aviary.android.feather.library.services.LocalDataService -> com.aviary.android.feather.library.services.LocalDataService:
    java.lang.String sourceImagePath -> a
    android.net.Uri sourceImageUri -> c
    android.net.Uri destImageUri -> d
    android.graphics.Bitmap$CompressFormat outputFormat -> e
    int[] sourceImageSize -> f
    android.os.Bundle exifBundle -> g
    android.content.Intent mOriginalIntent -> h
    java.lang.Boolean mEnableFastPreview -> i
    void dispose() -> b
    void setOriginalIntent(android.content.Intent) -> a
    void remove(java.lang.String) -> a
    void setSourceImageSize(int[]) -> a
    java.lang.String getSourceImagePath() -> a
    void setSourceImagePath(java.lang.String) -> b
    android.net.Uri getSourceImageUri() -> c
    void setSourceImageUri(android.net.Uri) -> a
    android.net.Uri getDestImageUri() -> f
    void setDestImageUri(android.net.Uri) -> b
    android.graphics.Bitmap$CompressFormat getOutputFormat() -> g
    void setOutputFormat(android.graphics.Bitmap$CompressFormat) -> a
    void setOriginalExifBundle(android.os.Bundle) -> a
    android.os.Bundle getOriginalExifBundle() -> h
    java.lang.Object getIntentValue(java.lang.String,java.lang.Object) -> a
    boolean getIntentContainsKey(java.lang.String) -> c
    boolean getExternalPacksEnabled(int) -> a
    boolean getExternalPacksEnabled() -> i
    boolean getFastPreviewEnabled() -> j
com.aviary.android.feather.library.services.PluginService -> com.aviary.android.feather.library.services.PluginService:
    java.lang.String CONTENT_BASE_URL -> d
    java.lang.String CONTENT_DEFAULT_URL -> a
    java.lang.String CONTENT_JSON_URL -> c
    java.lang.Object mPluginsLock -> e
    java.lang.Object mExternalPluginsLock -> f
    boolean mUpdated -> g
    boolean mExternalUpdated -> h
    java.util.Map mFilters -> i
    java.util.Map mStickers -> j
    java.util.Map mBorders -> k
    java.util.List mInstalledPlugins -> l
    java.util.ArrayList mAllExternalPlugins -> m
    long mExternalUpdateTime -> n
    java.util.ArrayList mAvailableExternalPlugins -> o
    java.util.List mListeners -> p
    java.util.List mExternalUpdateListeners -> q
    int[] $SWITCH_TABLE$com$aviary$android$feather$headless$moa$Moa$CPUArchAbi -> r
    boolean isUpdated() -> a
    boolean isExternalUpdated() -> c
    com.aviary.android.feather.library.plugins.FeatherInternalPack[] getInstalled(android.content.Context,int) -> a
    java.util.ArrayList getOriginalExternalPluginList() -> h
    com.aviary.android.feather.library.plugins.FeatherExternalPack[] getAvailable(int) -> a
    com.aviary.android.feather.library.plugins.FeatherExternalPack[] getAvailableByType(java.util.ArrayList,int) -> a
    void registerOnUpdateListener(com.aviary.android.feather.library.services.PluginService$OnUpdateListener) -> a
    void registerOnExternalUpdateListener(com.aviary.android.feather.library.services.PluginService$OnExternalUpdateListener) -> a
    void removeOnUpdateListener(com.aviary.android.feather.library.services.PluginService$OnUpdateListener) -> b
    void removeOnExternalUpdateListener(com.aviary.android.feather.library.services.PluginService$OnExternalUpdateListener) -> b
    void dispatchUpdate(android.os.Bundle) -> b
    void dispatchExternalUpdate() -> i
    void updateExternalPackages(android.os.Bundle) -> a
    void update(java.util.Map,android.os.Bundle) -> a
    void handlePackage(com.aviary.android.feather.library.plugins.ApplicationType) -> a
    void merge() -> j
    boolean isValidExternalPlugin(com.aviary.android.feather.library.plugins.ExternalType,long) -> a
    boolean install(android.content.Context,java.lang.String,int,int) -> a
    boolean uninstall(android.content.Context,java.lang.String) -> a
    com.aviary.android.feather.library.services.CDSPackage load(java.lang.String,int,int) -> a
    boolean installed(java.lang.String,int,int) -> b
    int checkLibraryVersion(com.aviary.android.feather.headless.moa.moalite.MoaLitePack) -> a
    void dispose() -> b
    java.lang.String getCDSContentUrl() -> f
    int[] $SWITCH_TABLE$com$aviary$android$feather$headless$moa$Moa$CPUArchAbi() -> g
com.aviary.android.feather.library.services.PluginService$OnExternalUpdateListener -> com.aviary.android.feather.library.services.l:
    void onExternalUpdate(com.aviary.android.feather.library.services.PluginService) -> a
com.aviary.android.feather.library.services.PluginService$OnUpdateListener -> com.aviary.android.feather.library.services.m:
    void onUpdate(com.aviary.android.feather.library.services.PluginService,android.os.Bundle) -> a
com.aviary.android.feather.library.services.PluginService$PluginException -> com.aviary.android.feather.library.services.n:
    int code -> a
    int getErrorCode() -> a
com.aviary.android.feather.library.services.PluginService$StickerType -> com.aviary.android.feather.library.services.o:
    com.aviary.android.feather.library.services.PluginService$StickerType Small -> a
    com.aviary.android.feather.library.services.PluginService$StickerType Large -> b
    com.aviary.android.feather.library.services.PluginService$StickerType Preview -> c
    com.aviary.android.feather.library.services.PluginService$StickerType[] ENUM$VALUES -> d
    com.aviary.android.feather.library.services.PluginService$StickerType[] values() -> values
    com.aviary.android.feather.library.services.PluginService$StickerType valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.services.PreferenceService -> com.aviary.android.feather.library.services.PreferenceService:
    android.content.SharedPreferences mPrefs -> a
    boolean containsValue(java.lang.String) -> a
    int getInt(java.lang.String,int) -> a
    boolean putInt(java.lang.String,int) -> b
    boolean putBoolean(java.lang.String,boolean) -> a
    boolean isStandalone() -> a
    boolean getStandaloneBoolean(java.lang.String,boolean) -> b
    void dispose() -> b
com.aviary.android.feather.library.services.ServiceLoader -> com.aviary.android.feather.library.services.ServiceLoader:
    java.util.HashMap mMap -> a
    java.util.HashMap mServices -> b
    com.aviary.android.feather.library.services.IAviaryController mContext -> c
    com.aviary.android.feather.library.services.BaseContextService getService(java.lang.Class) -> a
    void register(java.lang.Class) -> b
    void register(com.aviary.android.feather.library.services.BaseContextService) -> a
    com.aviary.android.feather.library.services.BaseContextService get(java.lang.String,com.aviary.android.feather.library.services.IAviaryController) -> a
    void dispose() -> a
com.aviary.android.feather.library.services.SettingsFileManager -> com.aviary.android.feather.library.services.p:
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> a
    java.lang.String log_tag -> b
    com.aviary.android.feather.library.services.SettingsFileManager$SettingsFileAccess file -> c
    java.util.Map settings -> d
    java.lang.String filename -> e
    boolean persistent -> f
    java.lang.Object safeLock -> g
    boolean loaded() -> a
    void reload(android.content.Context) -> a
    void printMap(java.util.Map) -> c
    java.lang.String getValue(java.lang.String) -> d
    void putValue(java.lang.String,java.lang.String) -> c
    void putAll(java.util.Map) -> a
    java.lang.String getString(java.lang.String,java.lang.String) -> a
    boolean containsKey(java.lang.String) -> a
    long getLong(java.lang.String) -> b
    void putString(java.lang.String,java.lang.String) -> b
    void remove(java.lang.String) -> c
    void flush(android.content.Context) -> b
    void close() -> b
    com.aviary.android.feather.library.log.LoggerFactory$Logger access$0() -> c
    void access$1(java.util.Map) -> b
com.aviary.android.feather.library.services.SettingsFileManager$SettingsFileAccess -> com.aviary.android.feather.library.services.q:
    java.lang.String filename -> a
    long max_age -> b
    java.lang.String log_tag -> c
    java.io.RandomAccessFile mFile -> d
    java.io.RandomAccessFile open() -> c
    java.util.Map load() -> a
    void close() -> b
    void save(java.util.Map) -> a
    java.util.Map load(int) -> a
    void save(int,java.util.Map) -> a
    boolean getExternalStorageAvailable() -> d
com.aviary.android.feather.library.services.ThreadPoolService -> com.aviary.android.feather.library.services.ThreadPoolService:
    java.util.concurrent.ThreadPoolExecutor mExecutor -> a
    java.util.concurrent.Future submit(com.aviary.android.feather.library.services.ThreadPoolService$BackgroundCallable,com.aviary.android.feather.library.services.FutureListener,java.lang.Object) -> a
    void dispose() -> b
com.aviary.android.feather.library.services.ThreadPoolService$BackgroundCallable -> com.aviary.android.feather.library.services.r:
    java.lang.Object call(com.aviary.android.feather.library.services.IAviaryController,java.lang.Object) -> a
com.aviary.android.feather.library.services.ThreadPoolService$LowPriorityThreadFactory -> com.aviary.android.feather.library.services.s:
    int mPriority -> b
    java.util.concurrent.atomic.AtomicInteger mNumber -> c
    java.lang.String mName -> d
    com.aviary.android.feather.library.services.ThreadPoolService this$0 -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
    int access$0(com.aviary.android.feather.library.services.ThreadPoolService$LowPriorityThreadFactory) -> a
com.aviary.android.feather.library.services.ThreadPoolService$LowPriorityThreadFactory$1 -> com.aviary.android.feather.library.services.ThreadPoolService$LowPriorityThreadFactory$1:
    com.aviary.android.feather.library.services.ThreadPoolService$LowPriorityThreadFactory this$1 -> a
    void run() -> run
com.aviary.android.feather.library.services.ThreadPoolService$Worker -> com.aviary.android.feather.library.services.ThreadPoolService$Worker:
    com.aviary.android.feather.library.services.ThreadPoolService$BackgroundCallable mTask -> a
    com.aviary.android.feather.library.services.FutureListener mListener -> b
    java.lang.Object mResult -> c
    java.lang.Object mParams -> d
    boolean mIsDone -> e
    boolean mIsCancelled -> f
    com.aviary.android.feather.library.services.ThreadPoolService this$0 -> g
    void run() -> run
    boolean cancel(boolean) -> cancel
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    boolean isCancelled() -> isCancelled
    boolean isDone() -> isDone
com.aviary.android.feather.library.services.drag.DragLayer -> com.aviary.android.feather.library.services.drag.DragLayer:
    com.aviary.android.feather.library.services.DragControllerService mDragController -> a
    void setDragController(com.aviary.android.feather.library.services.DragControllerService) -> setDragController
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean dispatchUnhandledMove(android.view.View,int) -> dispatchUnhandledMove
com.aviary.android.feather.library.services.drag.DragView -> com.aviary.android.feather.library.services.drag.a:
    android.graphics.Bitmap mBitmap -> a
    android.graphics.Paint mPaint -> b
    android.graphics.Paint mDefaultPaint -> c
    int mRegistrationX -> d
    int mRegistrationY -> e
    com.aviary.android.feather.library.utils.EasingManager mTween -> f
    float mScale -> g
    float mAnimationScale -> h
    android.view.WindowManager$LayoutParams mLayoutParams -> i
    android.view.WindowManager mWindowManager -> j
    int mTextureWidth -> k
    int mTextureHeight -> l
    float getScaleFactor() -> getScaleFactor
    void onMeasure(int,int) -> onMeasure
    void onDraw(android.graphics.Canvas) -> onDraw
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onEasingValueChanged(double,double) -> a
    void onEasingStarted(double) -> a
    void onEasingFinished(double) -> b
    void setPaint(android.graphics.Paint) -> setPaint
    void show(android.os.IBinder,int,int,boolean) -> a
    void move(int,int) -> a
    void remove(boolean) -> a
    float access$0(com.aviary.android.feather.library.services.drag.DragView) -> a
    void access$1(com.aviary.android.feather.library.services.drag.DragView,float) -> a
    android.graphics.Paint access$2(com.aviary.android.feather.library.services.drag.DragView) -> b
    android.view.WindowManager access$3(com.aviary.android.feather.library.services.drag.DragView) -> c
com.aviary.android.feather.library.services.drag.DragView$1 -> com.aviary.android.feather.library.services.drag.b:
    com.aviary.android.feather.library.services.drag.DragView this$0 -> a
    android.view.View val$view -> b
    void onEasingValueChanged(double,double) -> a
    void onEasingStarted(double) -> a
    void onEasingFinished(double) -> b
com.aviary.android.feather.library.services.drag.DragView$2 -> com.aviary.android.feather.library.services.drag.DragView$2:
    com.aviary.android.feather.library.services.drag.DragView this$0 -> a
    android.view.View val$view -> b
    void run() -> run
com.aviary.android.feather.library.services.drag.DropTarget -> com.aviary.android.feather.library.services.drag.c:
    void onDrop(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> a
    void onDragEnter(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> b
    void onDragOver(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> c
    void onDragExit(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> d
    boolean acceptDrop(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> e
    void getHitRect(android.graphics.Rect) -> getHitRect
    void getLocationOnScreen(int[]) -> getLocationOnScreen
    int getLeft() -> getLeft
    int getTop() -> getTop
com.aviary.android.feather.library.services.drag.DropTarget$DropTargetListener -> com.aviary.android.feather.library.services.drag.d:
    boolean acceptDrop(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> a
    void onDrop(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> b
com.aviary.android.feather.library.threading.Future -> com.aviary.android.feather.library.threading.a:
com.aviary.android.feather.library.threading.FutureListener -> com.aviary.android.feather.library.threading.b:
    void onFutureDone(com.aviary.android.feather.library.threading.Future) -> a
com.aviary.android.feather.library.threading.PriorityThreadFactory -> com.aviary.android.feather.library.threading.c:
    int mPriority -> a
    java.util.concurrent.atomic.AtomicInteger mNumber -> b
    java.lang.String mName -> c
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
    int access$0(com.aviary.android.feather.library.threading.PriorityThreadFactory) -> a
com.aviary.android.feather.library.threading.PriorityThreadFactory$1 -> com.aviary.android.feather.library.threading.PriorityThreadFactory$1:
    com.aviary.android.feather.library.threading.PriorityThreadFactory this$0 -> a
    void run() -> run
com.aviary.android.feather.library.threading.ThreadMediaPool -> com.aviary.android.feather.library.threading.ThreadMediaPool:
    com.aviary.android.feather.library.threading.ThreadMediaPool$ResourceCounter mCpuCounter -> a
    com.aviary.android.feather.library.threading.ThreadMediaPool$ResourceCounter mNetworkCounter -> b
com.aviary.android.feather.library.threading.ThreadMediaPool$1 -> com.aviary.android.feather.library.threading.ThreadMediaPool$1:
    com.aviary.android.feather.library.threading.ThreadMediaPool$Job val$job -> e
    java.lang.Object[] val$params -> f
    void run() -> run
com.aviary.android.feather.library.threading.ThreadMediaPool$Job -> com.aviary.android.feather.library.threading.d:
    java.lang.Object run(com.aviary.android.feather.library.threading.ThreadMediaPool$JobContext,java.lang.Object[]) -> a
com.aviary.android.feather.library.threading.ThreadMediaPool$JobContext -> com.aviary.android.feather.library.threading.e:
com.aviary.android.feather.library.threading.ThreadMediaPool$ResourceCounter -> com.aviary.android.feather.library.threading.f:
    int value -> a
com.aviary.android.feather.library.threading.ThreadMediaPool$Worker -> com.aviary.android.feather.library.threading.ThreadMediaPool$Worker:
    java.lang.ref.SoftReference mContextRef -> e
    com.aviary.android.feather.library.threading.FutureListener mListener -> a
    com.aviary.android.feather.library.threading.ThreadMediaPool$ResourceCounter mWaitOnResource -> f
    boolean mIsCancelled -> g
    boolean mIsDone -> b
    java.lang.Object mResult -> c
    int mMode -> d
    void fireOnDoneEvent() -> a
    void setResult(java.lang.Object) -> a
    void setIsDone() -> b
    boolean setMode(int) -> a
    com.aviary.android.feather.library.threading.ThreadMediaPool$ResourceCounter modeToCounter(int) -> b
    boolean acquireResource(com.aviary.android.feather.library.threading.ThreadMediaPool$ResourceCounter) -> a
    void releaseResource(com.aviary.android.feather.library.threading.ThreadMediaPool$ResourceCounter) -> b
com.aviary.android.feather.library.tracking.AbstractTracker -> com.aviary.android.feather.library.tracking.AbstractTracker:
    java.lang.String mCallingAppName -> mCallingAppName
    java.lang.String mAppName -> mAppName
    java.lang.String mSdkVersion -> mSdkVersion
    java.lang.String mABGroup -> mABGroup
    java.lang.String mApiKey -> mApiKey
    void setABGroup(java.lang.String) -> setABGroup
    void setExternalAppName(java.lang.String) -> setExternalAppName
    boolean recordTag(java.lang.String,java.util.HashMap) -> recordTag
    void open() -> open
    void upload() -> upload
    boolean close() -> close
com.aviary.android.feather.library.tracking.Tracker -> com.aviary.android.feather.library.tracking.a:
    com.aviary.android.feather.library.tracking.AbstractTracker mInstance -> a
    void setABGroup(java.lang.String) -> a
    boolean recordTag(java.lang.String) -> b
    boolean recordTag(java.lang.String,java.util.HashMap) -> a
    boolean create(android.content.Context,java.lang.String,java.lang.String,java.lang.String) -> a
    void open() -> a
    void upload() -> b
    boolean close() -> c
    void initializeTracking(android.content.Context,java.lang.String,int,boolean) -> a
com.aviary.android.feather.library.tracking.Tracker$SaveTrackingTask -> com.aviary.android.feather.library.tracking.b:
    android.content.Context context -> a
    java.lang.Void doInBackground(java.util.Map[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aviary.android.feather.library.utils.BitmapUtils -> com.aviary.android.feather.library.utils.a:
    android.graphics.PorterDuffColorFilter mWhiteMultiplyFilter -> a
    android.graphics.Bitmap copy(android.graphics.Bitmap,android.graphics.Bitmap$Config) -> a
    void copy(android.graphics.Bitmap,android.graphics.Bitmap) -> a
    android.graphics.Bitmap resizeBitmap(android.graphics.Bitmap,int,int) -> a
    android.graphics.Bitmap resizeBitmap(android.graphics.Bitmap,int,int,int) -> a
    byte[] compressBitmap(android.graphics.Bitmap,android.graphics.Bitmap$CompressFormat,int) -> a
    boolean compareBySize(android.graphics.Bitmap,android.graphics.Bitmap) -> b
    android.graphics.Bitmap flattenDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,float,float) -> a
com.aviary.android.feather.library.utils.DecodeUtils -> com.aviary.android.feather.library.utils.b:
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> a
    android.graphics.Bitmap decode(android.content.Context,android.net.Uri,int,int,com.aviary.android.feather.library.utils.ImageLoader$ImageSizes) -> a
    android.graphics.Bitmap decodeBitmap(android.content.Context,android.net.Uri,android.graphics.BitmapFactory$Options,int,int,int,int) -> a
    java.io.InputStream openInputStream(android.content.Context,android.net.Uri) -> a
    boolean decodeImageBounds(java.io.InputStream,int[]) -> a
    int computeSampleSize(int,int,int,int,int,com.aviary.android.feather.library.utils.ImageLoader$ImageSizes) -> a
    java.io.InputStream openFileInputStream(java.lang.String) -> a
    java.io.InputStream openContentInputStream(android.content.Context,android.net.Uri) -> b
    java.io.InputStream openRemoteInputStream(android.net.Uri) -> a
    android.graphics.BitmapFactory$Options getDefaultOptions() -> a
com.aviary.android.feather.library.utils.EasingManager -> com.aviary.android.feather.library.utils.EasingManager:
    android.os.Handler mHandler -> a
    it.sephiroth.android.library.imagezoom.easing.Easing mEasing -> b
    java.lang.reflect.Method mMethod -> c
    boolean mRunning -> d
    long mBase -> e
    int mDuration -> f
    double mStartValue -> g
    double mEndValue -> h
    double mValue -> i
    boolean mInverted -> j
    com.aviary.android.feather.library.utils.EasingManager$EasingCallback mEasingCallback -> k
    java.lang.String mToken -> l
    com.aviary.android.feather.library.utils.EasingManager$Ticker mTicker -> m
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$utils$EasingManager$EaseType -> n
    void start(java.lang.Class,com.aviary.android.feather.library.utils.EasingManager$EaseType,double,double,int) -> a
    void start(java.lang.Class,com.aviary.android.feather.library.utils.EasingManager$EaseType,double,double,int,long) -> a
    void stop() -> a
    it.sephiroth.android.library.imagezoom.easing.Easing createInstance(java.lang.Class) -> a
    java.lang.reflect.Method getEasingMethod(it.sephiroth.android.library.imagezoom.easing.Easing,com.aviary.android.feather.library.utils.EasingManager$EaseType) -> a
    java.lang.String getMethodName(com.aviary.android.feather.library.utils.EasingManager$EaseType) -> a
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$utils$EasingManager$EaseType() -> b
com.aviary.android.feather.library.utils.EasingManager$EaseType -> com.aviary.android.feather.library.utils.c:
    com.aviary.android.feather.library.utils.EasingManager$EaseType EaseIn -> a
    com.aviary.android.feather.library.utils.EasingManager$EaseType EaseOut -> b
    com.aviary.android.feather.library.utils.EasingManager$EaseType EaseInOut -> c
    com.aviary.android.feather.library.utils.EasingManager$EaseType EaseNone -> d
    com.aviary.android.feather.library.utils.EasingManager$EaseType[] ENUM$VALUES -> e
    com.aviary.android.feather.library.utils.EasingManager$EaseType[] values() -> values
    com.aviary.android.feather.library.utils.EasingManager$EaseType valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.utils.EasingManager$EasingCallback -> com.aviary.android.feather.library.utils.d:
    void onEasingValueChanged(double,double) -> a
    void onEasingStarted(double) -> a
    void onEasingFinished(double) -> b
com.aviary.android.feather.library.utils.EasingManager$Ticker -> com.aviary.android.feather.library.utils.EasingManager$Ticker:
    com.aviary.android.feather.library.utils.EasingManager this$0 -> a
    void run() -> run
com.aviary.android.feather.library.utils.EasingManager$TickerStart -> com.aviary.android.feather.library.utils.EasingManager$TickerStart:
    double mValue -> a
    com.aviary.android.feather.library.utils.EasingManager this$0 -> b
    void run() -> run
com.aviary.android.feather.library.utils.ExifUtils -> com.aviary.android.feather.library.utils.e:
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> a
    int getExifOrientation(java.lang.String) -> a
    int getExifOrientation(android.content.Context,android.net.Uri) -> a
com.aviary.android.feather.library.utils.ImageLoader -> com.aviary.android.feather.library.utils.f:
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> a
    int computeSampleSize(java.io.InputStream,double,double,int,com.aviary.android.feather.library.utils.ImageLoader$ImageSizes,android.graphics.BitmapFactory$Options) -> a
    java.io.InputStream getStream(com.aviary.android.feather.library.plugins.PluginFactory$InternalPlugin,java.lang.String,com.aviary.android.feather.library.services.PluginService$StickerType) -> a
    android.graphics.Bitmap getPluginItemBitmap(com.aviary.android.feather.library.plugins.PluginFactory$InternalPlugin,java.lang.String,com.aviary.android.feather.library.services.PluginService$StickerType,int,int) -> a
com.aviary.android.feather.library.utils.ImageLoader$ImageSizes -> com.aviary.android.feather.library.utils.g:
    java.lang.String originalSize -> a
    java.lang.String newSize -> b
    java.lang.String bucketSize -> c
    int[] realsize -> d
    void setBucketSize(java.lang.String) -> a
    void computeBucketSize(int) -> a
    void setRealSize(int,int) -> a
    int[] getRealSize() -> a
    java.lang.String getBucketSize() -> b
    void setOriginalSize(java.lang.String) -> b
    java.lang.String getOriginalSize() -> c
    void setNewSize(java.lang.String) -> c
    java.lang.String getNewSize() -> d
com.aviary.android.feather.library.utils.MatrixUtils -> com.aviary.android.feather.library.utils.h:
    void mapPoints(android.graphics.Matrix,float[]) -> a
    float[] getScale(android.graphics.Matrix) -> a
com.aviary.android.feather.library.utils.PackageManagerUtils -> com.aviary.android.feather.library.utils.i:
    android.content.pm.PackageInfo mPackageInfo -> a
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> b
    android.content.pm.PackageInfo getPackageInfo(android.content.Context) -> a
    java.util.Map fetchInstalledPlugins(android.content.Context) -> b
    java.util.List fetchInstalledApplications(android.content.Context) -> c
    int getPackageInfo(android.content.Context,java.lang.String,int[],int[]) -> a
    boolean validPackage(android.content.Context,java.lang.String,int[],int[],int[]) -> a
    boolean validPackageName(java.lang.String) -> a
    android.content.pm.PackageInfo getPackageInfo(android.content.Context,int) -> a
    android.content.pm.PackageInfo getPackageInfo(android.content.Context,java.lang.String,int) -> a
    android.content.pm.ApplicationInfo getApplicationInfo(android.content.Context,java.lang.String) -> a
    boolean isStandalone(android.content.Context) -> d
com.aviary.android.feather.library.utils.ReflectionUtils -> com.aviary.android.feather.library.utils.j:
    java.lang.Object helper(java.lang.Object,java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
    java.lang.Object invokeStaticMethod(java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
    java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
    java.lang.Object invokeMethod(java.lang.Object,java.lang.String) -> a
    java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> a
    java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String) -> a
com.aviary.android.feather.library.utils.ReflectionUtils$ReflectionException -> com.aviary.android.feather.library.utils.k:
com.aviary.android.feather.library.utils.ScreenUtils -> com.aviary.android.feather.library.utils.l:
    double getScreenInches(android.content.Context) -> a
    boolean isTablet(android.content.Context) -> b
com.aviary.android.feather.library.utils.SystemUtils -> com.aviary.android.feather.library.utils.m:
    java.util.HashMap mValues -> a
    int mCpuKiloHz -> b
    double mMaxMemory -> c
    void init() -> g
    void parseLine(java.lang.String) -> a
    java.lang.String getValue(java.lang.String) -> b
    float getCpuSpeed() -> a
    boolean isHoneyComb() -> b
    boolean isIceCreamSandwich() -> c
    int getCpuFrequencyMax() -> d
    int getCpuMhz() -> e
    boolean isUIThread(android.content.Context) -> a
    void throwIfNonUiThread(android.content.Context) -> b
    void getRuntimeMemoryInfo(double[]) -> a
    double getApplicationTotalMemory() -> f
    void trySleep(long) -> a
com.aviary.android.feather.library.utils.UserTask -> com.aviary.android.feather.library.utils.n:
    java.util.concurrent.BlockingQueue sWorkQueue -> a
    java.util.concurrent.ThreadFactory sThreadFactory -> b
    java.util.concurrent.ThreadPoolExecutor sExecutor -> c
    com.aviary.android.feather.library.utils.UserTask$InternalHandler sHandler -> d
    com.aviary.android.feather.library.utils.UserTask$WorkerRunnable mWorker -> e
    java.util.concurrent.FutureTask mFuture -> f
    com.aviary.android.feather.library.utils.UserTask$Status mStatus -> g
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$utils$UserTask$Status -> h
    java.lang.Object doInBackground(java.lang.Object[]) -> a
    void onPreExecute() -> a
    void onPostExecute(java.lang.Object) -> a
    void onProgressUpdate(java.lang.Object[]) -> b
    void onCancelled() -> d
    boolean isCancelled() -> e
    boolean cancel(boolean) -> a
    com.aviary.android.feather.library.utils.UserTask execute(java.lang.Object[]) -> c
    void publishProgress(java.lang.Object[]) -> d
    void finish(java.lang.Object) -> b
    void access$0(com.aviary.android.feather.library.utils.UserTask,java.lang.Object) -> a
    com.aviary.android.feather.library.utils.UserTask$InternalHandler access$1() -> f
    int[] $SWITCH_TABLE$com$aviary$android$feather$library$utils$UserTask$Status() -> g
com.aviary.android.feather.library.utils.UserTask$1 -> com.aviary.android.feather.library.utils.o:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.aviary.android.feather.library.utils.UserTask$2 -> com.aviary.android.feather.library.utils.p:
    com.aviary.android.feather.library.utils.UserTask this$0 -> a
    java.lang.Object call() -> call
com.aviary.android.feather.library.utils.UserTask$3 -> com.aviary.android.feather.library.utils.UserTask$3:
    com.aviary.android.feather.library.utils.UserTask this$0 -> a
    void done() -> done
com.aviary.android.feather.library.utils.UserTask$InternalHandler -> com.aviary.android.feather.library.utils.q:
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.library.utils.UserTask$Status -> com.aviary.android.feather.library.utils.r:
    com.aviary.android.feather.library.utils.UserTask$Status PENDING -> a
    com.aviary.android.feather.library.utils.UserTask$Status RUNNING -> b
    com.aviary.android.feather.library.utils.UserTask$Status FINISHED -> c
    com.aviary.android.feather.library.utils.UserTask$Status[] ENUM$VALUES -> d
    com.aviary.android.feather.library.utils.UserTask$Status[] values() -> values
    com.aviary.android.feather.library.utils.UserTask$Status valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.library.utils.UserTask$UserTaskResult -> com.aviary.android.feather.library.utils.s:
    com.aviary.android.feather.library.utils.UserTask mTask -> a
    java.lang.Object[] mData -> b
com.aviary.android.feather.library.utils.UserTask$WorkerRunnable -> com.aviary.android.feather.library.utils.t:
    java.lang.Object[] mParams -> b
com.aviary.android.feather.opengl.AviaryGLSurfaceView -> com.aviary.android.feather.opengl.AviaryGLSurfaceView:
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> a
    android.os.Handler mUIHandler -> b
    java.lang.Object mNativeLock -> c
    long mPtr -> d
    com.aviary.android.feather.opengl.AviaryGLSurfaceView$GLRendererListener mGlRendererListener -> e
    long init(android.content.Context,android.util.AttributeSet) -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    void initializeOpenGL() -> b
    void setRenderbufferSize(boolean,int,int) -> a
    com.aviary.android.feather.library.threading.Future executeEffect(java.lang.String,android.graphics.Bitmap,boolean,com.aviary.android.feather.library.threading.FutureListener) -> a
    com.aviary.android.feather.library.threading.Future writeBitmap(android.graphics.Bitmap,com.aviary.android.feather.library.threading.FutureListener) -> a
    long nativeCreate() -> c
    void nativeDispose() -> d
    boolean nativeInitialize() -> e
    boolean nativeSetRenderbufferSize(int,int) -> a
    boolean nativeRender(android.graphics.Bitmap,java.lang.String) -> a
    boolean nativeWriteBitmap(android.graphics.Bitmap) -> a
    com.aviary.android.feather.library.threading.Future submit(com.aviary.android.feather.library.threading.ThreadMediaPool$Job,com.aviary.android.feather.library.threading.FutureListener,java.lang.Object[]) -> a
    long n_create() -> n_create
    boolean n_dispose(long) -> n_dispose
    boolean n_initialize(long) -> n_initialize
    boolean n_setRenderbufferSize(long,int,int) -> n_setRenderbufferSize
    boolean n_render(long,android.graphics.Bitmap,java.lang.String) -> n_render
    boolean n_writeCurrentBitmap(long,android.graphics.Bitmap) -> n_writeCurrentBitmap
    void setOnGlRendererListener(com.aviary.android.feather.opengl.AviaryGLSurfaceView$GLRendererListener) -> setOnGlRendererListener
    void fireOnSurfaceCreated() -> f
    void fireOnSurfaceChanged(boolean,int,int) -> b
    com.aviary.android.feather.library.log.LoggerFactory$Logger access$0() -> a
    boolean access$1(com.aviary.android.feather.opengl.AviaryGLSurfaceView,android.graphics.Bitmap,java.lang.String) -> a
    boolean access$2(com.aviary.android.feather.opengl.AviaryGLSurfaceView,android.graphics.Bitmap) -> a
    boolean access$3(com.aviary.android.feather.opengl.AviaryGLSurfaceView) -> a
    boolean access$4(com.aviary.android.feather.opengl.AviaryGLSurfaceView,int,int) -> a
    void access$5(com.aviary.android.feather.opengl.AviaryGLSurfaceView,boolean,int,int) -> a
    void access$6(com.aviary.android.feather.opengl.AviaryGLSurfaceView) -> b
    void access$7(com.aviary.android.feather.opengl.AviaryGLSurfaceView) -> c
    void access$8(com.aviary.android.feather.opengl.AviaryGLSurfaceView,boolean,int,int) -> b
    com.aviary.android.feather.opengl.AviaryGLSurfaceView$GLRendererListener access$9(com.aviary.android.feather.opengl.AviaryGLSurfaceView) -> d
com.aviary.android.feather.opengl.AviaryGLSurfaceView$1 -> com.aviary.android.feather.opengl.a:
    com.aviary.android.feather.opengl.AviaryGLSurfaceView this$0 -> a
    void onFutureDone(com.aviary.android.feather.library.threading.Future) -> a
com.aviary.android.feather.opengl.AviaryGLSurfaceView$2 -> com.aviary.android.feather.opengl.b:
    com.aviary.android.feather.opengl.AviaryGLSurfaceView this$0 -> a
    boolean val$changed -> b
    int val$width -> c
    int val$height -> d
    void onFutureDone(com.aviary.android.feather.library.threading.Future) -> a
com.aviary.android.feather.opengl.AviaryGLSurfaceView$3 -> com.aviary.android.feather.opengl.AviaryGLSurfaceView$3:
    com.aviary.android.feather.opengl.AviaryGLSurfaceView this$0 -> e
    com.aviary.android.feather.library.threading.ThreadMediaPool$Job val$job -> f
    java.lang.Object[] val$params -> g
    void run() -> run
com.aviary.android.feather.opengl.AviaryGLSurfaceView$4 -> com.aviary.android.feather.opengl.AviaryGLSurfaceView$4:
    com.aviary.android.feather.opengl.AviaryGLSurfaceView this$0 -> a
    boolean val$changed -> b
    int val$width -> c
    int val$height -> d
    void run() -> run
com.aviary.android.feather.opengl.AviaryGLSurfaceView$AviaryGLRenderer -> com.aviary.android.feather.opengl.c:
    int mWidth -> b
    int mHeight -> c
    com.aviary.android.feather.opengl.AviaryGLSurfaceView this$0 -> a
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
com.aviary.android.feather.opengl.AviaryGLSurfaceView$GLRendererListener -> com.aviary.android.feather.opengl.d:
    void OnSurfaceCreated() -> a
    void OnSurfaceChanged(boolean,int,int) -> a
com.aviary.android.feather.opengl.AviaryGLSurfaceView$InitializeOpenGLJob -> com.aviary.android.feather.opengl.e:
    com.aviary.android.feather.opengl.AviaryGLSurfaceView this$0 -> a
    java.lang.Void run(com.aviary.android.feather.library.threading.ThreadMediaPool$JobContext,java.lang.Void[]) -> a
    java.lang.Object run(com.aviary.android.feather.library.threading.ThreadMediaPool$JobContext,java.lang.Object[]) -> a
com.aviary.android.feather.opengl.AviaryGLSurfaceView$RenderJob -> com.aviary.android.feather.opengl.f:
    java.lang.ref.WeakReference mBitmap -> a
    com.aviary.android.feather.opengl.AviaryGLSurfaceView this$0 -> b
    java.lang.Boolean run(com.aviary.android.feather.library.threading.ThreadMediaPool$JobContext,java.lang.String[]) -> a
    java.lang.Object run(com.aviary.android.feather.library.threading.ThreadMediaPool$JobContext,java.lang.Object[]) -> a
com.aviary.android.feather.opengl.AviaryGLSurfaceView$SetRenderbufferSizeJob -> com.aviary.android.feather.opengl.g:
    com.aviary.android.feather.opengl.AviaryGLSurfaceView this$0 -> a
    java.lang.Void run(com.aviary.android.feather.library.threading.ThreadMediaPool$JobContext,java.lang.Integer[]) -> a
    java.lang.Object run(com.aviary.android.feather.library.threading.ThreadMediaPool$JobContext,java.lang.Object[]) -> a
com.aviary.android.feather.opengl.AviaryGLSurfaceView$WriteBitmapJob -> com.aviary.android.feather.opengl.h:
    java.lang.ref.WeakReference mBitmap -> a
    com.aviary.android.feather.opengl.AviaryGLSurfaceView this$0 -> b
    java.lang.Boolean run(com.aviary.android.feather.library.threading.ThreadMediaPool$JobContext,java.lang.Void[]) -> a
    java.lang.Object run(com.aviary.android.feather.library.threading.ThreadMediaPool$JobContext,java.lang.Object[]) -> a
com.aviary.android.feather.utils.SimpleBitmapCache -> com.aviary.android.feather.utils.a:
    android.os.Handler purgeHandler -> a
    java.util.HashMap sHardBitmapCache -> b
    java.util.concurrent.ConcurrentHashMap sSoftBitmapCache -> c
    java.lang.Runnable mPurger -> d
    android.graphics.Bitmap getBitmapFromCache(java.lang.String) -> a
    void addBitmapToCache(java.lang.String,android.graphics.Bitmap) -> a
    void clearCache() -> a
    void resetPurgeTimer() -> b
    java.util.concurrent.ConcurrentHashMap access$0() -> c
com.aviary.android.feather.utils.SimpleBitmapCache$1 -> com.aviary.android.feather.utils.b:
    com.aviary.android.feather.utils.SimpleBitmapCache this$0 -> a
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
com.aviary.android.feather.utils.SimpleBitmapCache$2 -> com.aviary.android.feather.utils.SimpleBitmapCache$2:
    com.aviary.android.feather.utils.SimpleBitmapCache this$0 -> a
    void run() -> run
com.aviary.android.feather.utils.ThreadUtils -> com.aviary.android.feather.utils.ThreadUtils:
    void startBackgroundJob(com.aviary.android.feather.library.MonitoredActivity,java.lang.String,java.lang.String,java.lang.Runnable,android.os.Handler) -> a
com.aviary.android.feather.utils.ThreadUtils$BackgroundJob -> com.aviary.android.feather.utils.ThreadUtils$BackgroundJob:
    com.aviary.android.feather.library.MonitoredActivity mActivity -> a
    android.app.ProgressDialog mDialog -> b
    java.lang.Runnable mJob -> c
    android.os.Handler mHandler -> d
    java.lang.Runnable mCleanupRunner -> e
    void run() -> run
    void onActivityDestroyed(com.aviary.android.feather.library.MonitoredActivity) -> b
    void onActivityStopped(com.aviary.android.feather.library.MonitoredActivity) -> d
    void onActivityStarted(com.aviary.android.feather.library.MonitoredActivity) -> c
    com.aviary.android.feather.library.MonitoredActivity access$0(com.aviary.android.feather.utils.ThreadUtils$BackgroundJob) -> a
    android.app.ProgressDialog access$1(com.aviary.android.feather.utils.ThreadUtils$BackgroundJob) -> b
com.aviary.android.feather.utils.ThreadUtils$BackgroundJob$1 -> com.aviary.android.feather.utils.ThreadUtils$BackgroundJob$1:
    com.aviary.android.feather.utils.ThreadUtils$BackgroundJob this$1 -> a
    void run() -> run
com.aviary.android.feather.utils.TypefaceUtils -> com.aviary.android.feather.utils.c:
    java.util.HashMap sTypeCache -> a
    android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String) -> a
    java.lang.ref.SoftReference getFromCache(java.lang.String) -> a
    void putIntoCache(java.lang.String,android.graphics.Typeface) -> a
com.aviary.android.feather.utils.UIUtils -> com.aviary.android.feather.utils.d:
    boolean checkBits(int,int) -> a
    android.widget.Toast makeCustomToast(android.content.Context) -> a
    android.widget.Toast makeCustomToast(android.content.Context,int) -> a
    com.aviary.android.feather.widget.AviaryToast createModalLoaderToast(android.content.Context) -> b
com.aviary.android.feather.widget.AdjustImageView -> com.aviary.android.feather.widget.AdjustImageView:
    android.net.Uri mUri -> ah
    int mResource -> ai
    android.graphics.Matrix mMatrix -> aj
    com.aviary.android.feather.widget.AdjustImageView$ScaleType mScaleType -> ak
    boolean mAdjustViewBounds -> al
    int mMaxWidth -> am
    int mMaxHeight -> an
    android.graphics.ColorFilter mColorFilter -> ao
    int mAlpha -> ap
    int mViewAlphaScale -> aq
    boolean mColorMod -> ar
    android.graphics.drawable.Drawable mDrawable -> as
    int[] mState -> at
    boolean mMergeState -> au
    int mLevel -> av
    int mDrawableWidth -> aw
    int mDrawableHeight -> ax
    android.graphics.Matrix mDrawMatrix -> ay
    android.graphics.Matrix mTempMatrix -> az
    android.graphics.Matrix mRotateMatrix -> aA
    android.graphics.Matrix mFlipMatrix -> aB
    android.graphics.RectF mTempSrc -> aC
    android.graphics.RectF mTempDst -> aD
    int mBaseline -> aE
    boolean mBaselineAlignBottom -> aF
    boolean mHaveFrame -> aG
    it.sephiroth.android.library.imagezoom.easing.Easing mEasing -> aH
    boolean isReset -> a
    long mResetAnimationDuration -> b
    long mAnimationDuration -> c
    android.graphics.PointF mCenter -> aI
    android.graphics.Path mClipPath -> d
    android.graphics.Path mInversePath -> e
    android.graphics.Rect mViewDrawRect -> f
    android.graphics.RectF mViewInvertRect -> g
    android.graphics.Paint mOutlinePaint -> h
    android.graphics.Paint mOutlineFill -> i
    android.graphics.RectF mDrawRect -> j
    android.graphics.Path mLinesPath -> k
    android.graphics.Paint mLinesPaint -> l
    android.graphics.drawable.Drawable mStraightenDrawable -> m
    int handleWidth -> n
    int handleHeight -> o
    int grid_rows -> p
    int grid_cols -> q
    boolean mEnableFreeRotate -> aJ
    com.aviary.android.feather.widget.AdjustImageView$OnResetListener mResetListener -> aK
    int mOutlinePaintAlpha -> r
    int mOutlineFillAlpha -> s
    int mLinesAlpha -> t
    boolean straightenStarted -> u
    double previousStraightenAngle -> v
    double prevGrowth -> w
    boolean testStraighten -> x
    float currentGrowth -> y
    android.graphics.Matrix mStraightenMatrix -> z
    double previousAngle -> A
    boolean intersectPoints -> B
    boolean portrait -> C
    int orientation -> D
    float mLastTouchX -> aL
    float mPosX -> aM
    boolean mIsInStraighten -> aN
    int straightenDuration -> E
    int previousPosition -> F
    boolean initTool -> G
    int mActivePointerId -> H
    int mActivePointerIndex -> I
    android.graphics.Matrix$ScaleToFit[] sS2FArray -> aO
    float ax -> J
    float ay -> K
    float bx -> L
    float by -> M
    float cx -> N
    float cy -> O
    float dx -> P
    float dy -> Q
    float intersectx -> R
    float intersecty -> S
    android.graphics.Paint intersectPaint -> T
    android.graphics.RectF imageCaptureRegion -> U
    boolean initStraighten -> V
    boolean firstDraw -> W
    android.os.Handler mFadeHandler -> Z
    boolean mFadeHandlerStarted -> aa
    android.os.Handler mHandler -> ab
    double mRotation -> ac
    float mCurrentScale -> ad
    boolean mRunning -> ae
    boolean mCameraEnabled -> aP
    float[] mMatrixValues -> af
    int mFlipType -> ag
    void setEnableFreeRotate(boolean) -> setEnableFreeRotate
    void setOnResetListener(com.aviary.android.feather.widget.AdjustImageView$OnResetListener) -> setOnResetListener
    void setEasing(it.sephiroth.android.library.imagezoom.easing.Easing) -> setEasing
    void initImageView(android.content.Context,android.util.AttributeSet,int) -> a
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    boolean onSetAlpha(int) -> onSetAlpha
    android.graphics.PointF getCenter() -> getCenter
    android.graphics.RectF getViewRect() -> getViewRect
    android.graphics.RectF getImageRect() -> getImageRect
    void onTouchStart() -> d
    void setImageRotation(double,boolean) -> a
    void onTouchUp() -> e
    double getGrowthFactor() -> getGrowthFactor
    double getStraightenAngle() -> getStraightenAngle
    void setStraightenRotation(double) -> setStraightenRotation
    double isNumber(double,double) -> a
    void straighten(double,float) -> a
    void straightenBy(double,int,long) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    double getRotationFromMatrix(android.graphics.Matrix) -> b
    void setAdjustViewBounds(boolean) -> setAdjustViewBounds
    void setMaxWidth(int) -> setMaxWidth
    void setMaxHeight(int) -> setMaxHeight
    android.graphics.drawable.Drawable getDrawable() -> getDrawable
    void setImageResource(int) -> setImageResource
    void setImageURI(android.net.Uri) -> setImageURI
    void setImageDrawable(android.graphics.drawable.Drawable) -> setImageDrawable
    void setImageBitmap(android.graphics.Bitmap) -> setImageBitmap
    void setSelected(boolean) -> setSelected
    void setImageLevel(int) -> setImageLevel
    void setScaleType(com.aviary.android.feather.widget.AdjustImageView$ScaleType) -> setScaleType
    com.aviary.android.feather.widget.AdjustImageView$ScaleType getScaleType() -> getScaleType
    android.graphics.Matrix getImageMatrix() -> getImageMatrix
    void setImageMatrix(android.graphics.Matrix) -> setImageMatrix
    void resolveUri() -> f
    int[] onCreateDrawableState(int) -> onCreateDrawableState
    void updateDrawable(android.graphics.drawable.Drawable) -> a
    void resizeFromDrawable() -> g
    android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(com.aviary.android.feather.widget.AdjustImageView$ScaleType) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    int resolveAdjustedSize(int,int,int) -> a
    void configureBounds() -> h
    void drawableStateChanged() -> drawableStateChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    void fadeinGrid(int) -> a
    void fadeoutGrid(int) -> b
    void fadeinOutlines(int) -> c
    void hideOutlines() -> a
    double getAngle90(double) -> a
    android.graphics.RectF crop(float,float,double,float,float,android.graphics.PointF,android.graphics.Canvas) -> a
    void drawLine(android.graphics.PointF[],android.graphics.Canvas,android.graphics.Paint) -> a
    void drawRect(android.graphics.PointF[],android.graphics.Canvas,android.graphics.Paint) -> b
    int getBaseline() -> getBaseline
    void setBaseline(int) -> setBaseline
    void setBaselineAlignBottom(boolean) -> setBaselineAlignBottom
    boolean getBaselineAlignBottom() -> getBaselineAlignBottom
    void setColorFilter(int,android.graphics.PorterDuff$Mode) -> a
    void setColorFilter(int) -> setColorFilter
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void setAlpha(int) -> setAlpha
    void applyColorMod() -> i
    void rotate90(boolean) -> a
    void rotate90(boolean,long) -> a
    boolean getStraightenStarted() -> getStraightenStarted
    void rotateBy(double,long) -> a
    void resetStraighten() -> j
    void printDetails() -> b
    void flip(boolean) -> b
    void flip(boolean,long) -> b
    void setCameraEnabled(boolean) -> setCameraEnabled
    void flipTo(boolean,long) -> c
    void flip(boolean,boolean) -> a
    float getValue(android.graphics.Matrix,int) -> a
    float[] getMatrixScale(android.graphics.Matrix) -> a
    float getRotation() -> getRotation
    double getCurrentRotation() -> getCurrentRotation
    boolean getHorizontalFlip() -> getHorizontalFlip
    boolean getVerticalFlip() -> getVerticalFlip
    int getFlipType() -> getFlipType
    void reset() -> c
    void onReset() -> k
    void fireOnResetComplete() -> l
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    it.sephiroth.android.library.imagezoom.easing.Easing access$0(com.aviary.android.feather.widget.AdjustImageView) -> a
    void access$1(com.aviary.android.feather.widget.AdjustImageView,double) -> a
    void access$2(com.aviary.android.feather.widget.AdjustImageView) -> b
    void access$3(com.aviary.android.feather.widget.AdjustImageView,double,boolean) -> a
    boolean access$4(com.aviary.android.feather.widget.AdjustImageView) -> c
    android.graphics.Matrix access$5(com.aviary.android.feather.widget.AdjustImageView) -> d
    android.graphics.Matrix access$6(com.aviary.android.feather.widget.AdjustImageView) -> e
    android.graphics.Matrix access$7(com.aviary.android.feather.widget.AdjustImageView) -> f
    double access$8(com.aviary.android.feather.widget.AdjustImageView,android.graphics.Matrix) -> a
com.aviary.android.feather.widget.AdjustImageView$1 -> com.aviary.android.feather.widget.AdjustImageView$1:
    com.aviary.android.feather.widget.AdjustImageView this$0 -> a
    long val$durationMs -> b
    long val$startTime -> c
    double val$newPosition -> d
    int val$newx -> e
    int val$srcx -> f
    double val$srcRotation -> g
    double val$destRotation -> h
    void run() -> run
com.aviary.android.feather.widget.AdjustImageView$2 -> com.aviary.android.feather.widget.AdjustImageView$2:
    com.aviary.android.feather.widget.AdjustImageView this$0 -> a
    int val$durationMs -> b
    long val$startTime -> c
    it.sephiroth.android.library.imagezoom.easing.Linear val$easing -> d
    float val$startAlpha -> e
    void run() -> run
com.aviary.android.feather.widget.AdjustImageView$3 -> com.aviary.android.feather.widget.AdjustImageView$3:
    com.aviary.android.feather.widget.AdjustImageView this$0 -> a
    int val$durationMs -> b
    long val$startTime -> c
    it.sephiroth.android.library.imagezoom.easing.Linear val$easing -> d
    float val$startAlpha -> e
    void run() -> run
com.aviary.android.feather.widget.AdjustImageView$4 -> com.aviary.android.feather.widget.AdjustImageView$4:
    com.aviary.android.feather.widget.AdjustImageView this$0 -> a
    int val$durationMs -> b
    long val$startTime -> c
    it.sephiroth.android.library.imagezoom.easing.Linear val$easing -> d
    void run() -> run
com.aviary.android.feather.widget.AdjustImageView$5 -> com.aviary.android.feather.widget.AdjustImageView$5:
    com.aviary.android.feather.widget.AdjustImageView this$0 -> a
    int val$durationMs -> b
    long val$startTime -> c
    it.sephiroth.android.library.imagezoom.easing.Linear val$easing -> d
    int val$alpha1 -> e
    int val$alpha2 -> f
    int val$alpha3 -> g
    void run() -> run
com.aviary.android.feather.widget.AdjustImageView$6 -> com.aviary.android.feather.widget.AdjustImageView$6:
    float old_scale -> a
    float old_rotation -> b
    com.aviary.android.feather.widget.AdjustImageView this$0 -> c
    long val$durationMs -> d
    long val$startTime -> e
    double val$deltaRotation -> f
    double val$srcRotation -> g
    double val$destRotation -> h
    void run() -> run
com.aviary.android.feather.widget.AdjustImageView$7 -> com.aviary.android.feather.widget.AdjustImageView$7:
    com.aviary.android.feather.widget.AdjustImageView this$0 -> a
    long val$durationMs -> b
    long val$startTime -> c
    android.graphics.Camera val$camera -> d
    boolean val$horizontal -> e
    float val$centerx -> f
    float val$centery -> g
    void run() -> run
com.aviary.android.feather.widget.AdjustImageView$FlipType -> com.aviary.android.feather.widget.a:
    com.aviary.android.feather.widget.AdjustImageView$FlipType FLIP_NONE -> a
    com.aviary.android.feather.widget.AdjustImageView$FlipType FLIP_HORIZONTAL -> b
    com.aviary.android.feather.widget.AdjustImageView$FlipType FLIP_VERTICAL -> c
    int nativeInt -> d
    com.aviary.android.feather.widget.AdjustImageView$FlipType[] ENUM$VALUES -> e
    com.aviary.android.feather.widget.AdjustImageView$FlipType[] values() -> values
    com.aviary.android.feather.widget.AdjustImageView$FlipType valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.AdjustImageView$OnResetListener -> com.aviary.android.feather.widget.b:
    void onResetComplete() -> E
com.aviary.android.feather.widget.AdjustImageView$ScaleType -> com.aviary.android.feather.widget.c:
    com.aviary.android.feather.widget.AdjustImageView$ScaleType MATRIX -> a
    com.aviary.android.feather.widget.AdjustImageView$ScaleType FIT_XY -> b
    com.aviary.android.feather.widget.AdjustImageView$ScaleType FIT_START -> c
    com.aviary.android.feather.widget.AdjustImageView$ScaleType FIT_CENTER -> d
    com.aviary.android.feather.widget.AdjustImageView$ScaleType FIT_END -> e
    com.aviary.android.feather.widget.AdjustImageView$ScaleType CENTER -> f
    com.aviary.android.feather.widget.AdjustImageView$ScaleType CENTER_CROP -> g
    com.aviary.android.feather.widget.AdjustImageView$ScaleType CENTER_INSIDE -> h
    int nativeInt -> i
    com.aviary.android.feather.widget.AdjustImageView$ScaleType[] ENUM$VALUES -> j
    com.aviary.android.feather.widget.AdjustImageView$ScaleType[] values() -> values
    com.aviary.android.feather.widget.AdjustImageView$ScaleType valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.AviaryAbsSpinner -> com.aviary.android.feather.widget.AviaryAbsSpinner:
    android.widget.Adapter mAdapter -> mAdapter
    int mHeightMeasureSpec -> mHeightMeasureSpec
    int mWidthMeasureSpec -> mWidthMeasureSpec
    boolean mBlockLayoutRequests -> mBlockLayoutRequests
    int mSelectionLeftPadding -> mSelectionLeftPadding
    int mSelectionTopPadding -> mSelectionTopPadding
    int mSelectionRightPadding -> mSelectionRightPadding
    int mSelectionBottomPadding -> mSelectionBottomPadding
    android.graphics.Rect mSpinnerPadding -> mSpinnerPadding
    int mPaddingLeft -> mPaddingLeft
    int mPaddingRight -> mPaddingRight
    int mPaddingTop -> mPaddingTop
    int mPaddingBottom -> mPaddingBottom
    java.util.List mRecycleBin -> mRecycleBin
    android.database.DataSetObserver mDataSetObserver -> mDataSetObserver
    android.graphics.Rect mTouchFrame -> mTouchFrame
    int mDefaultPosition -> mDefaultPosition
    void setPadding(int,int,int,int) -> setPadding
    void initAbsSpinner() -> initAbsSpinner
    void setDefaultPosition(int) -> setDefaultPosition
    void setAdapter(android.widget.Adapter) -> setAdapter
    void emptyRecycler() -> emptyRecycler
    void emptySubRecycler() -> emptySubRecycler
    void resetList() -> resetList
    void onMeasure(int,int) -> onMeasure
    int getChildHeight(android.view.View) -> getChildHeight
    int getChildWidth(android.view.View) -> getChildWidth
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void recycleAllViews() -> recycleAllViews
    void setSelection(int,boolean,boolean) -> setSelection
    void setSelection(int) -> setSelection
    void setSelectionInt(int,boolean,boolean) -> setSelectionInt
    void layout(int,boolean,boolean) -> layout
    android.view.View getSelectedView() -> getSelectedView
    void requestLayout() -> requestLayout
    android.widget.Adapter getAdapter() -> getAdapter
    int getCount() -> getCount
    int pointToPosition(int,int) -> pointToPosition
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
com.aviary.android.feather.widget.AviaryAbsSpinner$SavedState -> com.aviary.android.feather.widget.AviaryAbsSpinner$SavedState:
    long selectedId -> a
    int position -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
com.aviary.android.feather.widget.AviaryAbsSpinner$SavedState$1 -> com.aviary.android.feather.widget.d:
    com.aviary.android.feather.widget.AviaryAbsSpinner$SavedState createFromParcel(android.os.Parcel) -> a
    com.aviary.android.feather.widget.AviaryAbsSpinner$SavedState[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.aviary.android.feather.widget.AviaryAdapterView -> com.aviary.android.feather.widget.AviaryAdapterView:
    int ITEM_VIEW_TYPE_IGNORE -> ITEM_VIEW_TYPE_IGNORE
    int ITEM_VIEW_TYPE_HEADER_OR_FOOTER -> ITEM_VIEW_TYPE_HEADER_OR_FOOTER
    int mFirstPosition -> mFirstPosition
    int mSpecificTop -> mSpecificTop
    int mSyncPosition -> mSyncPosition
    long mSyncRowId -> mSyncRowId
    long mSyncHeight -> mSyncHeight
    boolean mNeedSync -> mNeedSync
    int mSyncMode -> mSyncMode
    int mLayoutHeight -> mLayoutHeight
    int SYNC_SELECTED_POSITION -> SYNC_SELECTED_POSITION
    int SYNC_FIRST_POSITION -> SYNC_FIRST_POSITION
    int SYNC_MAX_DURATION_MILLIS -> SYNC_MAX_DURATION_MILLIS
    boolean mInLayout -> mInLayout
    com.aviary.android.feather.widget.AviaryAdapterView$OnItemSelectedListener mOnItemSelectedListener -> mOnItemSelectedListener
    com.aviary.android.feather.widget.AviaryAdapterView$OnItemClickListener mOnItemClickListener -> mOnItemClickListener
    com.aviary.android.feather.widget.AviaryAdapterView$OnItemLongClickListener mOnItemLongClickListener -> mOnItemLongClickListener
    boolean mDataChanged -> mDataChanged
    int mNextSelectedPosition -> mNextSelectedPosition
    long mNextSelectedRowId -> mNextSelectedRowId
    int mSelectedPosition -> mSelectedPosition
    long mSelectedRowId -> mSelectedRowId
    android.view.View mEmptyView -> mEmptyView
    int mItemCount -> mItemCount
    int mOldItemCount -> mOldItemCount
    int INVALID_POSITION -> INVALID_POSITION
    long INVALID_ROW_ID -> INVALID_ROW_ID
    int mOldSelectedPosition -> mOldSelectedPosition
    long mOldSelectedRowId -> mOldSelectedRowId
    boolean mDesiredFocusableState -> mDesiredFocusableState
    boolean mDesiredFocusableInTouchModeState -> mDesiredFocusableInTouchModeState
    com.aviary.android.feather.widget.AviaryAdapterView$SelectionNotifier mSelectionNotifier -> mSelectionNotifier
    boolean mBlockLayoutRequests -> mBlockLayoutRequests
    void setOnItemClickListener(com.aviary.android.feather.widget.AviaryAdapterView$OnItemClickListener) -> setOnItemClickListener
    com.aviary.android.feather.widget.AviaryAdapterView$OnItemClickListener getOnItemClickListener() -> getOnItemClickListener
    boolean performItemClick(android.view.View,int,long) -> performItemClick
    void setOnItemLongClickListener(com.aviary.android.feather.widget.AviaryAdapterView$OnItemLongClickListener) -> setOnItemLongClickListener
    com.aviary.android.feather.widget.AviaryAdapterView$OnItemLongClickListener getOnItemLongClickListener() -> getOnItemLongClickListener
    void setOnItemSelectedListener(com.aviary.android.feather.widget.AviaryAdapterView$OnItemSelectedListener) -> setOnItemSelectedListener
    com.aviary.android.feather.widget.AviaryAdapterView$OnItemSelectedListener getOnItemSelectedListener() -> getOnItemSelectedListener
    android.widget.Adapter getAdapter() -> getAdapter
    void setAdapter(android.widget.Adapter) -> setAdapter
    void addView(android.view.View) -> addView
    void addView(android.view.View,int) -> addView
    void addView(android.view.View,android.view.ViewGroup$LayoutParams) -> addView
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    void removeViewAt(int) -> removeViewAt
    void removeAllViews() -> removeAllViews
    void onLayout(boolean,int,int,int,int) -> onLayout
    int getSelectedItemPosition() -> getSelectedItemPosition
    long getSelectedItemId() -> getSelectedItemId
    android.view.View getSelectedView() -> getSelectedView
    java.lang.Object getSelectedItem() -> getSelectedItem
    int getCount() -> getCount
    int getPositionForView(android.view.View) -> getPositionForView
    int getFirstVisiblePosition() -> getFirstVisiblePosition
    int getLastVisiblePosition() -> getLastVisiblePosition
    void setSelection(int) -> setSelection
    void setEmptyView(android.view.View) -> setEmptyView
    android.view.View getEmptyView() -> getEmptyView
    boolean isInFilterMode() -> isInFilterMode
    void setFocusable(boolean) -> setFocusable
    void setFocusableInTouchMode(boolean) -> setFocusableInTouchMode
    void checkFocus() -> checkFocus
    void updateEmptyStatus(boolean) -> updateEmptyStatus
    java.lang.Object getItemAtPosition(int) -> getItemAtPosition
    long getItemIdAtPosition(int) -> getItemIdAtPosition
    void setOnClickListener(android.view.View$OnClickListener) -> setOnClickListener
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
    void onDetachedFromWindow() -> onDetachedFromWindow
    void selectionChanged(int,int) -> selectionChanged
    void fireOnSelected() -> fireOnSelected
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    boolean isScrollableForAccessibility() -> isScrollableForAccessibility
    boolean canAnimate() -> canAnimate
    void handleDataChanged() -> handleDataChanged
    void checkSelectionChanged() -> checkSelectionChanged
    int findSyncPosition() -> findSyncPosition
    int lookForSelectablePosition(int,boolean) -> lookForSelectablePosition
    void setSelectedPositionInt(int) -> setSelectedPositionInt
    void setNextSelectedPositionInt(int) -> setNextSelectedPositionInt
    void rememberSyncState() -> rememberSyncState
    void access$0(com.aviary.android.feather.widget.AviaryAdapterView,android.os.Parcelable) -> access$0
    android.os.Parcelable access$1(com.aviary.android.feather.widget.AviaryAdapterView) -> access$1
com.aviary.android.feather.widget.AviaryAdapterView$AdapterContextMenuInfo -> com.aviary.android.feather.widget.e:
com.aviary.android.feather.widget.AviaryAdapterView$AdapterDataSetObserver -> com.aviary.android.feather.widget.f:
    android.os.Parcelable mInstanceState -> b
    com.aviary.android.feather.widget.AviaryAdapterView this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
com.aviary.android.feather.widget.AviaryAdapterView$OnItemClickListener -> com.aviary.android.feather.widget.g:
    void onItemClick(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> a
com.aviary.android.feather.widget.AviaryAdapterView$OnItemLongClickListener -> com.aviary.android.feather.widget.h:
com.aviary.android.feather.widget.AviaryAdapterView$OnItemSelectedListener -> com.aviary.android.feather.widget.i:
    void onItemSelected(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> a
    void onNothingSelected(com.aviary.android.feather.widget.AviaryAdapterView) -> a
com.aviary.android.feather.widget.AviaryAdapterView$SelectionNotifier -> com.aviary.android.feather.widget.AviaryAdapterView$SelectionNotifier:
    com.aviary.android.feather.widget.AviaryAdapterView this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.AviaryBottomBarViewFlipper -> com.aviary.android.feather.widget.AviaryBottomBarViewFlipper:
    android.view.View mLogo -> a
    com.aviary.android.feather.widget.AviaryBottomBarViewFlipper$OnViewChangingStatusListener mListener -> b
    com.aviary.android.feather.widget.AviaryBottomBarViewFlipper$OnBottomBarItemClickListener mBottomClickListener -> c
    void onFinishInflate() -> onFinishInflate
    void setOnViewChangingStatusListener(com.aviary.android.feather.widget.AviaryBottomBarViewFlipper$OnViewChangingStatusListener) -> setOnViewChangingStatusListener
    void setOnBottomBarItemClickListener(com.aviary.android.feather.widget.AviaryBottomBarViewFlipper$OnBottomBarItemClickListener) -> setOnBottomBarItemClickListener
    boolean open() -> a
    boolean close() -> b
    android.view.ViewGroup getContentPanel() -> getContentPanel
    it.sephiroth.android.library.widget.HorizontalVariableListView getToolsListView() -> getToolsListView
    void hideLogo() -> c
    void onClick(android.view.View) -> onClick
    com.aviary.android.feather.widget.AviaryBottomBarViewFlipper$OnViewChangingStatusListener access$0(com.aviary.android.feather.widget.AviaryBottomBarViewFlipper) -> a
com.aviary.android.feather.widget.AviaryBottomBarViewFlipper$1 -> com.aviary.android.feather.widget.j:
    com.aviary.android.feather.widget.AviaryBottomBarViewFlipper this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.aviary.android.feather.widget.AviaryBottomBarViewFlipper$2 -> com.aviary.android.feather.widget.k:
    com.aviary.android.feather.widget.AviaryBottomBarViewFlipper this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.aviary.android.feather.widget.AviaryBottomBarViewFlipper$OnBottomBarItemClickListener -> com.aviary.android.feather.widget.l:
    void onBottomBarItemClick(int) -> a
com.aviary.android.feather.widget.AviaryBottomBarViewFlipper$OnViewChangingStatusListener -> com.aviary.android.feather.widget.m:
    void OnOpenStart() -> a
    void OnOpenEnd() -> b
    void OnCloseStart() -> c
    void OnCloseEnd() -> d
com.aviary.android.feather.widget.AviaryButton -> com.aviary.android.feather.widget.AviaryButton:
    void setTypeface(java.lang.String) -> setTypeface
    void setTextAppearance(android.content.Context,int) -> setTextAppearance
com.aviary.android.feather.widget.AviaryEdgeEffect -> com.aviary.android.feather.widget.n:
    android.graphics.drawable.Drawable mEdge -> a
    android.graphics.drawable.Drawable mGlow -> b
    int mWidth -> c
    int mEdgeMaxAlpha -> d
    int mGlowMaxAlpha -> e
    float mEdgeAlpha -> f
    float mEdgeScaleY -> g
    float mGlowAlpha -> h
    float mGlowScaleY -> i
    float mEdgeAlphaStart -> j
    float mEdgeAlphaFinish -> k
    float mEdgeScaleYStart -> l
    float mEdgeScaleYFinish -> m
    float mGlowAlphaStart -> n
    float mGlowAlphaFinish -> o
    float mGlowScaleYStart -> p
    float mGlowScaleYFinish -> q
    long mStartTime -> r
    float mDuration -> s
    android.view.animation.Interpolator mInterpolator -> t
    int mState -> u
    float mPullDistance -> v
    android.graphics.Rect mBounds -> w
    int mEdgeHeight -> x
    int mGlowHeight -> y
    int mGlowWidth -> z
    int mMaxEffectHeight -> A
    void setColorFilter(int,android.graphics.PorterDuff$Mode) -> a
    void setSize(int,int) -> a
    void setEdgeMaxAlpha(int) -> a
    boolean isFinished() -> a
    void onPull(float) -> a
    void onRelease() -> b
    void onAbsorb(int) -> b
    boolean draw(android.graphics.Canvas) -> a
    void update() -> c
com.aviary.android.feather.widget.AviaryGallery -> com.aviary.android.feather.widget.AviaryGallery:
    int SCROLL_TO_FLING_UNCERTAINTY_TIMEOUT -> SCROLL_TO_FLING_UNCERTAINTY_TIMEOUT
    com.aviary.android.feather.widget.VibrationHelper mVibratorHelper -> mVibratorHelper
    boolean mAutoSelectChild -> mAutoSelectChild
    com.aviary.android.feather.widget.AviaryGallery$OnItemsScrollListener mItemsScrollListener -> mItemsScrollListener
    int mCenter -> mCenter
    int mAnimationDuration -> mAnimationDuration
    android.support.v4.widget.EdgeEffectCompat mEdgeGlowLeft -> mEdgeGlowLeft
    android.support.v4.widget.EdgeEffectCompat mEdgeGlowRight -> mEdgeGlowRight
    int mGravity -> mGravity
    android.view.GestureDetector mGestureDetector -> mGestureDetector
    int mDownTouchPosition -> mDownTouchPosition
    boolean isDown -> isDown
    com.aviary.android.feather.widget.ScrollerRunnable mScroller -> mScroller
    boolean mAutoScrollToCenter -> mAutoScrollToCenter
    int mTouchSlop -> mTouchSlop
    com.aviary.android.feather.widget.AviaryGallery$ScrollCompletedSelectionNotifier mScrollCompletedNotifier -> mScrollCompletedNotifier
    com.aviary.android.feather.widget.AviaryGallery$ScrollScrollSelectionNotifier mScrollScrollNotifier -> mScrollScrollNotifier
    int mRealSelectedPosition -> mRealSelectedPosition
    boolean mShouldCallbackDuringFling -> mShouldCallbackDuringFling
    boolean mShouldCallbackOnUnselectedItemClick -> mShouldCallbackOnUnselectedItemClick
    boolean mSuppressSelectionChanged -> mSuppressSelectionChanged
    boolean mReceivedInvokeKeyDown -> mReceivedInvokeKeyDown
    com.aviary.android.feather.widget.AviaryAdapterView$AdapterContextMenuInfo mContextMenuInfo -> mContextMenuInfo
    boolean mIsFirstScroll -> mIsFirstScroll
    int mLastMotionValue -> mLastMotionValue
    void setAutoSelectChild(boolean) -> setAutoSelectChild
    boolean getAutoSelectChild() -> getAutoSelectChild
    void setVibrationEnabled(boolean) -> setVibrationEnabled
    boolean getVibrationEnabled() -> getVibrationEnabled
    void setOnItemsScrollListener(com.aviary.android.feather.widget.AviaryGallery$OnItemsScrollListener) -> setOnItemsScrollListener
    void setOverScrollMode(int) -> setOverScrollMode
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void drawEdges(android.graphics.Canvas) -> drawEdges
    void setAutoScrollToCenter(boolean) -> setAutoScrollToCenter
    void setCallbackDuringFling(boolean) -> setCallbackDuringFling
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setCallbackOnUnselectedItemClick(boolean) -> setCallbackOnUnselectedItemClick
    void setAnimationDuration(int) -> setAnimationDuration
    int computeHorizontalScrollExtent() -> computeHorizontalScrollExtent
    int computeHorizontalScrollOffset() -> computeHorizontalScrollOffset
    int computeHorizontalScrollRange() -> computeHorizontalScrollRange
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void onLayout(boolean,int,int,int,int) -> onLayout
    int getChildHeight(android.view.View) -> getChildHeight
    void trackMotionScroll(int) -> trackMotionScroll
    int getLimitedMotionScrollAmount(boolean,int) -> getLimitedMotionScrollAmount
    int getOverScrollDelta(int) -> getOverScrollDelta
    void onOverScrolled(int,int,boolean,boolean) -> onOverScrolled
    void offsetChildrenLeftAndRight(int) -> offsetChildrenLeftAndRight
    int getCenterOfGallery() -> getCenterOfGallery
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    int getCenterOfView(android.view.View) -> getCenterOfView
    void detachOffScreenChildren(boolean) -> detachOffScreenChildren
    void scrollIntoSlots() -> scrollIntoSlots
    boolean isOverScrolled() -> isOverScrolled
    void onFinishedMovement() -> onFinishedMovement
    void setSelectionToCenterChild() -> setSelectionToCenterChild
    void layout(int,boolean,boolean) -> layout
    void fillToGalleryLeft() -> fillToGalleryLeft
    void fillToGalleryRight() -> fillToGalleryRight
    android.view.View makeAndAddView(int,int,int,boolean) -> makeAndAddView
    void invalidateViews() -> invalidateViews
    void setUpChild(android.view.View,int,int,boolean) -> setUpChild
    void layoutChildren() -> layoutChildren
    void forceChildLayout(android.view.View,android.view.ViewGroup$LayoutParams) -> forceChildLayout
    int calculateTop(android.view.View,boolean) -> calculateTop
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    boolean onDown(android.view.MotionEvent) -> onDown
    void onUp() -> onUp
    void onCancel() -> onCancel
    void onShowPress(android.view.MotionEvent) -> onShowPress
    void dispatchPress(android.view.View) -> dispatchPress
    void dispatchUnpress() -> dispatchUnpress
    void dispatchSetSelected(boolean) -> dispatchSetSelected
    void dispatchSetPressed(boolean) -> dispatchSetPressed
    android.view.ContextMenu$ContextMenuInfo getContextMenuInfo() -> getContextMenuInfo
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean movePrevious() -> movePrevious
    boolean moveNext() -> moveNext
    boolean scrollToChild(int) -> scrollToChild
    void setSelectedPositionInt(int,boolean) -> setSelectedPositionInt
    void fireVibration() -> fireVibration
    void setGravity(int) -> setGravity
    void onFocusChanged(boolean,int,android.graphics.Rect) -> onFocusChanged
    void scrollCompleted() -> scrollCompleted
    void fireOnScrollCompleted() -> fireOnScrollCompleted
    void selectionChanged(int,int) -> selectionChanged
    void fireOnSelected() -> fireOnSelected
    int getMinX() -> getMinX
    int getMaxX() -> getMaxX
    int getSelectedItemPosition() -> getSelectedItemPosition
    int getCurrentSelectedItemPosition() -> getCurrentSelectedItemPosition
    void access$0(com.aviary.android.feather.widget.AviaryGallery) -> access$0
    void access$1(com.aviary.android.feather.widget.AviaryGallery) -> access$1
com.aviary.android.feather.widget.AviaryGallery$1 -> com.aviary.android.feather.widget.AviaryGallery$1:
    com.aviary.android.feather.widget.AviaryGallery this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.AviaryGallery$OnItemsScrollListener -> com.aviary.android.feather.widget.o:
    void onScrollStarted(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> b
    void onScroll(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> c
    void onScrollFinished(com.aviary.android.feather.widget.AviaryAdapterView,android.view.View,int,long) -> d
com.aviary.android.feather.widget.AviaryGallery$ScrollCompletedSelectionNotifier -> com.aviary.android.feather.widget.AviaryGallery$ScrollCompletedSelectionNotifier:
    com.aviary.android.feather.widget.AviaryGallery this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.AviaryGallery$ScrollScrollSelectionNotifier -> com.aviary.android.feather.widget.AviaryGallery$ScrollScrollSelectionNotifier:
    com.aviary.android.feather.widget.AviaryGallery this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.AviaryGalleryTopIndicatorView -> com.aviary.android.feather.widget.AviaryGalleryTopIndicatorView:
com.aviary.android.feather.widget.AviaryHighlightImageButton -> com.aviary.android.feather.widget.AviaryHighlightImageButton:
    int mHighlightColorPressed -> a
    int mHighlightColorChecked -> b
    int mHighlightColorSelected -> c
    android.graphics.PorterDuff$Mode mBlendMode -> d
    android.graphics.ColorFilter mColorFilterTintPressed -> e
    android.graphics.ColorFilter mColorFilterTintChecked -> f
    android.graphics.ColorFilter mColorFilterTintSelected -> g
    int mGlowStatus -> h
    int mHighlightMode -> i
    int mGlowSize -> j
    boolean mToggleEnabled -> k
    boolean mUnToggleUserEnabled -> l
    boolean mChecked -> m
    boolean mBroadcasting -> n
    com.aviary.android.feather.widget.AviaryHighlightImageButton$OnCheckedChangeListener mOnCheckedChangeListener -> o
    int[] CHECKED_STATE_SET -> p
    void setImageDrawable(android.graphics.drawable.Drawable) -> setImageDrawable
    void setImageBitmap(android.graphics.Bitmap) -> setImageBitmap
    void setImageResource(int) -> setImageResource
    boolean onSetAlpha(int) -> onSetAlpha
    void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void setPressed(boolean) -> setPressed
    void setSelected(boolean) -> setSelected
    boolean isChecked() -> a
    void setChecked(boolean) -> setChecked
    void setChecked(boolean,boolean) -> a
    void setOnCheckedChangeListener(com.aviary.android.feather.widget.AviaryHighlightImageButton$OnCheckedChangeListener) -> setOnCheckedChangeListener
    int[] onCreateDrawableState(int) -> onCreateDrawableState
    void updateDrawable(android.graphics.drawable.Drawable,boolean,boolean,boolean) -> a
    void toggle() -> b
    boolean performClick() -> performClick
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
com.aviary.android.feather.widget.AviaryHighlightImageButton$OnCheckedChangeListener -> com.aviary.android.feather.widget.p:
    void onCheckedChanged(com.aviary.android.feather.widget.AviaryHighlightImageButton,boolean,boolean) -> a
com.aviary.android.feather.widget.AviaryHighlightImageButton$SavedState -> com.aviary.android.feather.widget.AviaryHighlightImageButton$SavedState:
    boolean checked -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
com.aviary.android.feather.widget.AviaryHighlightImageButton$SavedState$1 -> com.aviary.android.feather.widget.q:
    com.aviary.android.feather.widget.AviaryHighlightImageButton$SavedState createFromParcel(android.os.Parcel) -> a
    com.aviary.android.feather.widget.AviaryHighlightImageButton$SavedState[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.aviary.android.feather.widget.AviaryImageSwitcher -> com.aviary.android.feather.widget.AviaryImageSwitcher:
    boolean mSwitchEnabled -> a
    void setImageBitmap(android.graphics.Bitmap,android.graphics.Matrix) -> a
    void setImageDrawable(android.graphics.drawable.Drawable,android.graphics.Matrix) -> a
    void setSwitchEnabled(boolean) -> setSwitchEnabled
com.aviary.android.feather.widget.AviaryNavBarViewFlipper -> com.aviary.android.feather.widget.AviaryNavBarViewFlipper:
    android.widget.TextSwitcher mTextSwitcher -> a
    android.widget.Button mButton2 -> b
    android.widget.Button mButton1 -> c
    com.aviary.android.feather.widget.AviaryNavBarViewFlipper$OnToolbarClickListener mListener -> d
    android.widget.ProgressBar mProgress1 -> e
    android.widget.ProgressBar mProgress2 -> f
    boolean mClickable -> g
    boolean mButtonSizeChanged -> h
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onFinishInflate() -> onFinishInflate
    void open() -> a
    void close() -> b
    boolean opened() -> c
    void setClickable(boolean) -> setClickable
    boolean isClickable() -> isClickable
    void setOnToolbarClickListener(com.aviary.android.feather.widget.AviaryNavBarViewFlipper$OnToolbarClickListener) -> setOnToolbarClickListener
    void setApplyEnabled(boolean) -> setApplyEnabled
    void setApplyVisible(boolean) -> setApplyVisible
    void setApplyProgressVisible(boolean) -> setApplyProgressVisible
    boolean getApplyProgressVisible() -> getApplyProgressVisible
    void setDoneEnabled(boolean) -> setDoneEnabled
    void setDoneProgressVisible(boolean) -> setDoneProgressVisible
    boolean getDoneProgressVisible() -> getDoneProgressVisible
    void setTitle(java.lang.CharSequence) -> setTitle
    void setTitle(java.lang.CharSequence,boolean) -> a
    void setTitle(int) -> setTitle
    void setTitle(int,boolean) -> a
    android.view.View makeView() -> makeView
com.aviary.android.feather.widget.AviaryNavBarViewFlipper$1 -> com.aviary.android.feather.widget.r:
    com.aviary.android.feather.widget.AviaryNavBarViewFlipper this$0 -> a
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.widget.AviaryNavBarViewFlipper$2 -> com.aviary.android.feather.widget.s:
    com.aviary.android.feather.widget.AviaryNavBarViewFlipper this$0 -> a
    void onClick(android.view.View) -> onClick
com.aviary.android.feather.widget.AviaryNavBarViewFlipper$OnToolbarClickListener -> com.aviary.android.feather.widget.t:
    void onDoneClick() -> s
    void onApplyClick() -> u
com.aviary.android.feather.widget.AviarySeekBar -> com.aviary.android.feather.widget.AviarySeekBar:
    android.graphics.drawable.Drawable mSecondary -> a
    android.graphics.drawable.Drawable mSecondaryInverted -> b
    android.graphics.drawable.Drawable mSecondaryCenter -> c
    int mSecondaryMinWidth -> d
    int mSecondaryMinHeight -> e
    double mSecondaryCenterOffset -> f
    int mBackgroundOffset -> g
    int mRealWidth -> h
    android.graphics.drawable.Drawable mCurrentDrawable -> i
    void drawableStateChanged() -> drawableStateChanged
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onDraw(android.graphics.Canvas) -> onDraw
com.aviary.android.feather.widget.AviaryTextView -> com.aviary.android.feather.widget.AviaryTextView:
    void setTypeface(java.lang.String) -> setTypeface
    void setTextAppearance(android.content.Context,int) -> setTextAppearance
com.aviary.android.feather.widget.AviaryToast -> com.aviary.android.feather.widget.u:
    java.lang.String LOG_TAG -> a
    android.content.Context mContext -> b
    android.view.WindowManager mWindowManager -> c
    android.view.View mNextView -> d
    android.view.View mView -> e
    int mDuration -> f
    int mGravity -> g
    int mX -> h
    int mY -> i
    com.aviary.android.feather.widget.AviaryToast$TN mTN -> j
    float mHorizontalMargin -> k
    float mVerticalMargin -> l
    android.os.Handler mHandler -> m
    com.aviary.android.feather.widget.AviaryToast$LayoutListener mLayoutListener -> n
    void show() -> a
    void hide() -> b
    com.aviary.android.feather.widget.AviaryToast make(android.content.Context,int,int) -> a
    com.aviary.android.feather.widget.AviaryToast$LayoutListener access$0(com.aviary.android.feather.widget.AviaryToast) -> a
com.aviary.android.feather.widget.AviaryToast$LayoutListener -> com.aviary.android.feather.widget.v:
    void onShown(android.view.View) -> a
    void onHidden() -> a
com.aviary.android.feather.widget.AviaryToast$TN -> com.aviary.android.feather.widget.w:
    java.lang.Runnable mShow -> a
    java.lang.Runnable mHide -> b
    android.view.WindowManager$LayoutParams mParams -> c
    android.view.WindowManager mWm -> d
    com.aviary.android.feather.widget.AviaryToast this$0 -> e
    void show() -> a
    void hide() -> b
    void handleShow() -> c
    void handleHide() -> d
    void removeView() -> e
com.aviary.android.feather.widget.AviaryToast$TN$1 -> com.aviary.android.feather.widget.AviaryToast$TN$1:
    com.aviary.android.feather.widget.AviaryToast$TN this$1 -> a
    void run() -> run
com.aviary.android.feather.widget.AviaryToast$TN$2 -> com.aviary.android.feather.widget.AviaryToast$TN$2:
    com.aviary.android.feather.widget.AviaryToast$TN this$1 -> a
    void run() -> run
com.aviary.android.feather.widget.AviaryWheel -> com.aviary.android.feather.widget.AviaryWheel:
    java.lang.String LOG_TAG -> LOG_TAG
    int INVALID_VALUE -> INVALID_VALUE
    double EDGE_HEIGHT -> EDGE_HEIGHT
    android.graphics.drawable.Drawable mShadowBottom -> mShadowBottom
    android.graphics.BitmapShader mShader -> mShader
    android.graphics.Matrix mShaderMatrix -> mShaderMatrix
    android.view.GestureDetector mGestureDetector -> mGestureDetector
    com.aviary.android.feather.widget.ScrollerRunnable mScroller -> mScroller
    double mCurrentValue -> mCurrentValue
    boolean mToLeft -> mToLeft
    boolean mLayoutCompleted -> mLayoutCompleted
    boolean mInLayout -> mInLayout
    android.graphics.drawable.Drawable mLinesIndicator -> mLinesIndicator
    android.graphics.drawable.Drawable mLinesSingle -> mLinesSingle
    android.graphics.Paint mLinesPaint -> mLinesPaint
    int mShaderWidth -> mShaderWidth
    int mLastMotionValue -> mLastMotionValue
    int mLineWidth -> mLineWidth
    int mMinX -> mMinX
    int mMaxX -> mMaxX
    int mNextValue -> mNextValue
    float mEdgeOffset -> mEdgeOffset
    com.aviary.android.feather.widget.AviaryEdgeEffect mEdgeLeft -> mEdgeLeft
    com.aviary.android.feather.widget.AviaryEdgeEffect mEdgeRight -> mEdgeRight
    android.graphics.Matrix mEdgeMatrixLeft -> mEdgeMatrixLeft
    android.graphics.Matrix mEdgeMatrixRight -> mEdgeMatrixRight
    int mEdgeStyle -> mEdgeStyle
    com.aviary.android.feather.widget.VibrationHelper mVibrationHelper -> mVibrationHelper
    com.aviary.android.feather.widget.AviaryWheel$OnWheelChangeListener mScrollListener -> mScrollListener
    float mScaledDensity -> mScaledDensity
    android.graphics.Paint debugPaint -> debugPaint
    int mHeightDiff -> mHeightDiff
    int HARD_LIMIT -> HARD_LIMIT
    float SHADER_MULTIPLIER -> SHADER_MULTIPLIER
    int MAX_DELTA -> MAX_DELTA
    float mOverscrollX -> mOverscrollX
    void init(android.content.Context,android.util.AttributeSet,int) -> init
    void setOnWheelChangeListener(com.aviary.android.feather.widget.AviaryWheel$OnWheelChangeListener) -> setOnWheelChangeListener
    void setValue(int) -> setValue
    int getValue() -> getValue
    int getPositionFromValue(double) -> getPositionFromValue
    double getValueFromPosition(int) -> getValueFromPosition
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void createShader(int,int) -> createShader
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    int getSuggestedMinimumHeight() -> getSuggestedMinimumHeight
    int getSuggestedMinimumWidth() -> getSuggestedMinimumWidth
    boolean onUp(android.view.MotionEvent) -> onUp
    void computeScroll() -> computeScroll
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    int getRange() -> getRange
    int getMaxX() -> getMaxX
    int getMinX() -> getMinX
    void scrollIntoSlots() -> scrollIntoSlots
    void onFinishedMovement() -> onFinishedMovement
    void trackMotionScroll(int) -> trackMotionScroll
    void trackMotionValue(int) -> trackMotionValue
    void scrollCompleted() -> scrollCompleted
    void scrollStarted() -> scrollStarted
    void scrollRunning() -> scrollRunning
    void setVibrationEnabled(boolean) -> setVibrationEnabled
    boolean getVibrationEnabled() -> getVibrationEnabled
com.aviary.android.feather.widget.AviaryWheel$OnWheelChangeListener -> com.aviary.android.feather.widget.x:
    void onStartTrackingTouch(com.aviary.android.feather.widget.AviaryWheel) -> a
    void OnValueChanged(com.aviary.android.feather.widget.AviaryWheel,int) -> a
    void onStopTrackingTouch(com.aviary.android.feather.widget.AviaryWheel) -> b
com.aviary.android.feather.widget.AviaryWorkspace -> com.aviary.android.feather.widget.AviaryWorkspace:
    int mPreviousScreen -> g
    int mDefaultScreen -> h
    int mPaddingLeft -> i
    int mPaddingTop -> j
    int mPaddingRight -> k
    int mPaddingBottom -> l
    int mCurrentScreen -> m
    int mNextScreen -> n
    int mOldSelectedPosition -> o
    android.widget.Scroller mScroller -> p
    android.view.VelocityTracker mVelocityTracker -> q
    float mLastMotionX -> r
    float mLastMotionX2 -> s
    float mLastMotionY -> t
    int mTouchState -> u
    boolean mAllowLongPress -> v
    int mTouchSlop -> w
    int mMaximumVelocity -> x
    int mActivePointerId -> y
    com.aviary.android.feather.widget.AviaryWorkspaceIndicator mIndicator -> z
    float SMOOTHING_CONSTANT -> A
    boolean LOG_ENABLED -> B
    float mSmoothingTime -> C
    float mTouchX -> D
    android.view.animation.Interpolator mScrollInterpolator -> E
    android.widget.Adapter mAdapter -> a
    android.database.DataSetObserver mObserver -> b
    boolean mDataChanged -> c
    int mFirstPosition -> d
    int mItemCount -> e
    int mItemTypeCount -> f
    java.util.List mRecycleBin -> F
    int mHeightMeasureSpec -> G
    int mWidthMeasureSpec -> H
    android.support.v4.widget.EdgeEffectCompat mEdgeGlowLeft -> I
    android.support.v4.widget.EdgeEffectCompat mEdgeGlowRight -> J
    int mOverScrollMode -> K
    boolean mAllowChildSelection -> L
    boolean mCacheEnabled -> M
    com.aviary.android.feather.widget.AviaryWorkspace$OnPageChangeListener mOnPageChangeListener -> N
    android.view.View mOldSelectedChild -> O
    void setOnPageChangeListener(com.aviary.android.feather.widget.AviaryWorkspace$OnPageChangeListener) -> setOnPageChangeListener
    void initWorkspace(android.content.Context,android.util.AttributeSet,int) -> a
    void setOverScroll(int) -> setOverScroll
    int getOverScroll() -> getOverScroll
    void setAllowChildSelection(boolean) -> setAllowChildSelection
    android.widget.Adapter getAdapter() -> getAdapter
    void setAdapter(android.widget.Adapter) -> setAdapter
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void addView(android.view.View) -> addView
    void addView(android.view.View,int) -> addView
    void addView(android.view.View,int,int) -> addView
    void addView(android.view.View,android.view.ViewGroup$LayoutParams) -> addView
    int getCurrentScreen() -> getCurrentScreen
    int getTotalPages() -> getTotalPages
    void setCurrentScreen(int) -> setCurrentScreen
    void scrollTo(int,int) -> scrollTo
    void computeScroll() -> computeScroll
    void onFinishedAnimation(int) -> c
    void detachOffScreenChildren(boolean) -> a
    void drawEdges(android.graphics.Canvas) -> a
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void handleDataChanged() -> d
    void onLayout(boolean,int,int,int,int) -> onLayout
    void checkSelectionChanged() -> a
    android.view.View makeAndAddView(int,int,int,boolean) -> a
    void setUpChild(android.view.View,int,int,boolean) -> a
    void layoutChildren() -> e
    int calculateTop(android.view.View,boolean) -> a
    int getTotalWidth() -> getTotalWidth
    int getScreenScrollPositionX(int) -> d
    void fillToGalleryRight() -> f
    void fillToGalleryLeft() -> g
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void resetList() -> b
    void emptyRecycler() -> h
    void setNextSelectedPositionInt(int) -> setNextSelectedPositionInt
    void setSelectedPositionInt(int) -> setSelectedPositionInt
    boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean) -> requestChildRectangleOnScreen
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchUnhandledMove(android.view.View,int) -> dispatchUnhandledMove
    void setEnabled(boolean) -> setEnabled
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void focusableViewAvailable(android.view.View) -> focusableViewAvailable
    void enableChildrenCache(int,int) -> a
    void clearChildrenCache() -> c
    void setCacheEnabled(boolean) -> setCacheEnabled
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void acquireVelocityTrackerAndAddMovement(android.view.MotionEvent) -> b
    void releaseVelocityTracker() -> i
    void snapToScreen(int) -> a
    void snapToScreen(int,int,boolean) -> a
    void postUpdateIndicator(int,int) -> b
    void edgeReached(int,int,int) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void setAllowLongPress(boolean) -> setAllowLongPress
    void setIndicator(com.aviary.android.feather.widget.AviaryWorkspaceIndicator) -> setIndicator
    android.view.View getScreenAt(int) -> b
    com.aviary.android.feather.widget.AviaryWorkspace$OnPageChangeListener access$1(com.aviary.android.feather.widget.AviaryWorkspace) -> a
    int access$2(com.aviary.android.feather.widget.AviaryWorkspace) -> b
    com.aviary.android.feather.widget.AviaryWorkspaceIndicator access$3(com.aviary.android.feather.widget.AviaryWorkspace) -> c
com.aviary.android.feather.widget.AviaryWorkspace$1 -> com.aviary.android.feather.widget.AviaryWorkspace$1:
    com.aviary.android.feather.widget.AviaryWorkspace this$0 -> a
    int val$previousScreen -> b
    void run() -> run
com.aviary.android.feather.widget.AviaryWorkspace$2 -> com.aviary.android.feather.widget.AviaryWorkspace$2:
    com.aviary.android.feather.widget.AviaryWorkspace this$0 -> a
    int val$screen -> b
    int val$count -> c
    void run() -> run
com.aviary.android.feather.widget.AviaryWorkspace$OnPageChangeListener -> com.aviary.android.feather.widget.y:
    void onPageChanged(int,int) -> a
com.aviary.android.feather.widget.AviaryWorkspace$SavedState -> com.aviary.android.feather.widget.AviaryWorkspace$SavedState:
    int currentScreen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.aviary.android.feather.widget.AviaryWorkspace$SavedState$1 -> com.aviary.android.feather.widget.z:
    com.aviary.android.feather.widget.AviaryWorkspace$SavedState createFromParcel(android.os.Parcel) -> a
    com.aviary.android.feather.widget.AviaryWorkspace$SavedState[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.aviary.android.feather.widget.AviaryWorkspace$WorkspaceDataSetObserver -> com.aviary.android.feather.widget.aa:
    com.aviary.android.feather.widget.AviaryWorkspace this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
com.aviary.android.feather.widget.AviaryWorkspaceIndicator -> com.aviary.android.feather.widget.AviaryWorkspaceIndicator:
    int mResId -> a
    int mSelected -> b
    int mResWidth -> c
    int mResHeight -> d
    void init(android.content.Context,android.util.AttributeSet,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void resetView(int) -> a
    void setLevel(int,int) -> a
com.aviary.android.feather.widget.CellLayout -> com.aviary.android.feather.widget.CellLayout:
    int mLayoutDirection -> d
    int mCellWidth -> e
    int mCellHeight -> f
    int mStartPadding -> g
    int mEndPadding -> h
    int mTopPadding -> i
    int mBottomPadding -> j
    int mAxisRows -> k
    int mAxisCells -> l
    int mWidthGap -> m
    int mHeightGap -> n
    int mCellPaddingH -> o
    int mCellPaddingV -> p
    com.aviary.android.feather.widget.CellLayout$CellInfo mCellInfo -> a
    int[] mCellXY -> b
    boolean[][] mOccupied -> c
    boolean mLastDownOnOccupiedCell -> q
    void resetCells() -> b
    void setNumCols(int) -> setNumCols
    void setNumRows(int) -> setNumRows
    void removeAllViews() -> removeAllViews
    void cancelLongPress() -> cancelLongPress
    int getCountX() -> getCountX
    int getCountY() -> getCountY
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    com.aviary.android.feather.widget.CellLayout$CellInfo findVacantCell() -> a
    com.aviary.android.feather.widget.CellLayout$CellInfo findVacantCell(int,int) -> a
    boolean findVacantCell(int,int,int,int) -> a
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    boolean requestFocus(int,android.graphics.Rect) -> requestFocus
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    int getCellWidth() -> getCellWidth
    int getCellHeight() -> getCellHeight
    int getLeftPadding() -> getLeftPadding
    int getTopPadding() -> getTopPadding
    int getRightPadding() -> getRightPadding
    int getBottomPadding() -> getBottomPadding
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void setChildrenDrawingCacheEnabled(boolean) -> setChildrenDrawingCacheEnabled
    void setChildrenDrawnWithCacheEnabled(boolean) -> setChildrenDrawnWithCacheEnabled
    void setEnabled(boolean) -> setEnabled
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
com.aviary.android.feather.widget.CellLayout$CellInfo -> com.aviary.android.feather.widget.ab:
    android.view.View cell -> a
    int cellX -> b
    int cellY -> c
    int spanH -> d
    int spanV -> e
    int screen -> f
    android.graphics.Rect current -> g
    java.lang.String toString() -> toString
com.aviary.android.feather.widget.CellLayout$LayoutParams -> com.aviary.android.feather.widget.ac:
    int cellX -> a
    int cellY -> b
    int cellHSpan -> c
    int cellVSpan -> d
    int x -> e
    int y -> f
    boolean regenerateId -> g
    void setup(int,int,int,int,int,int) -> a
com.aviary.android.feather.widget.CropImageView -> com.aviary.android.feather.widget.CropImageView:
    int mMotionEdge -> d
    com.aviary.android.feather.widget.HighlightView mHighlightView -> e
    com.aviary.android.feather.widget.CropImageView$OnHighlightSingleTapUpConfirmedListener mHighlightSingleTapUpListener -> f
    com.aviary.android.feather.widget.HighlightView mMotionHighlightView -> g
    int mCropMinSize -> h
    android.os.Handler mHandler -> a
    int mHighlighStyle -> i
    java.lang.Runnable onLayoutRunnable -> b
    android.graphics.Rect mRect1 -> j
    android.graphics.Rect mRect2 -> k
    double mAspectRatio -> c
    boolean mAspectRatioFixed -> l
    void setOnHighlightSingleTapUpConfirmedListener(com.aviary.android.feather.widget.CropImageView$OnHighlightSingleTapUpConfirmedListener) -> setOnHighlightSingleTapUpConfirmedListener
    void setMinCropSize(int) -> setMinCropSize
    void init(android.content.Context,android.util.AttributeSet,int) -> a
    void setImageDrawable(android.graphics.drawable.Drawable,android.graphics.Matrix,float,float) -> a
    void onLayoutChanged(int,int,int,int) -> a
    void postTranslate(float,float) -> a
    void postScale(float,float,float) -> a
    boolean ensureVisible(com.aviary.android.feather.widget.HighlightView) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void setHighlightView(com.aviary.android.feather.widget.HighlightView) -> setHighlightView
    com.aviary.android.feather.widget.HighlightView getHighlightView() -> getHighlightView
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setImageBitmap(android.graphics.Bitmap,double,boolean) -> a
    void setAspectRatio(double,boolean) -> a
    void onDrawableChanged(android.graphics.drawable.Drawable) -> a
    void updateCropView(boolean) -> a
    void updateAspectRatio(double,com.aviary.android.feather.widget.HighlightView,boolean) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    com.aviary.android.feather.library.graphics.RectD computeFinalCropRect(double) -> a
    double getAspectRatio() -> getAspectRatio
    boolean getAspectRatioIsFixed() -> getAspectRatioIsFixed
    com.aviary.android.feather.widget.HighlightView access$0(com.aviary.android.feather.widget.CropImageView) -> a
    void access$1(com.aviary.android.feather.widget.CropImageView,com.aviary.android.feather.widget.HighlightView) -> a
    void access$2(com.aviary.android.feather.widget.CropImageView,int) -> a
    com.aviary.android.feather.widget.HighlightView access$3(com.aviary.android.feather.widget.CropImageView) -> b
    int access$4(com.aviary.android.feather.widget.CropImageView) -> c
    com.aviary.android.feather.widget.CropImageView$OnHighlightSingleTapUpConfirmedListener access$5(com.aviary.android.feather.widget.CropImageView) -> d
    boolean access$6(com.aviary.android.feather.widget.CropImageView) -> e
    float access$7(com.aviary.android.feather.widget.CropImageView,float,float) -> a
    void access$8(com.aviary.android.feather.widget.CropImageView,float,float,float,float) -> a
    android.view.ScaleGestureDetector access$9(com.aviary.android.feather.widget.CropImageView) -> f
    boolean access$10(com.aviary.android.feather.widget.CropImageView,com.aviary.android.feather.widget.HighlightView) -> b
    void access$11(com.aviary.android.feather.widget.CropImageView,float,float,double) -> a
com.aviary.android.feather.widget.CropImageView$1 -> com.aviary.android.feather.widget.CropImageView$1:
    com.aviary.android.feather.widget.CropImageView this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.CropImageView$2 -> com.aviary.android.feather.widget.CropImageView$2:
    com.aviary.android.feather.widget.CropImageView this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.CropImageView$3 -> com.aviary.android.feather.widget.CropImageView$3:
    com.aviary.android.feather.widget.CropImageView this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.CropImageView$CropGestureListener -> com.aviary.android.feather.widget.ad:
    com.aviary.android.feather.widget.CropImageView this$0 -> a
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
com.aviary.android.feather.widget.CropImageView$OnHighlightSingleTapUpConfirmedListener -> com.aviary.android.feather.widget.ae:
    void onSingleTapUpConfirmed() -> a
com.aviary.android.feather.widget.DrawableHighlightView -> com.aviary.android.feather.widget.af:
    int STATE_NONE -> c
    int STATE_SELECTED -> d
    int STATE_FOCUSED -> e
    com.aviary.android.feather.widget.DrawableHighlightView$OnDeleteClickListener mDeleteClickListener -> f
    boolean mHidden -> g
    int mMode -> h
    int mState -> i
    android.graphics.RectF mDrawRect -> j
    android.graphics.RectF mTempRect -> k
    android.graphics.RectF mCropRect -> l
    android.graphics.Matrix mMatrix -> m
    com.aviary.android.feather.library.graphics.drawable.FeatherDrawable mContent -> n
    com.aviary.android.feather.library.graphics.drawable.EditableDrawable mEditableContent -> o
    android.graphics.drawable.Drawable mAnchorRotate -> p
    android.graphics.drawable.Drawable mAnchorDelete -> q
    android.graphics.drawable.Drawable mBackgroundDrawable -> r
    int mAnchorRotateWidth -> s
    int mAnchorRotateHeight -> t
    int mAnchorDeleteHeight -> u
    int mAnchorDeleteWidth -> v
    int mResizeEdgeMode -> w
    boolean mRotateEnabled -> x
    boolean mScaleEnabled -> y
    boolean mMoveEnabled -> z
    float mRotation -> A
    float mRatio -> B
    android.graphics.Matrix mRotateMatrix -> C
    float[] fpoints -> D
    int mPadding -> E
    boolean mShowAnchors -> F
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV mAlignVerticalMode -> G
    it.sephiroth.android.library.imagezoom.ImageViewTouch mContext -> H
    int[] STATE_SET_NONE -> I
    int[] STATE_SET_SELECTED -> J
    int[] STATE_SET_SELECTED_PRESSED -> K
    int[] STATE_SET_SELECTED_FOCUSED -> L
    android.graphics.RectF mInvalidateRectF -> a
    android.graphics.Rect mInvalidateRect -> b
    void setAlignModeV(com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV) -> a
    android.graphics.RectF computeLayout() -> a
    void dispose() -> b
    void copyBounds(android.graphics.RectF) -> a
    void draw(android.graphics.Canvas) -> a
    android.graphics.RectF getCropRectF() -> c
    android.graphics.Matrix getCropRotationMatrix() -> d
    android.graphics.RectF getDisplayRect(android.graphics.Matrix,android.graphics.RectF) -> a
    android.graphics.RectF getDrawRect() -> e
    int getHit(float,float) -> a
    void onSingleTapConfirmed(float,float) -> b
    android.graphics.Rect getInvalidationRect() -> f
    android.graphics.Matrix getMatrix() -> g
    int getMode() -> h
    float getRotation() -> i
    void growBy(float) -> a
    void growBy(float,float,boolean) -> a
    void onMouseMove(int,android.view.MotionEvent,float,float) -> a
    void invalidate() -> j
    void moveBy(float,float) -> c
    void rotateBy(float,float,float,float) -> a
    void setHidden(boolean) -> a
    void setMinSize(float) -> b
    void setMode(int) -> a
    void updateDrawableState() -> k
    void setOnDeleteClickListener(com.aviary.android.feather.widget.DrawableHighlightView$OnDeleteClickListener) -> a
    void setSelected(boolean) -> b
    boolean isSelected() -> l
    void setFocused(boolean) -> c
    boolean isFocused() -> m
    void setup(android.content.Context,android.graphics.Matrix,android.graphics.Rect,android.graphics.RectF,boolean) -> a
    com.aviary.android.feather.library.graphics.drawable.FeatherDrawable getContent() -> n
    void updateRatio() -> p
    boolean forceUpdate() -> o
    void onSizeChanged(com.aviary.android.feather.library.graphics.drawable.EditableDrawable,float,float,float,float) -> a
com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV -> com.aviary.android.feather.widget.ag:
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV Top -> a
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV Bottom -> b
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV Center -> c
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV[] ENUM$VALUES -> d
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV[] values() -> values
    com.aviary.android.feather.widget.DrawableHighlightView$AlignModeV valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.DrawableHighlightView$OnDeleteClickListener -> com.aviary.android.feather.widget.ah:
    void onDeleteClick() -> a
com.aviary.android.feather.widget.EffectThumbLayout -> com.aviary.android.feather.widget.EffectThumbLayout:
    boolean mOpened -> a
    int mThumbAnimationDuration -> b
    android.view.View mHiddenView -> c
    android.view.View mImageView -> d
    void init(android.content.Context,android.util.AttributeSet,int) -> a
    void setSelected(boolean) -> setSelected
    void open() -> a
    void close() -> b
    void setIsOpened(boolean) -> setIsOpened
    void postSetIsOpened(boolean) -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void postAnimateView(int,boolean) -> a
    void animateView(int,boolean) -> b
    android.view.View access$0(com.aviary.android.feather.widget.EffectThumbLayout) -> a
    android.view.View access$1(com.aviary.android.feather.widget.EffectThumbLayout) -> b
    void access$2(com.aviary.android.feather.widget.EffectThumbLayout,boolean) -> a
    boolean access$3(com.aviary.android.feather.widget.EffectThumbLayout) -> c
com.aviary.android.feather.widget.EffectThumbLayout$1 -> com.aviary.android.feather.widget.EffectThumbLayout$1:
    com.aviary.android.feather.widget.EffectThumbLayout this$0 -> a
    boolean val$opened -> b
    void run() -> run
com.aviary.android.feather.widget.EffectThumbLayout$2 -> com.aviary.android.feather.widget.EffectThumbLayout$2:
    com.aviary.android.feather.widget.EffectThumbLayout this$0 -> a
    int val$durationMs -> b
    boolean val$isClosing -> c
    void run() -> run
com.aviary.android.feather.widget.EffectThumbLayout$3 -> com.aviary.android.feather.widget.EffectThumbLayout$3:
    com.aviary.android.feather.widget.EffectThumbLayout this$0 -> a
    int val$durationMs -> b
    long val$startTime -> c
    it.sephiroth.android.library.imagezoom.easing.Easing val$easing -> d
    float val$endHeight -> e
    boolean val$isClosing -> f
    void run() -> run
com.aviary.android.feather.widget.HighlightView -> com.aviary.android.feather.widget.ai:
    boolean mHidden -> g
    int mParentWidth -> h
    int mParentHeight -> i
    android.os.Handler mHandler -> j
    int mMinSize -> k
    com.aviary.android.feather.widget.HighlightView$Mode mMode -> l
    android.graphics.Rect mDrawRect -> m
    com.aviary.android.feather.library.graphics.RectD mImageRect -> n
    com.aviary.android.feather.library.graphics.RectD mCropRect -> o
    android.graphics.Matrix mMatrix -> p
    boolean mMaintainAspectRatio -> q
    double mInitialAspectRatio -> r
    android.graphics.drawable.Drawable mResizeDrawable -> s
    android.graphics.Paint mOutlinePaint -> t
    android.graphics.Paint mOutlinePaint2 -> u
    android.graphics.Paint mOutlineFill -> v
    android.graphics.Paint mLinesPaintShadow -> w
    int mStrokeColor -> x
    int mStrokeColorPressed -> y
    int mOutsideFillColor -> z
    int mOutsideFillColorPressed -> A
    int mStrokeWidth -> B
    int mStrokeWidth2 -> C
    int mInternalStrokeColor -> D
    int mInternalStrokeColorPressed -> E
    int dWidth -> F
    int dHeight -> G
    int grid_rows -> a
    int grid_cols -> b
    android.graphics.Rect mViewDrawingRect -> H
    android.graphics.Path mPath -> I
    android.graphics.Path mLinesPath -> J
    android.graphics.Path mInversePath -> K
    com.aviary.android.feather.library.graphics.RectD tmpRect2 -> L
    android.graphics.Rect tmpRect4 -> M
    android.graphics.RectF tmpDrawRect2F -> N
    android.graphics.RectF tmpDrawRectF -> O
    android.graphics.RectF tmpDisplayRectF -> P
    android.graphics.Rect tmpRectMotion -> Q
    com.aviary.android.feather.library.graphics.RectD tmpRectMotionD -> R
    android.graphics.RectF tempLayoutRectF -> S
    float hysteresis -> c
    boolean mRunning -> d
    int animationDurationMs -> e
    it.sephiroth.android.library.imagezoom.easing.Easing mEasing -> f
    void dispose() -> a
    void setMinSize(int) -> a
    void draw(android.graphics.Canvas) -> a
    void setMode(com.aviary.android.feather.widget.HighlightView$Mode) -> a
    int getHit(float,float) -> a
    boolean isLeftEdge(int) -> b
    boolean isRightEdge(int) -> c
    boolean isTopEdge(int) -> d
    boolean isBottomEdge(int) -> e
    void handleMotion(int,float,float) -> a
    double calculateDy(double,double) -> a
    double calculateDx(double,double) -> b
    void growWithConstantAspectSize(int,double,double) -> a
    void growWithoutConstantAspectSize(int,double,double) -> b
    void moveBy(double,double) -> c
    void moveBy(float,float) -> b
    android.graphics.Rect getInvalidateRect() -> b
    float getScale() -> c
    void adjustCropRect(com.aviary.android.feather.library.graphics.RectD) -> a
    com.aviary.android.feather.library.graphics.RectD adjustRealCropRect(android.graphics.Matrix,com.aviary.android.feather.library.graphics.RectD,com.aviary.android.feather.library.graphics.RectD) -> a
    void computeLayout(boolean,android.graphics.Rect) -> a
    void getDisplayRect(android.graphics.Matrix,com.aviary.android.feather.library.graphics.RectD,android.graphics.Rect) -> a
    void invalidate() -> d
    boolean isRunning() -> e
    void animateTo(android.view.View,android.graphics.Matrix,com.aviary.android.feather.library.graphics.RectD,com.aviary.android.feather.library.graphics.RectD,boolean) -> a
    void setup(android.graphics.Matrix,com.aviary.android.feather.library.graphics.RectD,com.aviary.android.feather.library.graphics.RectD,boolean) -> a
    android.graphics.Matrix getMatrix() -> f
    android.graphics.Rect getDrawRect() -> g
    com.aviary.android.feather.library.graphics.RectD getCropRectD() -> h
    void onSizeChanged(com.aviary.android.feather.widget.CropImageView,int,int,int,int) -> a
    android.graphics.Rect access$0(com.aviary.android.feather.widget.HighlightView) -> a
    android.os.Handler access$1() -> i
    void access$2(com.aviary.android.feather.widget.HighlightView,boolean) -> a
com.aviary.android.feather.widget.HighlightView$1 -> com.aviary.android.feather.widget.HighlightView$1:
    com.aviary.android.feather.widget.HighlightView this$0 -> a
    long val$startTime -> b
    double val$pt1 -> c
    double val$pt2 -> d
    double val$pt3 -> e
    double val$pt4 -> f
    float[] val$topLeft -> g
    float[] val$bottomRight -> h
    android.view.View val$parent -> i
    boolean val$maintainAspectRatio -> j
    void run() -> run
com.aviary.android.feather.widget.HighlightView$Mode -> com.aviary.android.feather.widget.aj:
    com.aviary.android.feather.widget.HighlightView$Mode None -> a
    com.aviary.android.feather.widget.HighlightView$Mode Move -> b
    com.aviary.android.feather.widget.HighlightView$Mode Grow -> c
    com.aviary.android.feather.widget.HighlightView$Mode[] ENUM$VALUES -> d
    com.aviary.android.feather.widget.HighlightView$Mode[] values() -> values
    com.aviary.android.feather.widget.HighlightView$Mode valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.IAPDialog -> com.aviary.android.feather.widget.ak:
    int mMainLayoutResId -> d
    int mCellResId -> e
    android.view.View mErrorView -> f
    android.widget.Button mRetryButton -> g
    android.view.View mLoader -> h
    android.view.View mBackground -> i
    com.aviary.android.feather.widget.AviaryTextView mTitle -> j
    com.aviary.android.feather.widget.AviaryTextView mDescription -> k
    android.widget.Button mButton -> l
    com.aviary.android.feather.widget.AviaryWorkspace mWorkspace -> m
    com.aviary.android.feather.widget.AviaryWorkspaceIndicator mWorkspaceIndicator -> n
    android.widget.ImageView mIcon -> o
    com.aviary.android.feather.widget.IAPDialog$IAPUpdater mCurrentData -> p
    com.aviary.android.feather.library.services.ThreadPoolService mThreadService -> q
    com.aviary.android.feather.library.services.ImageCacheService mCacheService -> r
    com.aviary.android.feather.AviaryMainController mController -> s
    boolean mDownloadOnDemand -> t
    com.aviary.android.feather.widget.IAPDialog$OnCloseListener mCloseListener -> u
    int mRows -> a
    int mCols -> b
    int mItemsPerPage -> c
    android.view.ViewGroup mView -> v
    com.aviary.android.feather.library.log.LoggerFactory$Logger logger -> w
    java.lang.Runnable mHide -> x
    com.aviary.android.feather.widget.IAPDialog create(android.view.ViewGroup,com.aviary.android.feather.widget.IAPDialog$IAPUpdater) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void onAttachedToWindow() -> a
    void computeLayoutItems(android.content.res.Resources,int) -> a
    void onDetachedFromWindow() -> b
    void onClick(android.view.View) -> onClick
    void initWorkspace(com.aviary.android.feather.library.plugins.PluginFactory$ExternalPlugin) -> a
    java.lang.String getRemoteFolder(com.aviary.android.feather.library.plugins.PluginFactory$ExternalPlugin) -> b
    void setOnCloseListener(com.aviary.android.feather.widget.IAPDialog$OnCloseListener) -> a
    com.aviary.android.feather.library.plugins.PluginFactory$ExternalPlugin getPlugin() -> c
    void update(com.aviary.android.feather.widget.IAPDialog$IAPUpdater) -> a
    void downloadPlugin(java.lang.String,int) -> a
    void processPlugins(java.util.List,java.lang.String,int) -> a
    void onDownloadError() -> g
    void processPlugin() -> h
    void downloadPackIcon(com.aviary.android.feather.library.plugins.PluginFactory$ExternalPlugin) -> c
    void onPageChanged(int,int) -> a
    boolean valid() -> d
    void hide() -> e
    void finalize() -> finalize
    void dismiss(boolean) -> a
    void removeFromParent() -> i
    void handleHide() -> j
    void access$0(com.aviary.android.feather.widget.IAPDialog) -> a
    com.aviary.android.feather.library.log.LoggerFactory$Logger access$1() -> f
    com.aviary.android.feather.widget.AviaryWorkspace access$2(com.aviary.android.feather.widget.IAPDialog) -> b
    int access$3(com.aviary.android.feather.widget.IAPDialog) -> c
    boolean access$4(com.aviary.android.feather.widget.IAPDialog) -> d
    com.aviary.android.feather.library.services.ThreadPoolService access$5(com.aviary.android.feather.widget.IAPDialog) -> e
    com.aviary.android.feather.library.services.ImageCacheService access$6(com.aviary.android.feather.widget.IAPDialog) -> f
    android.view.ViewGroup access$7(com.aviary.android.feather.widget.IAPDialog) -> g
    void access$8(com.aviary.android.feather.widget.IAPDialog,java.util.List,java.lang.String,int) -> a
    void access$9(com.aviary.android.feather.widget.IAPDialog) -> h
    com.aviary.android.feather.AviaryMainController access$10(com.aviary.android.feather.widget.IAPDialog) -> i
    com.aviary.android.feather.widget.IAPDialog$OnCloseListener access$11(com.aviary.android.feather.widget.IAPDialog) -> j
    void access$12(com.aviary.android.feather.widget.IAPDialog) -> k
com.aviary.android.feather.widget.IAPDialog$1 -> com.aviary.android.feather.widget.IAPDialog$1:
    com.aviary.android.feather.widget.IAPDialog this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.IAPDialog$2 -> com.aviary.android.feather.widget.al:
    com.aviary.android.feather.widget.IAPDialog this$0 -> a
    java.lang.String val$name -> b
    int val$type -> c
    void onFutureDone(java.util.concurrent.Future) -> a
    com.aviary.android.feather.widget.IAPDialog access$0(com.aviary.android.feather.widget.IAPDialog$2) -> a
com.aviary.android.feather.widget.IAPDialog$2$1 -> com.aviary.android.feather.widget.IAPDialog$2$1:
    com.aviary.android.feather.widget.IAPDialog$2 this$1 -> a
    java.util.List val$allplugins -> b
    java.lang.String val$name -> c
    int val$type -> d
    void run() -> run
com.aviary.android.feather.widget.IAPDialog$2$2 -> com.aviary.android.feather.widget.IAPDialog$2$2:
    com.aviary.android.feather.widget.IAPDialog$2 this$1 -> a
    void run() -> run
com.aviary.android.feather.widget.IAPDialog$3 -> com.aviary.android.feather.widget.am:
    com.aviary.android.feather.widget.IAPDialog this$0 -> a
    com.aviary.android.feather.library.plugins.PluginFactory$ExternalPlugin val$plugin -> b
    void onClick(android.view.View) -> onClick
    com.aviary.android.feather.widget.IAPDialog access$0(com.aviary.android.feather.widget.IAPDialog$3) -> a
com.aviary.android.feather.widget.IAPDialog$3$1 -> com.aviary.android.feather.widget.IAPDialog$3$1:
    com.aviary.android.feather.widget.IAPDialog$3 this$1 -> a
    void run() -> run
com.aviary.android.feather.widget.IAPDialog$4 -> com.aviary.android.feather.widget.an:
    com.aviary.android.feather.widget.IAPDialog this$0 -> a
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
com.aviary.android.feather.widget.IAPDialog$BackgroundImageLoader -> com.aviary.android.feather.widget.ao:
    java.lang.ref.WeakReference mImageCache -> a
    boolean mSaveToCache -> b
    android.graphics.Bitmap call(com.aviary.android.feather.library.services.IAviaryController,java.lang.String) -> a
    java.lang.Object call(com.aviary.android.feather.library.services.IAviaryController,java.lang.Object) -> a
com.aviary.android.feather.widget.IAPDialog$BackgroundImageLoaderListener -> com.aviary.android.feather.widget.ap:
    java.lang.ref.WeakReference mImageView -> a
    java.lang.String mUrl -> b
    com.aviary.android.feather.widget.IAPDialog this$0 -> c
    void onFutureDone(java.util.concurrent.Future) -> a
    com.aviary.android.feather.widget.IAPDialog access$0(com.aviary.android.feather.widget.IAPDialog$BackgroundImageLoaderListener) -> a
com.aviary.android.feather.widget.IAPDialog$BackgroundImageLoaderListener$1 -> com.aviary.android.feather.widget.IAPDialog$BackgroundImageLoaderListener$1:
    com.aviary.android.feather.widget.IAPDialog$BackgroundImageLoaderListener this$1 -> a
    android.graphics.Bitmap val$bitmap -> b
    android.widget.ImageView val$image -> c
    void run() -> run
com.aviary.android.feather.widget.IAPDialog$IAPUpdater -> com.aviary.android.feather.widget.aq:
    com.aviary.android.feather.library.plugins.PluginFactory$ExternalPlugin plugin -> a
    java.lang.String packagename -> b
    int type -> c
    java.lang.String getPackageName() -> a
    void access$0(com.aviary.android.feather.widget.IAPDialog$IAPUpdater,com.aviary.android.feather.library.plugins.PluginFactory$ExternalPlugin) -> a
    void access$1(com.aviary.android.feather.widget.IAPDialog$IAPUpdater,java.lang.String) -> a
    void access$2(com.aviary.android.feather.widget.IAPDialog$IAPUpdater,int) -> a
    com.aviary.android.feather.library.plugins.PluginFactory$ExternalPlugin access$3(com.aviary.android.feather.widget.IAPDialog$IAPUpdater) -> a
    java.lang.String access$4(com.aviary.android.feather.widget.IAPDialog$IAPUpdater) -> b
    int access$5(com.aviary.android.feather.widget.IAPDialog$IAPUpdater) -> c
com.aviary.android.feather.widget.IAPDialog$IAPUpdater$Builder -> com.aviary.android.feather.widget.ar:
    com.aviary.android.feather.widget.IAPDialog$IAPUpdater result -> a
    com.aviary.android.feather.widget.IAPDialog$IAPUpdater$Builder setPlugin(com.aviary.android.feather.library.plugins.PluginFactory$ExternalPlugin) -> a
    com.aviary.android.feather.widget.IAPDialog$IAPUpdater$Builder setPlugin(java.lang.String,int) -> a
    com.aviary.android.feather.widget.IAPDialog$IAPUpdater build() -> a
com.aviary.android.feather.widget.IAPDialog$OnCloseListener -> com.aviary.android.feather.widget.as:
    void onClose() -> a
com.aviary.android.feather.widget.IAPDialog$WorkspaceAdapter -> com.aviary.android.feather.widget.at:
    android.view.LayoutInflater mLayoutInflater -> a
    int mResId -> b
    java.lang.String mUrlPrefix -> c
    com.aviary.android.feather.widget.IAPDialog this$0 -> d
    java.lang.String getUrlPrefix() -> a
    int getCount() -> getCount
    int getRealCount() -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aviary.android.feather.widget.ImageViewDrawableOverlay -> com.aviary.android.feather.widget.ImageViewDrawableOverlay:
    java.util.List mOverlayViews -> d
    com.aviary.android.feather.widget.DrawableHighlightView mOverlayView -> e
    com.aviary.android.feather.widget.ImageViewDrawableOverlay$OnDrawableEventListener mDrawableListener -> f
    boolean mForceSingleSelection -> g
    com.aviary.android.feather.library.services.drag.DropTarget$DropTargetListener mDropTargetListener -> h
    android.graphics.Paint mDropPaint -> i
    android.graphics.Rect mTempRect -> j
    boolean mScaleWithContent -> k
    int mOverlayStyleId -> l
    boolean mScrollStarted -> a
    float mLastMotionScrollX -> b
    float mLastMotionScrollY -> c
    void init(android.content.Context,android.util.AttributeSet,int) -> a
    int getOverlayStyleId() -> getOverlayStyleId
    void setScaleWithContent(boolean) -> setScaleWithContent
    boolean getScaleWithContent() -> getScaleWithContent
    void setForceSingleSelection(boolean) -> setForceSingleSelection
    void setDropTargetListener(com.aviary.android.feather.library.services.drag.DropTarget$DropTargetListener) -> setDropTargetListener
    void setOnDrawableEventListener(com.aviary.android.feather.widget.ImageViewDrawableOverlay$OnDrawableEventListener) -> setOnDrawableEventListener
    void setImageDrawable(android.graphics.drawable.Drawable,android.graphics.Matrix,float,float) -> a
    void onLayoutChanged(int,int,int,int) -> a
    void postTranslate(float,float) -> a
    void postScale(float,float,float) -> a
    void ensureVisible(com.aviary.android.feather.widget.DrawableHighlightView,float,float) -> a
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> a
    boolean onDown(android.view.MotionEvent) -> b
    boolean onUp(android.view.MotionEvent) -> c
    boolean onSingleTapUp(android.view.MotionEvent) -> d
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> a
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> b
    void onDraw(android.graphics.Canvas) -> onDraw
    void clearOverlays() -> a
    boolean addHighlightView(com.aviary.android.feather.widget.DrawableHighlightView) -> a
    int getHighlightCount() -> getHighlightCount
    com.aviary.android.feather.widget.DrawableHighlightView getHighlightViewAt(int) -> a
    boolean removeHightlightView(com.aviary.android.feather.widget.DrawableHighlightView) -> b
    void onZoomAnimationCompleted(float) -> a
    com.aviary.android.feather.widget.DrawableHighlightView getSelectedHighlightView() -> getSelectedHighlightView
    com.aviary.android.feather.widget.DrawableHighlightView checkSelection(android.view.MotionEvent) -> e
    void setSelectedHighlightView(com.aviary.android.feather.widget.DrawableHighlightView) -> setSelectedHighlightView
    void onDrop(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> a
    void onDragEnter(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> b
    void onDragOver(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> c
    void onDragExit(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> d
    boolean acceptDrop(com.aviary.android.feather.library.services.DragControllerService$DragSource,int,int,int,int,com.aviary.android.feather.library.services.drag.DragView,java.lang.Object) -> e
com.aviary.android.feather.widget.ImageViewDrawableOverlay$OnDrawableEventListener -> com.aviary.android.feather.widget.au:
    void onFocusChange(com.aviary.android.feather.widget.DrawableHighlightView,com.aviary.android.feather.widget.DrawableHighlightView) -> a
    void onDown(com.aviary.android.feather.widget.DrawableHighlightView) -> b
    void onMove(com.aviary.android.feather.widget.DrawableHighlightView) -> c
    void onClick(com.aviary.android.feather.widget.DrawableHighlightView) -> d
com.aviary.android.feather.widget.ImageViewSpotDraw -> com.aviary.android.feather.widget.ImageViewSpotDraw:
    boolean mPaintEnabled -> a
    android.graphics.Paint mPaint -> b
    float mCurrentScale -> c
    float mBrushSize -> d
    android.graphics.Path tmpPath -> e
    android.graphics.Canvas mCanvas -> f
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode mTouchMode -> g
    float mX -> h
    float mY -> i
    float mStartX -> j
    float mStartY -> k
    android.graphics.Matrix mIdentityMatrix -> l
    android.graphics.Matrix mInvertedMatrix -> m
    com.aviary.android.feather.widget.ImageViewSpotDraw$OnDrawListener mDrawListener -> n
    double mRestiction -> o
    boolean mMoved -> p
    void setOnDrawStartListener(com.aviary.android.feather.widget.ImageViewSpotDraw$OnDrawListener) -> setOnDrawStartListener
    void init(android.content.Context,android.util.AttributeSet,int) -> a
    void setDrawLimit(double) -> setDrawLimit
    void setBrushSize(float) -> setBrushSize
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode getDrawMode() -> getDrawMode
    void setDrawMode(com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode) -> setDrawMode
    void onDrawModeChanged() -> a
    android.graphics.Paint getPaint() -> getPaint
    void setPaint(android.graphics.Paint) -> setPaint
    void setPaintEnabled(boolean) -> setPaintEnabled
    void onDraw(android.graphics.Canvas) -> onDraw
    android.graphics.RectF getImageRect() -> getImageRect
    void onDrawableChanged(android.graphics.drawable.Drawable) -> a
    void onLayoutChanged(int,int,int,int) -> a
    void touch_start(float,float) -> e
    void touch_move(float,float) -> f
    void touch_up() -> c
    float[] getMatrixValues(android.graphics.Matrix) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.aviary.android.feather.widget.ImageViewSpotDraw$OnDrawListener -> com.aviary.android.feather.widget.av:
    void onDrawStart(float[],int) -> a
    void onDrawing(float[],int) -> b
    void onDrawEnd() -> E
com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode -> com.aviary.android.feather.widget.aw:
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode IMAGE -> a
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode DRAW -> b
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode[] ENUM$VALUES -> c
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode[] values() -> values
    com.aviary.android.feather.widget.ImageViewSpotDraw$TouchMode valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.ImageViewTiltiShiftTouch -> com.aviary.android.feather.widget.ImageViewTiltiShiftTouch:
    float BRUSH_MULTIPLIER -> T
    int mForeColor -> a
    int mBackColor -> b
    android.graphics.Paint mPaint -> c
    android.graphics.Paint mCrossPaint -> d
    boolean mCrossEnabled -> e
    int mPaintAlpha -> f
    int mBackPaintAlpha -> g
    int mPaintAlphaDefault -> h
    int mBackPaintAlphaDefault -> i
    int mFadeOutTimeout -> j
    int mFadeOutDuration -> k
    float mCurrentScale -> l
    android.graphics.RectF mDrawingRect -> U
    android.graphics.Matrix mDrawingMatrix -> V
    android.graphics.Matrix mCenterMatrix -> W
    android.graphics.Matrix mIdentityMatrix -> m
    android.graphics.Matrix mInvertedMatrix -> n
    com.aviary.android.feather.library.graphics.CircleF mDrawingCircle -> Z
    android.graphics.RectF mShapeRect -> aa
    android.graphics.RectF mShapeRectInverted -> ab
    android.graphics.PointF mFirstPointOriginal -> ac
    android.graphics.PointF mSecondPointOriginal -> ad
    android.graphics.PointF mCenterPoint -> ae
    float mCurrentDistance -> af
    float mCurrentAngle -> ag
    int mActivePointerId -> o
    int mActivePointerIndex -> p
    boolean mInitializedTouch -> ah
    android.graphics.PointF mOldCenter -> q
    float mOldDistance -> r
    float mOldAngle -> s
    com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$OnTiltShiftDrawListener mDrawListener -> ai
    com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode mTiltShiftDrawMode -> aj
    int mMaxShapeSize -> ak
    int mMinShapeSize -> al
    float mMinShapeSizePixels -> am
    int mDefaultShapeSize -> an
    android.graphics.Path mPath -> ao
    android.graphics.Path mCrossPath -> ap
    android.graphics.RectF mBitmapRect -> aq
    android.graphics.RectF mThisRectF -> ar
    float mBitmapRectSideLength -> as
    float mDrawingRectLength -> at
    float[] mPoints -> au
    com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$FadeOutRunnable mFadeOut -> av
    boolean mPointCloudEnabled -> aw
    com.aviary.android.feather.library.utils.EasingManager mManager -> ax
    com.aviary.android.feather.widget.PointCloud mPointCloud -> ay
    int mPointWaveDuration -> az
    float mPointCluodInnerRadius -> aA
    float mPointCloudOuterRadius -> aB
    com.aviary.android.feather.library.graphics.LineF firstLine -> t
    com.aviary.android.feather.library.graphics.LineF secondLine -> u
    void setOnDrawStartListener(com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$OnTiltShiftDrawListener) -> setOnDrawStartListener
    void init(android.content.Context,android.util.AttributeSet,int) -> a
    void setPointWaveEnabled(boolean) -> setPointWaveEnabled
    void resetWave(android.graphics.RectF) -> a
    void setCrossHairSize(int,int) -> a
    void setFadeoutTimeout(int) -> setFadeoutTimeout
    void setFadeoutDuration(int) -> setFadeoutDuration
    void setTiltShiftDrawMode(com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode) -> setTiltShiftDrawMode
    com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode getTiltShiftDrawMode() -> getTiltShiftDrawMode
    void initializeTouch(float,float,float,float) -> b
    void onDrawModeChanged() -> a
    android.graphics.RectF getImageRect() -> getImageRect
    void onDraw(android.graphics.Canvas) -> onDraw
    void touch_down() -> h
    void touch_move(android.graphics.PointF,float,float,boolean) -> a
    void touch_up() -> i
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void checkLimits() -> j
    float[] getMatrixValues(android.graphics.Matrix) -> a
    void onImageMatrixChanged() -> b
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void updateBitmapRect() -> k
    void fadeOutShape(long) -> a
    void fadeInShape() -> c
    boolean access$0(com.aviary.android.feather.widget.ImageViewTiltiShiftTouch) -> a
    com.aviary.android.feather.widget.PointCloud access$1(com.aviary.android.feather.widget.ImageViewTiltiShiftTouch) -> b
com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$1 -> com.aviary.android.feather.widget.ax:
    com.aviary.android.feather.widget.ImageViewTiltiShiftTouch this$0 -> a
    void onEasingValueChanged(double,double) -> a
    void onEasingStarted(double) -> a
    void onEasingFinished(double) -> b
com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$FadeOutRunnable -> com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$FadeOutRunnable:
    boolean initialized -> b
    int startAlpha -> c
    int startAlpha2 -> d
    long startTime -> e
    it.sephiroth.android.library.imagezoom.easing.Easing mFadeoutEasing -> f
    com.aviary.android.feather.widget.ImageViewTiltiShiftTouch this$0 -> a
    void run() -> run
com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$OnTiltShiftDrawListener -> com.aviary.android.feather.widget.ay:
    void onDrawStart(float[],com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode,float,float,float,float,float,float) -> a
    void onDrawing(float[],float,float,float,float,float,float) -> a
    void onDrawEnd() -> E
com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode -> com.aviary.android.feather.widget.az:
    com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode Radial -> a
    com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode Linear -> b
    com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode None -> c
    com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode[] ENUM$VALUES -> d
    com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode[] values() -> values
    com.aviary.android.feather.widget.ImageViewTiltiShiftTouch$TiltShiftDrawMode valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.ImageViewTouchAndDraw -> com.aviary.android.feather.widget.ImageViewTouchAndDraw:
    android.graphics.Paint mPaint -> a
    android.graphics.Path tmpPath -> b
    android.graphics.Canvas mCanvas -> c
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode mTouchMode -> d
    float mX -> e
    float mY -> f
    android.graphics.Matrix mIdentityMatrix -> g
    android.graphics.Matrix mInvertedMatrix -> h
    android.graphics.Bitmap mCopy -> i
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$OnDrawStartListener mDrawListener -> j
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$OnDrawPathListener mDrawPathListener -> k
    void setOnDrawStartListener(com.aviary.android.feather.widget.ImageViewTouchAndDraw$OnDrawStartListener) -> setOnDrawStartListener
    void setOnDrawPathListener(com.aviary.android.feather.widget.ImageViewTouchAndDraw$OnDrawPathListener) -> setOnDrawPathListener
    void init(android.content.Context,android.util.AttributeSet,int) -> a
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode getDrawMode() -> getDrawMode
    void setDrawMode(com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode) -> setDrawMode
    void onDrawModeChanged() -> a
    float getDrawingScale() -> getDrawingScale
    void onLayoutChanged(int,int,int,int) -> a
    android.graphics.Paint getPaint() -> getPaint
    void setPaint(android.graphics.Paint) -> setPaint
    void onDraw(android.graphics.Canvas) -> onDraw
    void commit(android.graphics.Canvas) -> a
    void onDrawableChanged(android.graphics.drawable.Drawable) -> a
    void touch_start(float,float) -> e
    void touch_move(float,float) -> f
    void touch_up() -> c
    float[] getMatrixValues(android.graphics.Matrix) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    android.graphics.Bitmap getOverlayBitmap() -> getOverlayBitmap
com.aviary.android.feather.widget.ImageViewTouchAndDraw$OnDrawPathListener -> com.aviary.android.feather.widget.ba:
    void onStart() -> F
    void onMoveTo(float,float) -> a
    void onQuadTo(float,float,float,float) -> a
    void onEnd() -> G
com.aviary.android.feather.widget.ImageViewTouchAndDraw$OnDrawStartListener -> com.aviary.android.feather.widget.bb:
    void onDrawStart() -> E
com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode -> com.aviary.android.feather.widget.bc:
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode IMAGE -> a
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode DRAW -> b
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode[] ENUM$VALUES -> c
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode[] values() -> values
    com.aviary.android.feather.widget.ImageViewTouchAndDraw$TouchMode valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.PointCloud -> com.aviary.android.feather.widget.bd:
    java.util.ArrayList mPointCloud1 -> b
    java.util.ArrayList mPointCloud2 -> c
    android.graphics.drawable.Drawable mDrawable -> d
    float mCenterX -> e
    float mRotation -> f
    float mCenterY -> g
    android.graphics.Paint mPaint -> h
    float mScale -> i
    float mOuterRadius -> j
    com.aviary.android.feather.widget.PointCloud$WaveManager waveManager -> a
    void setCenter(float,float) -> a
    void setRotation(float) -> a
    void makePointCloud(float,float,android.graphics.RectF) -> a
    float hypot(float,float) -> b
    float max(float,float) -> c
    int getAlphaForPoint(com.aviary.android.feather.widget.PointCloud$Point,boolean) -> a
    float interp(float,float,float) -> a
    void draw(android.graphics.Canvas) -> a
com.aviary.android.feather.widget.PointCloud$Point -> com.aviary.android.feather.widget.be:
    float x -> a
    float y -> b
    float radius -> c
com.aviary.android.feather.widget.PointCloud$WaveManager -> com.aviary.android.feather.widget.bf:
    float radius -> a
    float width -> b
    float alpha -> c
    com.aviary.android.feather.widget.PointCloud$WaveType type -> d
    void setRadius(float) -> a
    void setType(com.aviary.android.feather.widget.PointCloud$WaveType) -> a
    com.aviary.android.feather.widget.PointCloud$WaveType getType() -> a
    void setAlpha(float) -> b
    float getAlpha() -> b
    float access$0(com.aviary.android.feather.widget.PointCloud$WaveManager) -> a
    float access$1(com.aviary.android.feather.widget.PointCloud$WaveManager) -> b
    float access$2(com.aviary.android.feather.widget.PointCloud$WaveManager) -> c
com.aviary.android.feather.widget.PointCloud$WaveType -> com.aviary.android.feather.widget.bg:
    com.aviary.android.feather.widget.PointCloud$WaveType Circle -> a
    com.aviary.android.feather.widget.PointCloud$WaveType Line -> b
    com.aviary.android.feather.widget.PointCloud$WaveType[] ENUM$VALUES -> c
    com.aviary.android.feather.widget.PointCloud$WaveType[] values() -> values
    com.aviary.android.feather.widget.PointCloud$WaveType valueOf(java.lang.String) -> valueOf
com.aviary.android.feather.widget.ScrollerRunnable -> com.aviary.android.feather.widget.ScrollerRunnable:
    int mLastFlingX -> a
    boolean mShouldStopFling -> b
    com.aviary.android.feather.widget.ScrollerRunnable$ScrollableView mParent -> c
    int mAnimationDuration -> d
    int mPreviousX -> e
    boolean mHasMore -> f
    android.widget.OverScroller mScroller -> g
    int mOverscrollDistance -> h
    int getLastFlingX() -> a
    void startCommon() -> b
    void stop(boolean) -> a
    void endFling(boolean) -> b
    void startUsingDistance(int,int) -> a
    void startUsingVelocity(int,int) -> b
    int getPreviousX() -> c
    boolean hasMore() -> d
    float getCurrVelocity() -> e
    boolean isFinished() -> f
    boolean computeScrollOffset() -> g
    int getCurrX() -> h
    void abortAnimation() -> i
    void run() -> run
com.aviary.android.feather.widget.ScrollerRunnable$ScrollableView -> com.aviary.android.feather.widget.ScrollerRunnable$ScrollableView:
    boolean removeCallbacks(java.lang.Runnable) -> removeCallbacks
    boolean post(java.lang.Runnable) -> post
    void scrollIntoSlots() -> scrollIntoSlots
    void trackMotionScroll(int) -> trackMotionScroll
    int getMinX() -> getMinX
    int getMaxX() -> getMaxX
com.aviary.android.feather.widget.VibrationHelper -> com.aviary.android.feather.widget.bh:
    boolean mEnabled -> a
    android.os.Vibrator mVibrator -> b
    com.aviary.android.feather.widget.VibrationHelper$VibrationHandler mHandler -> c
    void initialize(android.content.Context) -> a
    void setEnabled(boolean) -> a
    boolean enabled() -> a
    void vibrate(int) -> a
    android.os.Vibrator access$0() -> b
com.aviary.android.feather.widget.VibrationHelper$VibrationHandler -> com.aviary.android.feather.widget.bi:
    void handleMessage(android.os.Message) -> handleMessage
com.aviary.android.feather.widget.VibrationWidget -> com.aviary.android.feather.widget.bj:
    void setVibrationEnabled(boolean) -> setVibrationEnabled
com.umeng.analytics.MobclickAgent -> com.umeng.analytics.a:
    com.umeng.analytics.b a -> a
    com.umeng.analytics.onlineconfig.a b -> b
    void onPause(android.content.Context) -> a
    void onResume(android.content.Context) -> b
com.umeng.analytics.a -> com.umeng.analytics.c:
    java.lang.Thread$UncaughtExceptionHandler a -> a
    com.umeng.analytics.h b -> b
    android.content.Context c -> c
    void a(android.content.Context) -> a
    void a(com.umeng.analytics.h) -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    void a(java.lang.Throwable) -> a
com.umeng.analytics.a.a -> com.umeng.analytics.a.a:
    java.util.HashMap a -> a
    java.lang.String b -> b
    long c -> c
    long d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    void c(org.json.JSONObject) -> c
    void d(org.json.JSONObject) -> d
    void a(org.json.JSONObject) -> a
    void b(org.json.JSONObject) -> b
    boolean a() -> a
com.umeng.analytics.a.b -> com.umeng.analytics.a.b:
    java.lang.String a -> a
    java.util.ArrayList b -> b
    void c(org.json.JSONObject) -> c
    void d(org.json.JSONObject) -> d
    void a(org.json.JSONObject) -> a
    void b(org.json.JSONObject) -> b
    boolean a() -> a
    void a(com.umeng.analytics.a.b) -> a
com.umeng.analytics.a.c -> com.umeng.analytics.a.c:
    com.umeng.analytics.a.a a -> a
    com.umeng.analytics.a.b b -> b
com.umeng.analytics.a.d -> com.umeng.analytics.a.d:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String a(java.lang.Throwable) -> a
    boolean a() -> a
    void a(org.json.JSONObject) -> a
    void b(org.json.JSONObject) -> b
com.umeng.analytics.a.e -> com.umeng.analytics.a.e:
    java.lang.String a -> a
    java.lang.String b -> b
    int c -> c
    long d -> d
    java.lang.String k -> j
    java.lang.String l -> k
    java.lang.String m -> l
    java.lang.String n -> m
    boolean a() -> a
    void a(org.json.JSONObject) -> a
    void b(org.json.JSONObject) -> b
com.umeng.analytics.a.f -> com.umeng.analytics.a.f:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    long f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    java.lang.String n -> n
    java.lang.String o -> o
    long p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.lang.String v -> v
    java.lang.String w -> w
    java.lang.String x -> x
    int y -> y
    java.lang.String z -> z
    java.lang.String A -> A
    java.lang.String B -> B
    java.lang.String C -> C
    java.lang.String D -> D
    java.lang.String E -> E
    java.lang.String F -> F
    java.lang.String G -> G
    java.lang.String H -> H
    java.lang.String I -> I
    java.lang.String J -> J
    java.lang.String K -> K
    java.lang.String L -> L
    java.lang.String M -> M
    java.lang.String N -> N
    java.lang.String O -> O
    java.lang.String P -> P
    java.lang.String Q -> Q
    java.lang.String R -> R
    java.lang.String S -> S
    java.lang.String T -> T
    java.lang.String U -> U
    java.lang.String V -> V
    java.lang.String W -> W
    java.lang.String X -> X
    java.lang.String Y -> Y
    java.lang.String Z -> Z
    java.lang.String aa -> aa
    java.lang.String ab -> ab
    java.lang.String ac -> ac
    java.lang.String ad -> ad
    java.lang.String ae -> ae
    java.lang.String af -> af
    java.lang.String ag -> ag
    java.lang.String ah -> ah
    java.lang.String ai -> ai
    java.lang.String aj -> aj
    java.lang.String ak -> ak
    java.lang.String al -> al
    void j(org.json.JSONObject) -> a
    void k(org.json.JSONObject) -> c
    void l(org.json.JSONObject) -> d
    void m(org.json.JSONObject) -> e
    void n(org.json.JSONObject) -> f
    void o(org.json.JSONObject) -> g
    void p(org.json.JSONObject) -> h
    void b(org.json.JSONObject) -> b
    boolean a() -> a
    void a(android.content.Context,java.lang.String[]) -> a
    void a(android.content.Context) -> a
    void b(android.content.Context) -> b
    void c(android.content.Context) -> c
    void d(android.content.Context) -> d
    void e(android.content.Context) -> e
    void b(android.content.Context,java.lang.String[]) -> b
    boolean b() -> b
com.umeng.analytics.a.g -> com.umeng.analytics.a.g:
    void b(org.json.JSONObject) -> b
    boolean a() -> a
com.umeng.analytics.a.h -> com.umeng.analytics.a.h:
    com.umeng.analytics.a.o a -> a
    void c(org.json.JSONObject) -> c
    void d(org.json.JSONObject) -> d
    boolean a() -> a
    void a(org.json.JSONObject) -> a
    void b(org.json.JSONObject) -> b
com.umeng.analytics.a.i -> com.umeng.analytics.a.i:
    java.util.ArrayList a -> a
    java.util.ArrayList b -> b
    java.util.ArrayList c -> c
    java.util.ArrayList d -> d
    java.util.ArrayList e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    void a(com.umeng.analytics.a.h) -> a
    void a(com.umeng.analytics.a.m) -> a
    void a(com.umeng.analytics.a.d) -> a
    void a(com.umeng.analytics.a.e) -> a
    void a(com.umeng.analytics.a.b) -> a
    void c(org.json.JSONObject) -> c
    void d(org.json.JSONObject) -> d
    void e(org.json.JSONObject) -> e
    void f(org.json.JSONObject) -> f
    void g(org.json.JSONObject) -> g
    void a(org.json.JSONObject) -> a
    org.json.JSONArray a(java.util.ArrayList) -> a
    void b(org.json.JSONObject) -> b
    boolean a() -> a
    void a(com.umeng.analytics.a.i) -> a
    void b(java.util.ArrayList) -> b
    int b() -> b
    void c() -> c
com.umeng.analytics.a.j -> com.umeng.analytics.a.j:
    com.umeng.analytics.a.g a -> a
    com.umeng.analytics.a.i b -> b
com.umeng.analytics.a.k -> com.umeng.analytics.a.k:
    java.lang.String a -> a
    int b -> b
com.umeng.analytics.a.l -> com.umeng.analytics.a.l:
    java.lang.String e -> e
    boolean a() -> a
    void b(org.json.JSONObject) -> b
    void a(org.json.JSONObject) -> a
com.umeng.analytics.a.m -> com.umeng.analytics.a.m:
    com.umeng.analytics.a.o a -> a
    com.umeng.analytics.a.p b -> b
    long c -> c
    java.util.ArrayList d -> d
    com.umeng.analytics.a.m a(android.content.Context) -> a
    void a(android.content.SharedPreferences) -> a
    java.lang.String[] b(android.content.SharedPreferences) -> b
    java.util.ArrayList c(android.content.SharedPreferences) -> c
    long d(android.content.SharedPreferences) -> d
    android.content.SharedPreferences$Editor a(android.content.SharedPreferences,java.lang.String,long,long) -> a
    boolean a() -> a
    void c(org.json.JSONObject) -> c
    void d(org.json.JSONObject) -> d
    void e(org.json.JSONObject) -> e
    void f(org.json.JSONObject) -> f
    void g(org.json.JSONObject) -> g
    void h(org.json.JSONObject) -> h
    void a(org.json.JSONObject) -> a
    void b(org.json.JSONObject) -> b
com.umeng.analytics.a.n -> com.umeng.analytics.a.n:
    java.lang.String g -> f
    java.lang.String h -> g
    java.lang.String i -> h
    java.lang.String j -> i
    boolean a() -> a
    void b(org.json.JSONObject) -> b
    void a(org.json.JSONObject) -> a
com.umeng.analytics.a.o -> com.umeng.analytics.a.o:
    double a -> a
    double b -> b
    long c -> c
    com.umeng.analytics.a.o a(android.content.Context) -> a
    com.umeng.analytics.a.o b(android.content.Context) -> b
    android.content.SharedPreferences$Editor a(android.content.Context,android.content.SharedPreferences) -> a
    boolean a(android.location.Location,android.content.SharedPreferences) -> a
    void b(org.json.JSONObject) -> b
    void a(org.json.JSONObject) -> a
    boolean a() -> a
com.umeng.analytics.a.p -> com.umeng.analytics.a.p:
    long a -> a
    long b -> b
    void a(org.json.JSONObject) -> a
    void b(org.json.JSONObject) -> b
    boolean a() -> a
    com.umeng.analytics.a.p a(android.content.Context) -> a
    long[] b(android.content.Context) -> b
com.umeng.analytics.b -> com.umeng.analytics.b:
    java.lang.String l -> l
    java.lang.String m -> m
    int n -> n
    int o -> o
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    long s -> s
    int t -> t
    int u -> u
    void a(android.content.Context) -> a
    void h(android.content.Context) -> e
    void b(android.content.Context) -> b
    void i(android.content.Context) -> f
    void j(android.content.Context) -> g
    void a(android.content.Context,android.content.SharedPreferences) -> a
    boolean a(android.content.SharedPreferences) -> a
    java.lang.String b(android.content.Context,android.content.SharedPreferences) -> b
    java.lang.String a(android.content.Context,long) -> a
    java.lang.String c(android.content.Context,android.content.SharedPreferences) -> c
    void b(android.content.Context,java.lang.Throwable) -> a
    void a(com.umeng.analytics.b,android.content.Context) -> a
    void b(com.umeng.analytics.b,android.content.Context) -> b
com.umeng.analytics.b$a -> com.umeng.analytics.b$a:
    java.lang.Object b -> b
    android.content.Context c -> c
    int d -> d
    com.umeng.analytics.b a -> a
    void run() -> run
com.umeng.analytics.c -> com.umeng.analytics.e:
    com.umeng.analytics.a.i a -> a
    java.util.HashMap b -> b
    java.util.HashMap c -> c
    int d -> d
    int a() -> a
    boolean b() -> b
    void a(com.umeng.analytics.a.d) -> a
    void a(com.umeng.analytics.a.h) -> a
    void a(com.umeng.analytics.a.m) -> a
    boolean c() -> c
    void a(android.content.Context) -> a
    void b(android.content.Context) -> b
    org.json.JSONObject d() -> d
    void e() -> e
com.umeng.analytics.d -> com.umeng.analytics.d:
    com.umeng.analytics.a a -> a
    java.lang.Object b -> b
    android.os.Handler l -> l
    com.umeng.analytics.c c -> c
    com.umeng.analytics.a.f d -> d
    int e -> e
    int f -> f
    int g -> g
    int h -> h
    int i -> i
    java.lang.String m -> m
    java.lang.String n -> n
    int o -> o
    long p -> p
    long q -> q
    long r -> r
    java.lang.String j -> j
    java.lang.String k -> k
    boolean s -> s
    void a(android.content.Context,int) -> a
    void a(android.content.Context) -> a
    void f(android.content.Context) -> c
    void b(android.content.Context) -> b
    boolean b(android.content.Context,int) -> b
    java.lang.String c(android.content.Context) -> e
    void d(android.content.Context) -> f
    org.json.JSONObject g(android.content.Context) -> d
    java.lang.String a(java.io.InputStream) -> a
    java.lang.String a(android.content.Context,org.json.JSONObject,java.lang.String) -> a
    void a(int,long) -> a
    java.lang.Object a(com.umeng.analytics.d) -> a
    void a(com.umeng.analytics.d,android.content.Context) -> a
com.umeng.analytics.d$a -> com.umeng.analytics.d$a:
    android.content.Context b -> b
    com.umeng.analytics.d a -> a
    void run() -> run
com.umeng.analytics.d$b -> com.umeng.analytics.d$b:
    android.content.Context b -> b
    com.umeng.analytics.d a -> a
    void run() -> run
com.umeng.analytics.e -> com.umeng.analytics.f:
    com.umeng.analytics.d a -> a
com.umeng.analytics.f -> com.umeng.analytics.g:
    long d -> a
    long g -> b
    int h -> c
    boolean i -> d
    boolean j -> e
    boolean k -> f
    boolean l -> g
    boolean m -> h
    java.lang.Object p -> i
    java.lang.String[] r -> j
    java.lang.String[] s -> k
    boolean t -> l
com.umeng.analytics.g -> com.umeng.analytics.h:
    java.lang.String a -> a
    java.lang.String a(android.content.Context) -> a
com.umeng.analytics.h -> com.umeng.analytics.i:
    void b(android.content.Context,java.lang.Throwable) -> a
com.umeng.analytics.i -> com.umeng.analytics.j:
    long a -> a
    long b -> b
    android.content.SharedPreferences b(android.content.Context) -> a
    android.content.SharedPreferences c(android.content.Context) -> b
    android.content.SharedPreferences e(android.content.Context) -> c
    java.lang.String f(android.content.Context) -> d
    java.lang.String g(android.content.Context) -> e
    int[] i(android.content.Context) -> f
    boolean a(java.io.File) -> a
    org.json.JSONObject a(android.content.Context,java.lang.String) -> a
    java.lang.String a(java.io.InputStream) -> a
    void a(android.content.Context,org.json.JSONObject,java.lang.String) -> a
    void a(android.content.Context,com.umeng.analytics.a.g,java.lang.String) -> a
    void b(android.content.Context,org.json.JSONObject,java.lang.String) -> b
    void j(android.content.Context) -> g
com.umeng.analytics.onlineconfig.UmengOnlineConfigureListener -> com.umeng.analytics.onlineconfig.b:
    void onDataReceived(org.json.JSONObject) -> a
com.umeng.analytics.onlineconfig.a -> com.umeng.analytics.onlineconfig.a:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    com.umeng.analytics.onlineconfig.UmengOnlineConfigureListener f -> f
    com.umeng.analytics.onlineconfig.c g -> g
    void a(com.umeng.analytics.onlineconfig.c) -> a
    void a(org.json.JSONObject) -> a
    java.lang.String b(android.content.Context) -> a
    java.lang.String c(android.content.Context) -> b
    org.json.JSONObject d(android.content.Context) -> c
    java.lang.String e(android.content.Context) -> d
    void a(android.content.Context,com.umeng.analytics.onlineconfig.b) -> a
    void b(android.content.Context,com.umeng.analytics.onlineconfig.b) -> b
    void a(com.umeng.analytics.onlineconfig.a,org.json.JSONObject) -> a
    org.json.JSONObject a(com.umeng.analytics.onlineconfig.a,android.content.Context) -> a
    com.umeng.analytics.onlineconfig.c a(com.umeng.analytics.onlineconfig.a) -> a
    void a(com.umeng.analytics.onlineconfig.a,android.content.Context,com.umeng.analytics.onlineconfig.b) -> a
    void b(com.umeng.analytics.onlineconfig.a,android.content.Context,com.umeng.analytics.onlineconfig.b) -> b
com.umeng.analytics.onlineconfig.a$a -> com.umeng.analytics.onlineconfig.c:
    org.json.JSONObject e -> e
    com.umeng.analytics.onlineconfig.a a -> a
    org.json.JSONObject a() -> a
    java.lang.String b() -> b
com.umeng.analytics.onlineconfig.a$b -> com.umeng.analytics.onlineconfig.a$b:
    android.content.Context a -> a
    com.umeng.analytics.onlineconfig.a b -> b
    void run() -> run
    boolean a() -> a
    void b() -> b
com.umeng.analytics.onlineconfig.b -> com.umeng.analytics.onlineconfig.d:
    org.json.JSONObject a -> a
    boolean b -> b
    int c -> c
    int d -> d
    java.lang.String e -> e
com.umeng.analytics.onlineconfig.c -> com.umeng.analytics.onlineconfig.e:
    void a(int,long) -> a
com.umeng.common.Log -> com.umeng.common.a:
    boolean LOG -> a
    void a(java.lang.String,java.lang.String) -> a
    void a(java.lang.String,java.lang.String,java.lang.Exception) -> a
    void b(java.lang.String,java.lang.String) -> b
    void b(java.lang.String,java.lang.String,java.lang.Exception) -> b
    void c(java.lang.String,java.lang.String) -> c
    void c(java.lang.String,java.lang.String,java.lang.Exception) -> c
    void e(java.lang.String,java.lang.String) -> d
    void e(java.lang.String,java.lang.String,java.lang.Exception) -> d
com.umeng.common.a.a -> com.umeng.common.a.a:
    int a(android.content.Context) -> a
    int b(android.content.Context) -> b
    int c(android.content.Context) -> c
    int d(android.content.Context) -> d
    int e(android.content.Context) -> e
    int f(android.content.Context) -> f
    int h(android.content.Context) -> g
com.umeng.common.a.b -> com.umeng.common.a.b:
    int a(android.content.Context) -> a
com.umeng.common.a.c -> com.umeng.common.a.c:
    int a(android.content.Context) -> a
    int b(android.content.Context) -> b
    int c(android.content.Context) -> c
    int d(android.content.Context) -> d
    int e(android.content.Context) -> e
    int g(android.content.Context) -> f
    int h(android.content.Context) -> g
com.umeng.common.b -> com.umeng.common.b:
    java.lang.String a -> a
    java.lang.String d(android.content.Context) -> a
    java.lang.String e(android.content.Context) -> b
    boolean a(android.content.Context,java.lang.String) -> a
    java.lang.String a() -> a
    java.lang.String g(android.content.Context) -> c
    java.lang.String h(android.content.Context) -> d
    java.lang.String[] k(android.content.Context) -> e
    boolean l(android.content.Context) -> f
    android.location.Location m(android.content.Context) -> g
    boolean n(android.content.Context) -> h
    boolean b() -> b
    int o(android.content.Context) -> i
    java.lang.String[] p(android.content.Context) -> j
    java.util.Locale y(android.content.Context) -> r
    java.lang.String q(android.content.Context) -> k
    java.lang.String r(android.content.Context) -> l
    java.lang.String s(android.content.Context) -> m
    int a(java.lang.Object,java.lang.String) -> a
    java.lang.String t(android.content.Context) -> n
    java.lang.String a(java.util.Date) -> a
    java.lang.String u(android.content.Context) -> o
    java.lang.String v(android.content.Context) -> p
    java.lang.String w(android.content.Context) -> q
com.umeng.common.c -> com.umeng.common.c:
    java.lang.String a -> a
    com.umeng.common.c b -> b
    java.lang.String c -> c
    java.lang.Class d -> d
    java.lang.Class e -> e
    java.lang.Class f -> f
    java.lang.Class g -> g
    java.lang.Class h -> h
    java.lang.Class i -> i
    java.lang.Class j -> j
    com.umeng.common.c a(android.content.Context) -> a
    int c(java.lang.String) -> a
    int d(java.lang.String) -> b
    int e(java.lang.String) -> c
    int g(java.lang.String) -> d
    int a(java.lang.Class,java.lang.String) -> a
com.umeng.common.net.DownloadingService -> com.umeng.common.net.DownloadingService:
    java.lang.String o -> c
    android.app.NotificationManager p -> d
    android.content.Context r -> e
    android.os.Handler s -> f
    com.umeng.common.net.DownloadingService$a t -> g
    boolean m -> a
    java.util.Map v -> h
    java.util.Map w -> i
    android.os.Messenger n -> b
    android.content.BroadcastReceiver x -> j
    java.lang.Boolean y -> k
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onStart(android.content.Intent,int) -> onStart
    void onCreate() -> onCreate
    void a(int) -> a
    void c(com.umeng.common.net.a$a) -> c
    int a(com.umeng.common.net.a$a) -> a
    void a(com.umeng.common.net.a$a,long,long,long) -> a
    void a(java.lang.String) -> a
    boolean b(android.content.Context) -> b
    boolean d(com.umeng.common.net.a$a) -> d
    void onDestroy() -> onDestroy
    android.app.Notification a(com.umeng.common.net.a$a,int,int) -> a
    void b(java.util.Map,boolean,java.lang.String[]) -> b
    void a(android.app.Notification,int) -> a
    void b(android.app.Notification,int) -> b
    void e() -> d
    boolean a(android.content.Context,android.content.Intent) -> a
    java.lang.String a() -> a
    boolean b(com.umeng.common.net.a$a) -> b
    android.content.Context a(com.umeng.common.net.DownloadingService) -> a
    java.util.Map b() -> b
    void a(com.umeng.common.net.DownloadingService,com.umeng.common.net.a$a) -> a
    android.app.NotificationManager a(com.umeng.common.net.DownloadingService,android.app.NotificationManager) -> a
    android.app.NotificationManager b(com.umeng.common.net.DownloadingService) -> b
    boolean a(android.content.Context) -> a
    java.util.Map c() -> c
    android.app.Notification a(com.umeng.common.net.DownloadingService,com.umeng.common.net.a$a,int,int) -> a
    android.os.Handler c(com.umeng.common.net.DownloadingService) -> c
    void a(com.umeng.common.net.DownloadingService,int) -> a
    boolean a(com.umeng.common.net.DownloadingService,android.content.Context,android.content.Intent) -> a
    void a(com.umeng.common.net.DownloadingService,com.umeng.common.net.a$a,long,long,long) -> a
    void a(java.util.Map,boolean,java.lang.String[]) -> a
    java.lang.Boolean a(java.lang.Boolean) -> a
com.umeng.common.net.DownloadingService$a -> com.umeng.common.net.a:
    void a(int) -> a
    void a(int,int) -> a
    void a(int,java.lang.String) -> a
    void a(int,java.lang.Exception) -> a
com.umeng.common.net.DownloadingService$b -> com.umeng.common.net.DownloadingService$b:
    android.content.Context b -> b
    java.lang.String c -> c
    int d -> d
    long e -> e
    long f -> f
    int g -> g
    int h -> h
    com.umeng.common.net.DownloadingService$a i -> i
    com.umeng.common.net.a$a j -> j
    com.umeng.common.net.DownloadingService a -> a
    void run() -> run
    void a(int) -> a
    void a(boolean) -> a
    void a(java.lang.Exception) -> a
    android.content.Context a(com.umeng.common.net.DownloadingService$b) -> a
com.umeng.common.net.DownloadingService$c -> com.umeng.common.net.b:
    com.umeng.common.net.DownloadingService a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.umeng.common.net.DownloadingService$d -> com.umeng.common.net.c:
    com.umeng.common.net.DownloadingService$b a -> a
    android.app.Notification b -> b
    int c -> c
    int d -> d
    com.umeng.common.net.a$a e -> e
    long[] f -> f
    void a() -> a
    void b() -> b
com.umeng.common.net.DownloadingService$e -> com.umeng.common.net.d:
    int a -> a
    java.lang.String b -> b
    com.umeng.common.net.a$a d -> d
    com.umeng.common.net.DownloadingService c -> c
    void onPreExecute() -> onPreExecute
    java.lang.Integer a(java.lang.String[]) -> a
    void a(java.lang.Integer) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.umeng.common.net.a -> com.umeng.common.net.e:
    java.lang.String b -> b
    android.content.Context c -> c
    com.umeng.common.net.k d -> d
    android.os.Messenger e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String[] k -> k
    boolean l -> l
    android.os.Messenger a -> a
    android.content.ServiceConnection m -> m
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    void a() -> a
    java.lang.String b() -> b
    com.umeng.common.net.k a(com.umeng.common.net.a) -> a
    android.content.ServiceConnection b(com.umeng.common.net.a) -> b
    android.content.Context c(com.umeng.common.net.a) -> c
    android.os.Messenger a(com.umeng.common.net.a,android.os.Messenger) -> a
    java.lang.String d(com.umeng.common.net.a) -> d
    java.lang.String e(com.umeng.common.net.a) -> e
    java.lang.String f(com.umeng.common.net.a) -> f
    java.lang.String g(com.umeng.common.net.a) -> g
    java.lang.String h(com.umeng.common.net.a) -> h
    java.lang.String[] i(com.umeng.common.net.a) -> i
    boolean j(com.umeng.common.net.a) -> j
    android.os.Messenger k(com.umeng.common.net.a) -> k
com.umeng.common.net.a$a -> com.umeng.common.net.f:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String[] f -> f
    boolean g -> g
    android.os.Bundle a() -> a
    com.umeng.common.net.a$a a(android.os.Bundle) -> a
com.umeng.common.net.a$b -> com.umeng.common.net.k:
    com.umeng.common.net.a a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.umeng.common.net.b -> com.umeng.common.net.l:
    com.umeng.common.net.a a -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.umeng.common.net.c -> com.umeng.common.net.m:
    java.lang.String a -> a
    android.content.Context i -> b
    com.umeng.common.net.c$a k -> c
    com.umeng.common.net.c a(android.content.Context) -> a
    boolean a(java.lang.String,java.lang.String) -> a
    void a(java.lang.String,java.lang.String,int) -> a
    void a(int) -> a
    void finalize() -> finalize
    java.lang.String a() -> a
com.umeng.common.net.c$1 -> com.umeng.common.net.n:
com.umeng.common.net.c$a -> com.umeng.common.net.o:
    com.umeng.common.net.c a -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.umeng.common.net.c$b -> com.umeng.common.net.p:
    com.umeng.common.net.c a -> a
com.umeng.common.net.d -> com.umeng.common.net.r:
    com.umeng.common.net.DownloadingService a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.umeng.common.net.e -> com.umeng.common.net.s:
    com.umeng.common.net.DownloadingService a -> a
    void a(int) -> a
    void a(int,int) -> a
    void a(int,java.lang.String) -> a
    void a(int,java.lang.Exception) -> a
com.umeng.common.net.g -> com.umeng.common.net.g:
    java.lang.String a -> a
    com.umeng.common.net.DownloadingService b -> b
    void run() -> run
com.umeng.common.net.h -> com.umeng.common.net.h:
    com.umeng.common.net.DownloadingService a -> a
    void run() -> run
com.umeng.common.net.i -> com.umeng.common.net.i:
    java.lang.String[] a -> a
    boolean b -> b
    java.util.Map c -> c
    void run() -> run
com.umeng.common.net.j -> com.umeng.common.net.j:
    com.umeng.common.net.DownloadingService$b a -> a
    void run() -> run
com.umeng.common.net.k -> com.umeng.common.net.t:
    void a() -> a
    void a(int) -> a
    void a(int,int,java.lang.String) -> a
com.umeng.common.net.l -> com.umeng.common.net.u:
    java.lang.String a(int,java.lang.String) -> a
    android.app.PendingIntent b(android.content.Context,java.lang.String) -> a
com.umeng.common.net.p -> com.umeng.common.net.v:
    java.lang.String b -> b
    boolean a -> a
    java.util.Map e -> c
    java.lang.Thread f -> d
    void c(java.io.File) -> b
    void a(java.io.File) -> a
    java.lang.Thread a(java.lang.Thread) -> a
com.umeng.common.net.q -> com.umeng.common.net.q:
    java.io.File a -> a
    void run() -> run
com.umeng.common.net.r -> com.umeng.common.net.w:
    java.lang.String a -> a
    java.util.Map b -> b
    com.umeng.common.net.t a(com.umeng.common.net.s,java.lang.Class) -> a
    org.json.JSONObject a(java.lang.String,org.json.JSONObject) -> a
    boolean a() -> a
    java.lang.String a(java.io.InputStream) -> a
    org.json.JSONObject a(java.lang.String) -> a
    org.apache.http.params.HttpParams b() -> b
    void b(java.lang.String) -> b
com.umeng.common.net.s -> com.umeng.common.net.x:
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    org.json.JSONObject a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    void a(java.lang.String) -> a
com.umeng.common.net.t -> com.umeng.common.net.y:
com.umeng.common.util.DeltaUpdate -> com.umeng.common.util.DeltaUpdate:
    boolean a -> a
    boolean a() -> a
    int a(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String a(android.content.Context) -> a
    java.lang.String b(android.content.Context) -> b
    int bspatch(java.lang.String,java.lang.String,java.lang.String) -> bspatch
com.umeng.common.util.f -> com.umeng.common.util.a:
    int a -> a
    byte[] a(java.lang.String,java.lang.String) -> a
com.umeng.common.util.g -> com.umeng.common.util.b:
    java.lang.String a -> a
    java.lang.String a(java.lang.String) -> a
    java.lang.String b(java.lang.String) -> b
    java.lang.String a(java.io.File) -> a
    java.lang.String c(java.lang.String) -> c
    boolean d(java.lang.String) -> d
    java.lang.String a() -> a
    java.lang.String a(java.util.Date) -> a
com.umeng.update.UmengDownloadListener -> com.umeng.update.a:
    void OnDownloadEnd(int) -> a
com.umeng.update.UmengUpdateAgent -> com.umeng.update.b:
    boolean h -> f
    boolean a -> a
    java.lang.String b -> b
    boolean k -> g
    java.lang.String d -> c
    java.lang.String e -> d
    java.lang.String[] f -> e
    com.umeng.update.UmengDownloadListener l -> h
    com.umeng.update.UmengUpdateListener m -> i
    android.content.Context n -> j
    com.umeng.common.net.k o -> k
    android.os.Handler p -> l
    void a(int,com.umeng.update.UpdateResponse) -> a
    void update(android.content.Context) -> a
    void showUpdateDialog(android.content.Context,com.umeng.update.UpdateResponse) -> a
    android.app.Dialog createDialog(android.content.Context,java.lang.String,com.umeng.update.UmengUpdateAgent$a) -> a
    java.lang.String a(android.content.Context,com.umeng.update.UpdateResponse) -> c
    void startDownload(android.content.Context,com.umeng.update.UpdateResponse) -> b
    com.umeng.update.UmengDownloadListener a() -> a
    boolean a(boolean) -> a
    com.umeng.update.UmengUpdateListener b() -> b
    android.content.Context c() -> c
com.umeng.update.UmengUpdateAgent$a -> com.umeng.update.c:
    void a(boolean) -> a
com.umeng.update.UmengUpdateAgent$b -> com.umeng.update.d:
    com.umeng.update.UpdateResponse a(java.lang.Void[]) -> a
    void a(com.umeng.update.UpdateResponse) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.umeng.update.UmengUpdateListener -> com.umeng.update.g:
    void onUpdateReturned(int,com.umeng.update.UpdateResponse) -> a
com.umeng.update.UpdateResponse -> com.umeng.update.h:
    boolean hasUpdate -> a
    java.lang.String updateLog -> b
    java.lang.String version -> c
    java.lang.String path -> d
    java.lang.String new_md5 -> e
    java.lang.String size -> f
    java.lang.String target_size -> g
    boolean delta -> h
    java.lang.String patch_md5 -> i
com.umeng.update.a -> com.umeng.update.i:
    void a() -> a
    void a(int) -> a
    void a(int,int,java.lang.String) -> a
com.umeng.update.b -> com.umeng.update.j:
    void handleMessage(android.os.Message) -> handleMessage
com.umeng.update.c -> com.umeng.update.k:
    android.content.Context a -> a
    com.umeng.update.UpdateResponse b -> b
    void a(boolean) -> a
com.umeng.update.d -> com.umeng.update.l:
    android.app.Dialog a -> a
    com.umeng.update.UmengUpdateAgent$a b -> b
    int c -> c
    void onClick(android.view.View) -> onClick
com.umeng.update.e -> com.umeng.update.e:
    android.content.Context a -> a
    java.lang.String b -> b
    void run() -> run
    boolean a() -> a
    void b() -> b
com.umeng.update.f -> com.umeng.update.f:
    com.umeng.update.UpdateResponse a -> a
    com.umeng.update.e b -> b
    void run() -> run
com.umeng.update.g -> com.umeng.update.m:
    java.lang.String a -> a
    org.json.JSONObject e -> e
    org.json.JSONObject a(android.content.Context,boolean) -> a
    org.json.JSONObject a() -> a
    java.lang.String b() -> b
com.weibo.sdk.android.Oauth2AccessToken -> com.weibo.sdk.android.a:
    java.lang.String mAccessToken -> a
    java.lang.String mRefreshToken -> b
    long mExpiresTime -> c
    boolean isSessionValid() -> a
    java.lang.String getToken() -> b
    java.lang.String getRefreshToken() -> c
    void setRefreshToken(java.lang.String) -> a
    long getExpiresTime() -> d
    void setExpiresIn(java.lang.String) -> b
    void setExpiresTime(long) -> a
    void setToken(java.lang.String) -> c
com.weibo.sdk.android.R -> com.weibo.sdk.android.b:
com.weibo.sdk.android.R$dimen -> com.weibo.sdk.android.c:
    int weibosdk_dialog_bottom_margin -> weibosdk_dialog_bottom_margin
    int weibosdk_dialog_left_margin -> weibosdk_dialog_left_margin
    int weibosdk_dialog_right_margin -> weibosdk_dialog_right_margin
    int weibosdk_dialog_top_margin -> weibosdk_dialog_top_margin
com.weibo.sdk.android.R$drawable -> com.weibo.sdk.android.d:
    int weibosdk_dialog_bg -> weibosdk_dialog_bg
com.weibo.sdk.android.Weibo -> com.weibo.sdk.android.e:
    java.lang.String URL_OAUTH2_ACCESS_AUTHORIZE -> a
    com.weibo.sdk.android.Weibo mWeiboInstance -> f
    java.lang.String app_key -> b
    java.lang.String redirecturl -> c
    com.weibo.sdk.android.Oauth2AccessToken accessToken -> d
    boolean isWifi -> e
    com.weibo.sdk.android.Weibo getInstance(java.lang.String,java.lang.String) -> a
    void authorize(android.content.Context,com.weibo.sdk.android.WeiboAuthListener) -> a
    void startAuthDialog(android.content.Context,com.weibo.sdk.android.WeiboAuthListener) -> b
    void startDialog(android.content.Context,com.weibo.sdk.android.WeiboParameters,com.weibo.sdk.android.WeiboAuthListener) -> a
com.weibo.sdk.android.Weibo$1 -> com.weibo.sdk.android.f:
    com.weibo.sdk.android.Weibo this$0 -> a
    com.weibo.sdk.android.WeiboAuthListener val$listener -> b
    void onComplete(android.os.Bundle) -> a
    void onError(com.weibo.sdk.android.WeiboDialogError) -> a
    void onWeiboException(com.weibo.sdk.android.WeiboException) -> a
    void onCancel() -> a
com.weibo.sdk.android.WeiboAuthListener -> com.weibo.sdk.android.g:
    void onComplete(android.os.Bundle) -> a
    void onWeiboException(com.weibo.sdk.android.WeiboException) -> a
    void onError(com.weibo.sdk.android.WeiboDialogError) -> a
    void onCancel() -> a
com.weibo.sdk.android.WeiboDialog -> com.weibo.sdk.android.h:
    android.widget.FrameLayout$LayoutParams FILL -> a
    java.lang.String mUrl -> b
    com.weibo.sdk.android.WeiboAuthListener mListener -> c
    android.app.ProgressDialog mSpinner -> d
    android.webkit.WebView mWebView -> e
    android.widget.RelativeLayout webViewContainer -> f
    android.widget.RelativeLayout mContent -> g
    int theme -> h
    int left_margin -> i
    int top_margin -> j
    int right_margin -> k
    int bottom_margin -> l
    void onCreate(android.os.Bundle) -> onCreate
    void onBack() -> a
    void setUpWebView() -> b
    void handleRedirectUrl(android.webkit.WebView,java.lang.String) -> a
    boolean parseDimens() -> c
    com.weibo.sdk.android.WeiboAuthListener access$0(com.weibo.sdk.android.WeiboDialog) -> a
    void access$1(com.weibo.sdk.android.WeiboDialog,android.webkit.WebView,java.lang.String) -> a
    android.app.ProgressDialog access$2(com.weibo.sdk.android.WeiboDialog) -> b
    android.webkit.WebView access$3(com.weibo.sdk.android.WeiboDialog) -> c
com.weibo.sdk.android.WeiboDialog$1 -> com.weibo.sdk.android.i:
    com.weibo.sdk.android.WeiboDialog this$0 -> a
    boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent) -> onKey
com.weibo.sdk.android.WeiboDialog$WeiboWebViewClient -> com.weibo.sdk.android.j:
    com.weibo.sdk.android.WeiboDialog this$0 -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
com.weibo.sdk.android.WeiboDialogError -> com.weibo.sdk.android.k:
    int mErrorCode -> a
    java.lang.String mFailingUrl -> b
com.weibo.sdk.android.WeiboException -> com.weibo.sdk.android.l:
    int statusCode -> a
    int getStatusCode() -> a
com.weibo.sdk.android.WeiboParameters -> com.weibo.sdk.android.m:
    java.util.ArrayList mKeys -> a
    java.util.ArrayList mValues -> b
    void add(java.lang.String,java.lang.String) -> a
    void add(java.lang.String,int) -> a
    void add(java.lang.String,long) -> a
    void remove(java.lang.String) -> a
    int getLocation(java.lang.String) -> c
    java.lang.String getKey(int) -> a
    java.lang.String getValue(java.lang.String) -> b
    java.lang.String getValue(int) -> b
    int size() -> a
com.weibo.sdk.android.api.AccountAPI -> com.weibo.sdk.android.a.a:
    void getUid(com.weibo.sdk.android.net.RequestListener) -> a
com.weibo.sdk.android.api.CommentsAPI -> com.weibo.sdk.android.a.b:
    void show(long,long,long,int,int,com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER,com.weibo.sdk.android.net.RequestListener) -> a
    void toME(long,long,int,int,com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER,com.weibo.sdk.android.api.WeiboAPI$SRC_FILTER,com.weibo.sdk.android.net.RequestListener) -> a
    void create(java.lang.String,long,boolean,com.weibo.sdk.android.net.RequestListener) -> a
    void reply(long,long,java.lang.String,boolean,boolean,com.weibo.sdk.android.net.RequestListener) -> a
com.weibo.sdk.android.api.FavoritesAPI -> com.weibo.sdk.android.a.c:
    void favorites(int,int,com.weibo.sdk.android.net.RequestListener) -> a
    void create(long,com.weibo.sdk.android.net.RequestListener) -> a
    void destroy(long,com.weibo.sdk.android.net.RequestListener) -> b
com.weibo.sdk.android.api.FriendshipsAPI -> com.weibo.sdk.android.a.d:
    void friends(long,int,int,boolean,com.weibo.sdk.android.net.RequestListener) -> a
    void followers(long,int,int,boolean,com.weibo.sdk.android.net.RequestListener) -> b
    void create(long,java.lang.String,com.weibo.sdk.android.net.RequestListener) -> a
    void destroy(long,java.lang.String,com.weibo.sdk.android.net.RequestListener) -> b
com.weibo.sdk.android.api.SearchAPI -> com.weibo.sdk.android.a.e:
    void atUsers(java.lang.String,int,com.weibo.sdk.android.api.WeiboAPI$FRIEND_TYPE,com.weibo.sdk.android.api.WeiboAPI$RANGE,com.weibo.sdk.android.net.RequestListener) -> a
com.weibo.sdk.android.api.StatusesAPI -> com.weibo.sdk.android.a.f:
    void homeTimeline(long,long,int,int,boolean,com.weibo.sdk.android.api.WeiboAPI$FEATURE,boolean,com.weibo.sdk.android.net.RequestListener) -> a
    void userTimeline(long,long,long,int,int,boolean,com.weibo.sdk.android.api.WeiboAPI$FEATURE,boolean,com.weibo.sdk.android.net.RequestListener) -> a
    void userTimeline(java.lang.String,long,long,int,int,boolean,com.weibo.sdk.android.api.WeiboAPI$FEATURE,boolean,com.weibo.sdk.android.net.RequestListener) -> a
    void repostTimeline(long,long,long,int,int,com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER,com.weibo.sdk.android.net.RequestListener) -> a
    void mentions(long,long,int,int,com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER,com.weibo.sdk.android.api.WeiboAPI$SRC_FILTER,com.weibo.sdk.android.api.WeiboAPI$TYPE_FILTER,boolean,com.weibo.sdk.android.net.RequestListener) -> a
    void bilateralTimeline(long,long,int,int,boolean,com.weibo.sdk.android.api.WeiboAPI$FEATURE,boolean,com.weibo.sdk.android.net.RequestListener) -> b
    void show(long,com.weibo.sdk.android.net.RequestListener) -> a
    void repost(long,java.lang.String,com.weibo.sdk.android.api.WeiboAPI$COMMENTS_TYPE,com.weibo.sdk.android.net.RequestListener) -> a
    void destroy(long,com.weibo.sdk.android.net.RequestListener) -> b
    void update(java.lang.String,java.lang.String,java.lang.String,com.weibo.sdk.android.net.RequestListener) -> a
    void upload(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.weibo.sdk.android.net.RequestListener) -> a
com.weibo.sdk.android.api.UsersAPI -> com.weibo.sdk.android.a.g:
    void show(long,com.weibo.sdk.android.net.RequestListener) -> a
    void show(java.lang.String,com.weibo.sdk.android.net.RequestListener) -> a
com.weibo.sdk.android.api.WeiboAPI -> com.weibo.sdk.android.a.h:
    com.weibo.sdk.android.Oauth2AccessToken oAuth2accessToken -> a
    java.lang.String accessToken -> b
    void request(java.lang.String,com.weibo.sdk.android.WeiboParameters,java.lang.String,com.weibo.sdk.android.net.RequestListener) -> a
com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER -> com.weibo.sdk.android.a.i:
    com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER ALL -> a
    com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER ATTENTIONS -> b
    com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER STRANGER -> c
    com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER[] ENUM$VALUES -> d
    com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER[] values() -> values
    com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER valueOf(java.lang.String) -> valueOf
com.weibo.sdk.android.api.WeiboAPI$COMMENTS_TYPE -> com.weibo.sdk.android.a.j:
    com.weibo.sdk.android.api.WeiboAPI$COMMENTS_TYPE NONE -> a
    com.weibo.sdk.android.api.WeiboAPI$COMMENTS_TYPE CUR_STATUSES -> b
    com.weibo.sdk.android.api.WeiboAPI$COMMENTS_TYPE ORIGAL_STATUSES -> c
    com.weibo.sdk.android.api.WeiboAPI$COMMENTS_TYPE BOTH -> d
    com.weibo.sdk.android.api.WeiboAPI$COMMENTS_TYPE[] ENUM$VALUES -> e
    com.weibo.sdk.android.api.WeiboAPI$COMMENTS_TYPE[] values() -> values
    com.weibo.sdk.android.api.WeiboAPI$COMMENTS_TYPE valueOf(java.lang.String) -> valueOf
com.weibo.sdk.android.api.WeiboAPI$FEATURE -> com.weibo.sdk.android.a.k:
    com.weibo.sdk.android.api.WeiboAPI$FEATURE ALL -> a
    com.weibo.sdk.android.api.WeiboAPI$FEATURE ORIGINAL -> b
    com.weibo.sdk.android.api.WeiboAPI$FEATURE PICTURE -> c
    com.weibo.sdk.android.api.WeiboAPI$FEATURE VIDEO -> d
    com.weibo.sdk.android.api.WeiboAPI$FEATURE MUSICE -> e
    com.weibo.sdk.android.api.WeiboAPI$FEATURE[] ENUM$VALUES -> f
    com.weibo.sdk.android.api.WeiboAPI$FEATURE[] values() -> values
    com.weibo.sdk.android.api.WeiboAPI$FEATURE valueOf(java.lang.String) -> valueOf
com.weibo.sdk.android.api.WeiboAPI$FRIEND_TYPE -> com.weibo.sdk.android.a.l:
    com.weibo.sdk.android.api.WeiboAPI$FRIEND_TYPE ATTENTIONS -> a
    com.weibo.sdk.android.api.WeiboAPI$FRIEND_TYPE FELLOWS -> b
    com.weibo.sdk.android.api.WeiboAPI$FRIEND_TYPE[] ENUM$VALUES -> c
    com.weibo.sdk.android.api.WeiboAPI$FRIEND_TYPE[] values() -> values
    com.weibo.sdk.android.api.WeiboAPI$FRIEND_TYPE valueOf(java.lang.String) -> valueOf
com.weibo.sdk.android.api.WeiboAPI$RANGE -> com.weibo.sdk.android.a.m:
    com.weibo.sdk.android.api.WeiboAPI$RANGE ATTENTIONS -> a
    com.weibo.sdk.android.api.WeiboAPI$RANGE ATTENTION_TAGS -> b
    com.weibo.sdk.android.api.WeiboAPI$RANGE ALL -> c
    com.weibo.sdk.android.api.WeiboAPI$RANGE[] ENUM$VALUES -> d
    com.weibo.sdk.android.api.WeiboAPI$RANGE[] values() -> values
    com.weibo.sdk.android.api.WeiboAPI$RANGE valueOf(java.lang.String) -> valueOf
com.weibo.sdk.android.api.WeiboAPI$SRC_FILTER -> com.weibo.sdk.android.a.n:
    com.weibo.sdk.android.api.WeiboAPI$SRC_FILTER ALL -> a
    com.weibo.sdk.android.api.WeiboAPI$SRC_FILTER WEIBO -> b
    com.weibo.sdk.android.api.WeiboAPI$SRC_FILTER WEIQUN -> c
    com.weibo.sdk.android.api.WeiboAPI$SRC_FILTER[] ENUM$VALUES -> d
    com.weibo.sdk.android.api.WeiboAPI$SRC_FILTER[] values() -> values
    com.weibo.sdk.android.api.WeiboAPI$SRC_FILTER valueOf(java.lang.String) -> valueOf
com.weibo.sdk.android.api.WeiboAPI$TYPE_FILTER -> com.weibo.sdk.android.a.o:
    com.weibo.sdk.android.api.WeiboAPI$TYPE_FILTER ALL -> a
    com.weibo.sdk.android.api.WeiboAPI$TYPE_FILTER ORIGAL -> b
    com.weibo.sdk.android.api.WeiboAPI$TYPE_FILTER[] ENUM$VALUES -> c
    com.weibo.sdk.android.api.WeiboAPI$TYPE_FILTER[] values() -> values
    com.weibo.sdk.android.api.WeiboAPI$TYPE_FILTER valueOf(java.lang.String) -> valueOf
com.weibo.sdk.android.net.AsyncWeiboRunner -> com.weibo.sdk.android.net.a:
    void request(java.lang.String,com.weibo.sdk.android.WeiboParameters,java.lang.String,com.weibo.sdk.android.net.RequestListener) -> a
com.weibo.sdk.android.net.AsyncWeiboRunner$1 -> com.weibo.sdk.android.net.AsyncWeiboRunner$1:
    java.lang.String val$url -> a
    java.lang.String val$httpMethod -> b
    com.weibo.sdk.android.WeiboParameters val$params -> c
    com.weibo.sdk.android.net.RequestListener val$listener -> d
    void run() -> run
com.weibo.sdk.android.net.HttpManager -> com.weibo.sdk.android.net.b:
    java.lang.String BOUNDARY -> a
    java.lang.String MP_BOUNDARY -> b
    java.lang.String END_MP_BOUNDARY -> c
    java.lang.String openUrl(java.lang.String,java.lang.String,com.weibo.sdk.android.WeiboParameters,java.lang.String) -> a
    org.apache.http.client.HttpClient getNewHttpClient() -> b
    void paramToUpload(java.io.OutputStream,com.weibo.sdk.android.WeiboParameters) -> a
    void imageContentToUpload(java.io.OutputStream,java.lang.String) -> a
    java.lang.String readHttpResponse(org.apache.http.HttpResponse) -> a
    java.lang.String getBoundry() -> a
com.weibo.sdk.android.net.HttpManager$MySSLSocketFactory -> com.weibo.sdk.android.net.c:
    javax.net.ssl.SSLContext sslContext -> a
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    java.net.Socket createSocket() -> createSocket
com.weibo.sdk.android.net.HttpManager$MySSLSocketFactory$1 -> com.weibo.sdk.android.net.d:
    com.weibo.sdk.android.net.HttpManager$MySSLSocketFactory this$1 -> a
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
com.weibo.sdk.android.net.NetStateManager -> com.weibo.sdk.android.net.e:
    android.content.Context mContext -> b
    com.weibo.sdk.android.net.NetStateManager$NetState CUR_NETSTATE -> a
    org.apache.http.HttpHost getAPN() -> a
com.weibo.sdk.android.net.NetStateManager$NetState -> com.weibo.sdk.android.net.f:
    com.weibo.sdk.android.net.NetStateManager$NetState Mobile -> a
    com.weibo.sdk.android.net.NetStateManager$NetState WIFI -> b
    com.weibo.sdk.android.net.NetStateManager$NetState NOWAY -> c
    com.weibo.sdk.android.net.NetStateManager$NetState[] ENUM$VALUES -> d
    com.weibo.sdk.android.net.NetStateManager$NetState[] values() -> values
    com.weibo.sdk.android.net.NetStateManager$NetState valueOf(java.lang.String) -> valueOf
com.weibo.sdk.android.net.RequestListener -> com.weibo.sdk.android.net.g:
    void onComplete(java.lang.String) -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
com.weibo.sdk.android.util.BitmapHelper -> com.weibo.sdk.android.b.a:
    boolean verifyBitmap(java.io.InputStream) -> a
    boolean verifyBitmap(java.lang.String) -> a
com.weibo.sdk.android.util.Utility -> com.weibo.sdk.android.b.b:
    char[] encodes -> a
    byte[] decodes -> b
    android.os.Bundle parseUrl(java.lang.String) -> a
    android.os.Bundle decodeUrl(java.lang.String) -> b
    java.lang.String encodeUrl(com.weibo.sdk.android.WeiboParameters) -> a
    java.lang.String encodeParameters(com.weibo.sdk.android.WeiboParameters) -> b
    void showAlert(android.content.Context,java.lang.String,java.lang.String) -> a
    boolean isBundleEmpty(com.weibo.sdk.android.WeiboParameters) -> c
    boolean deleteDependon(java.io.File,int) -> a
    void mkdirs(java.io.File) -> a
    void createNewFile(java.io.File) -> b
    void delete(java.io.File) -> c
    boolean __createNewFile(java.io.File) -> d
    boolean deleteDependon(java.lang.String,int) -> a
    boolean deleteDependon(java.lang.String) -> f
    boolean doesExisted(java.io.File) -> e
    boolean doesExisted(java.lang.String) -> g
    void makesureParentExist(java.io.File) -> f
    void makesureFileExist(java.io.File) -> g
    void makesureFileExist(java.lang.String) -> h
    boolean isWifi(android.content.Context) -> a
    boolean access$0(java.lang.String) -> c
    boolean access$1(java.lang.String) -> d
    void access$2(java.lang.String) -> e
com.weibo.sdk.android.util.Utility$UploadImageUtils -> com.weibo.sdk.android.b.c:
    void revitionImageSizeHD(java.lang.String,int,int) -> a
    void revitionImageSize(java.lang.String,int,int) -> b
    boolean revitionPostImageSize(java.lang.String) -> a
    android.graphics.Bitmap safeDecodeBimtapFile(java.lang.String,android.graphics.BitmapFactory$Options) -> a
it.sephiroth.android.library.ab.AB -> it.sephiroth.android.library.a.a:
    it.sephiroth.android.library.ab.AB instance -> a
    it.sephiroth.android.library.ab.ABSettingsFactory$ABSettingsManager manager -> b
    int hashCode -> c
    it.sephiroth.android.library.ab.AB$Group group -> d
    it.sephiroth.android.library.ab.AB$Group getGroup() -> a
    it.sephiroth.android.library.ab.AB$Group generateGroup() -> b
    it.sephiroth.android.library.ab.ABSettingsFactory$ABSettingsManager setup(android.content.Context) -> b
    it.sephiroth.android.library.ab.AB getInstance(android.content.Context) -> a
it.sephiroth.android.library.ab.AB$Group -> it.sephiroth.android.library.a.b:
    it.sephiroth.android.library.ab.AB$Group GroupA -> a
    it.sephiroth.android.library.ab.AB$Group GroupB -> b
    it.sephiroth.android.library.ab.AB$Group[] ENUM$VALUES -> c
    it.sephiroth.android.library.ab.AB$Group[] values() -> values
    it.sephiroth.android.library.ab.AB$Group valueOf(java.lang.String) -> valueOf
it.sephiroth.android.library.ab.ABFilePreference -> it.sephiroth.android.library.a.c:
    java.lang.String uuid -> a
    java.lang.String getUUID() -> a
    java.lang.String generate(android.content.Context) -> a
    java.lang.String createFile(java.io.File) -> a
    java.lang.String readFile(java.io.File) -> b
    java.lang.String readStream(java.io.InputStream) -> a
it.sephiroth.android.library.ab.ABSettingsFactory -> it.sephiroth.android.library.a.d:
    it.sephiroth.android.library.ab.ABSettingsFactory$ABSettingsManager create(android.content.Context) -> a
    boolean canUseFileSystem(android.content.Context) -> b
it.sephiroth.android.library.ab.ABSettingsFactory$ABSettingsManager -> it.sephiroth.android.library.a.e:
    java.lang.String getUUID() -> a
    java.util.UUID generateNew() -> b
it.sephiroth.android.library.ab.ABSharedPreference -> it.sephiroth.android.library.a.f:
    java.lang.String uuid -> a
    java.lang.String generate(android.content.Context) -> a
    android.content.SharedPreferences getSharedPreferences(android.content.Context) -> b
    android.content.SharedPreferences getSharedPreferencesNewApi(android.content.Context) -> c
    android.content.SharedPreferences getSharedPreferencesOldApi(android.content.Context) -> d
    java.lang.String getUUID() -> a
it.sephiroth.android.library.imagezoom.ImageViewTouch -> it.sephiroth.android.library.imagezoom.ImageViewTouch:
    android.view.ScaleGestureDetector mScaleDetector -> v
    android.view.GestureDetector mGestureDetector -> w
    int mTouchSlop -> x
    float mScaleFactor -> y
    int mDoubleTapDirection -> z
    android.view.GestureDetector$OnGestureListener mGestureListener -> A
    android.view.ScaleGestureDetector$OnScaleGestureListener mScaleListener -> B
    boolean mDoubleTapEnabled -> C
    boolean mScaleEnabled -> D
    boolean mScrollEnabled -> E
    it.sephiroth.android.library.imagezoom.ImageViewTouch$OnImageViewTouchDoubleTapListener mDoubleTapListener -> a
    it.sephiroth.android.library.imagezoom.ImageViewTouch$OnImageViewTouchSingleTapListener mSingleTapListener -> b
    void init(android.content.Context,android.util.AttributeSet,int) -> a
    void setDoubleTapListener(it.sephiroth.android.library.imagezoom.ImageViewTouch$OnImageViewTouchDoubleTapListener) -> setDoubleTapListener
    void setSingleTapListener(it.sephiroth.android.library.imagezoom.ImageViewTouch$OnImageViewTouchSingleTapListener) -> setSingleTapListener
    void setDoubleTapEnabled(boolean) -> setDoubleTapEnabled
    void setScaleEnabled(boolean) -> setScaleEnabled
    void setScrollEnabled(boolean) -> setScrollEnabled
    boolean getDoubleTapEnabled() -> getDoubleTapEnabled
    android.view.GestureDetector$OnGestureListener getGestureListener() -> getGestureListener
    android.view.ScaleGestureDetector$OnScaleGestureListener getScaleListener() -> getScaleListener
    void _setImageDrawable(android.graphics.drawable.Drawable,android.graphics.Matrix,float,float) -> b
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onZoomAnimationCompleted(float) -> a
    float onDoubleTapPost(float,float) -> b
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> a
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> a
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> b
    boolean onDown(android.view.MotionEvent) -> b
    boolean onUp(android.view.MotionEvent) -> c
    boolean onSingleTapUp(android.view.MotionEvent) -> d
    it.sephiroth.android.library.imagezoom.ImageViewTouch$OnImageViewTouchSingleTapListener access$0(it.sephiroth.android.library.imagezoom.ImageViewTouch) -> a
    it.sephiroth.android.library.imagezoom.ImageViewTouch$OnImageViewTouchDoubleTapListener access$1(it.sephiroth.android.library.imagezoom.ImageViewTouch) -> b
it.sephiroth.android.library.imagezoom.ImageViewTouch$GestureListener -> it.sephiroth.android.library.imagezoom.a:
    it.sephiroth.android.library.imagezoom.ImageViewTouch this$0 -> a
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onDown(android.view.MotionEvent) -> onDown
it.sephiroth.android.library.imagezoom.ImageViewTouch$OnImageViewTouchDoubleTapListener -> it.sephiroth.android.library.imagezoom.b:
    void onDoubleTap() -> a
it.sephiroth.android.library.imagezoom.ImageViewTouch$OnImageViewTouchSingleTapListener -> it.sephiroth.android.library.imagezoom.c:
    void onSingleTapConfirmed() -> a
it.sephiroth.android.library.imagezoom.ImageViewTouch$ScaleListener -> it.sephiroth.android.library.imagezoom.d:
    boolean mScaled -> a
    it.sephiroth.android.library.imagezoom.ImageViewTouch this$0 -> b
    boolean onScale(android.view.ScaleGestureDetector) -> onScale
it.sephiroth.android.library.imagezoom.ImageViewTouchBase -> it.sephiroth.android.library.imagezoom.ImageViewTouchBase:
    it.sephiroth.android.library.imagezoom.easing.Easing mEasing -> F
    android.graphics.Matrix mBaseMatrix -> G
    android.graphics.Matrix mSuppMatrix -> H
    android.graphics.Matrix mNextMatrix -> I
    android.os.Handler mHandler -> J
    java.lang.Runnable mLayoutRunnable -> K
    boolean mUserScaled -> L
    float mMaxZoom -> a
    float mMinZoom -> b
    boolean mMaxZoomDefined -> c
    boolean mMinZoomDefined -> d
    android.graphics.Matrix mDisplayMatrix -> M
    float[] mMatrixValues -> N
    int mThisWidth -> e
    int mThisHeight -> f
    android.graphics.PointF mCenter -> g
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase$DisplayType mScaleType -> O
    boolean mScaleTypeChanged -> h
    boolean mBitmapChanged -> i
    int DEFAULT_ANIMATION_DURATION -> P
    android.graphics.RectF mBitmapRect -> Q
    android.graphics.RectF mCenterRect -> R
    android.graphics.RectF mScrollRect -> S
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase$OnDrawableChangeListener mDrawableChangeListener -> j
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase$OnLayoutChangeListener mOnLayoutChangeListener -> k
    void setOnDrawableChangedListener(it.sephiroth.android.library.imagezoom.ImageViewTouchBase$OnDrawableChangeListener) -> setOnDrawableChangedListener
    void setOnLayoutChangeListener(it.sephiroth.android.library.imagezoom.ImageViewTouchBase$OnLayoutChangeListener) -> setOnLayoutChangeListener
    void init(android.content.Context,android.util.AttributeSet,int) -> a
    void setScaleType(android.widget.ImageView$ScaleType) -> setScaleType
    void clear() -> d
    void setDisplayType(it.sephiroth.android.library.imagezoom.ImageViewTouchBase$DisplayType) -> setDisplayType
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase$DisplayType getDisplayType() -> getDisplayType
    void setMinScale(float) -> setMinScale
    void setMaxScale(float) -> setMaxScale
    void onLayout(boolean,int,int,int,int) -> onLayout
    void resetMatrix() -> e
    float getDefaultScale(it.sephiroth.android.library.imagezoom.ImageViewTouchBase$DisplayType) -> a
    void setImageResource(int) -> setImageResource
    void setImageBitmap(android.graphics.Bitmap) -> setImageBitmap
    void setImageBitmap(android.graphics.Bitmap,android.graphics.Matrix,float,float) -> a
    void setImageDrawable(android.graphics.drawable.Drawable) -> setImageDrawable
    void setImageDrawable(android.graphics.drawable.Drawable,android.graphics.Matrix,float,float) -> a
    void _setImageDrawable(android.graphics.drawable.Drawable,android.graphics.Matrix,float,float) -> b
    void onDrawableChanged(android.graphics.drawable.Drawable) -> a
    void fireOnLayoutChangeListener(int,int,int,int) -> b
    void fireOnDrawableChangeListener(android.graphics.drawable.Drawable) -> b
    void onLayoutChanged(int,int,int,int) -> a
    float computeMaxZoom() -> f
    float computeMinZoom() -> g
    float getMaxScale() -> getMaxScale
    float getMinScale() -> getMinScale
    android.graphics.Matrix getImageViewMatrix() -> getImageViewMatrix
    android.graphics.Matrix getImageViewMatrix(android.graphics.Matrix) -> b
    void setImageMatrix(android.graphics.Matrix) -> setImageMatrix
    void onImageMatrixChanged() -> b
    android.graphics.Matrix getDisplayMatrix() -> getDisplayMatrix
    void getProperBaseMatrix(android.graphics.drawable.Drawable,android.graphics.Matrix) -> a
    float getValue(android.graphics.Matrix,int) -> a
    android.graphics.RectF getBitmapRect() -> getBitmapRect
    android.graphics.RectF getBitmapRect(android.graphics.Matrix) -> c
    float getScale(android.graphics.Matrix) -> d
    float getRotation() -> getRotation
    float getScale() -> getScale
    void center(boolean,boolean) -> a
    android.graphics.RectF getCenter(android.graphics.Matrix,boolean,boolean) -> a
    void postTranslate(float,float) -> a
    void postScale(float,float,float) -> a
    android.graphics.PointF getCenter() -> getCenter
    void zoomTo(float) -> b
    void zoomTo(float,float) -> c
    void zoomTo(float,float,float) -> b
    void onZoom(float) -> c
    void onZoomAnimationCompleted(float) -> a
    void scrollBy(float,float) -> d
    void panBy(double,double) -> a
    void updateRect(android.graphics.RectF,android.graphics.RectF) -> a
    void scrollBy(float,float,double) -> a
    void zoomTo(float,float,float,float) -> a
it.sephiroth.android.library.imagezoom.ImageViewTouchBase$1 -> it.sephiroth.android.library.imagezoom.ImageViewTouchBase$1:
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase this$0 -> a
    android.graphics.drawable.Drawable val$drawable -> b
    android.graphics.Matrix val$initial_matrix -> c
    float val$min_zoom -> d
    float val$max_zoom -> e
    void run() -> run
it.sephiroth.android.library.imagezoom.ImageViewTouchBase$2 -> it.sephiroth.android.library.imagezoom.ImageViewTouchBase$2:
    double old_x -> a
    double old_y -> b
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase this$0 -> c
    double val$durationMs -> d
    long val$startTime -> e
    double val$dx -> f
    double val$dy -> g
    void run() -> run
it.sephiroth.android.library.imagezoom.ImageViewTouchBase$3 -> it.sephiroth.android.library.imagezoom.ImageViewTouchBase$3:
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase this$0 -> a
    float val$durationMs -> b
    long val$startTime -> c
    float val$deltaScale -> d
    float val$oldScale -> e
    float val$destX -> f
    float val$destY -> g
    void run() -> run
it.sephiroth.android.library.imagezoom.ImageViewTouchBase$DisplayType -> it.sephiroth.android.library.imagezoom.e:
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase$DisplayType NONE -> a
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase$DisplayType FIT_TO_SCREEN -> b
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase$DisplayType FIT_IF_BIGGER -> c
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase$DisplayType[] ENUM$VALUES -> d
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase$DisplayType[] values() -> values
    it.sephiroth.android.library.imagezoom.ImageViewTouchBase$DisplayType valueOf(java.lang.String) -> valueOf
it.sephiroth.android.library.imagezoom.ImageViewTouchBase$OnDrawableChangeListener -> it.sephiroth.android.library.imagezoom.f:
    void onDrawableChanged(android.graphics.drawable.Drawable) -> a
it.sephiroth.android.library.imagezoom.ImageViewTouchBase$OnLayoutChangeListener -> it.sephiroth.android.library.imagezoom.g:
    void onLayoutChanged(boolean,int,int,int,int) -> a
it.sephiroth.android.library.imagezoom.easing.Cubic -> it.sephiroth.android.library.imagezoom.easing.a:
    double easeOut(double,double,double,double) -> easeOut
    double easeIn(double,double,double,double) -> easeIn
    double easeInOut(double,double,double,double) -> easeInOut
it.sephiroth.android.library.imagezoom.easing.Easing -> it.sephiroth.android.library.imagezoom.easing.Easing:
    double easeOut(double,double,double,double) -> easeOut
    double easeIn(double,double,double,double) -> easeIn
    double easeInOut(double,double,double,double) -> easeInOut
it.sephiroth.android.library.imagezoom.easing.Expo -> it.sephiroth.android.library.imagezoom.easing.b:
    double easeOut(double,double,double,double) -> easeOut
    double easeIn(double,double,double,double) -> easeIn
    double easeInOut(double,double,double,double) -> easeInOut
it.sephiroth.android.library.imagezoom.easing.Linear -> it.sephiroth.android.library.imagezoom.easing.c:
    double easeNone(double,double,double,double) -> easeNone
    double easeOut(double,double,double,double) -> easeOut
    double easeIn(double,double,double,double) -> easeIn
    double easeInOut(double,double,double,double) -> easeInOut
it.sephiroth.android.library.imagezoom.easing.Quad -> it.sephiroth.android.library.imagezoom.easing.d:
    double easeOut(double,double,double,double) -> easeOut
    double easeIn(double,double,double,double) -> easeIn
    double easeInOut(double,double,double,double) -> easeInOut
it.sephiroth.android.library.imagezoom.easing.Quint -> it.sephiroth.android.library.imagezoom.easing.e:
    double easeOut(double,double,double,double) -> easeOut
    double easeIn(double,double,double,double) -> easeIn
    double easeInOut(double,double,double,double) -> easeInOut
it.sephiroth.android.library.imagezoom.graphics.FastBitmapDrawable -> it.sephiroth.android.library.imagezoom.a.a:
    android.graphics.Bitmap mBitmap -> a
    android.graphics.Paint mPaint -> b
    int mIntrinsicWidth -> c
    int mIntrinsicHeight -> d
    void setBitmap(android.graphics.Bitmap) -> a
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getMinimumWidth() -> getMinimumWidth
    int getMinimumHeight() -> getMinimumHeight
    android.graphics.Bitmap getBitmap() -> a
    android.graphics.Paint getPaint() -> b
it.sephiroth.android.library.imagezoom.graphics.IBitmapDrawable -> it.sephiroth.android.library.imagezoom.a.b:
    android.graphics.Bitmap getBitmap() -> a
it.sephiroth.android.library.utils.DataSetObservableExtended -> it.sephiroth.android.library.b.a:
    void notifyChanged() -> a
    void notifyInvalidated() -> b
it.sephiroth.android.library.utils.DataSetObserverExtended -> it.sephiroth.android.library.b.b:
it.sephiroth.android.library.widget.BaseAdapterExtended -> it.sephiroth.android.library.widget.a:
    it.sephiroth.android.library.utils.DataSetObservableExtended mDataSetObservableExtended -> a
    void registerDataSetObserverExtended(it.sephiroth.android.library.utils.DataSetObserverExtended) -> a
    void unregisterDataSetObserverExtended(it.sephiroth.android.library.utils.DataSetObserverExtended) -> b
    void notifyDataSetChanged() -> notifyDataSetChanged
    void notifyDataSetInvalidated() -> notifyDataSetInvalidated
it.sephiroth.android.library.widget.HorizontalListView -> it.sephiroth.android.library.widget.b:
it.sephiroth.android.library.widget.HorizontalListView$OnItemDragListener -> it.sephiroth.android.library.widget.c:
    boolean onItemStartDrag(android.widget.AdapterView,android.view.View,int,long) -> a
it.sephiroth.android.library.widget.HorizontalListView$OnLayoutChangeListener -> it.sephiroth.android.library.widget.d:
    void onLayoutChange(boolean,int,int,int,int) -> a
it.sephiroth.android.library.widget.HorizontalListView$OnScrollFinishedListener -> it.sephiroth.android.library.widget.e:
it.sephiroth.android.library.widget.HorizontalVariableListView -> it.sephiroth.android.library.widget.HorizontalVariableListView:
    boolean LOG_ENABLED -> a
    boolean mIsDragging -> e
    boolean mIsBeingDragged -> f
    int mActivePointerId -> g
    int mLastMotionX -> h
    android.view.VelocityTracker mVelocityTracker -> i
    int mOverscrollDistance -> j
    int mOverflingDistance -> k
    int mMinimumVelocity -> l
    int mMaximumVelocity -> m
    int mHeightMeasureSpec -> n
    int mWidthMeasureSpec -> o
    boolean mAnimateChanges -> p
    int mAlignMode -> b
    android.util.SparseBooleanArray mSelectedPositions -> c
    android.widget.ListAdapter mAdapter -> d
    int mAdapterItemCount -> q
    int mLeftViewIndex -> r
    int mRightViewIndex -> s
    android.view.GestureDetector mGesture -> t
    java.util.List mRecycleBin -> u
    java.util.Hashtable mViewTypeTable -> v
    java.util.List mChildWidths -> w
    it.sephiroth.android.library.widget.HorizontalVariableListView$DataSetChange mDataSetChange -> x
    boolean mForceLayout -> y
    int mDragTolerance -> z
    boolean mDragScrollEnabled -> A
    android.support.v4.widget.EdgeEffectCompat mEdgeGlowLeft -> B
    android.support.v4.widget.EdgeEffectCompat mEdgeGlowRight -> C
    int mOverScrollMode -> D
    android.widget.OverScroller mScroller -> E
    it.sephiroth.android.library.widget.HorizontalVariableListView$ScrollNotifier mScrollNotifier -> F
    it.sephiroth.android.library.widget.HorizontalVariableListView$SelectionMode mChoiceMode -> G
    int mMaxX -> H
    int mMinX -> I
    int mCurrentX -> J
    int mTouchSlop -> K
    int mRightEdge -> L
    int mLeftEdge -> M
    int[] nullInt -> N
    android.widget.AdapterView$OnItemSelectedListener mOnItemSelected -> O
    it.sephiroth.android.library.widget.HorizontalVariableListView$OnItemClickedListener mOnItemClicked -> P
    it.sephiroth.android.library.widget.HorizontalListView$OnItemDragListener mItemDragListener -> Q
    android.view.ViewTreeObserver$OnScrollChangedListener mScrollListener -> R
    it.sephiroth.android.library.widget.HorizontalListView$OnScrollFinishedListener mScrollFinishedListener -> S
    it.sephiroth.android.library.widget.HorizontalListView$OnLayoutChangeListener mLayoutChangeListener -> T
    it.sephiroth.android.library.utils.DataSetObserverExtended mDataObserverExtended -> U
    android.database.DataSetObserver mDataObserver -> V
    float mTestDragX -> W
    float mTestDragY -> Z
    boolean mCanCheckDrag -> aa
    boolean mWasFlinging -> ab
    java.lang.ref.WeakReference mOriginalDragItem -> ac
    it.sephiroth.android.library.widget.HorizontalVariableListView$FlingScroller mFlingScroller -> ad
    android.view.GestureDetector$OnGestureListener mGestureListener -> ae
    void setOnItemDragListener(it.sephiroth.android.library.widget.HorizontalListView$OnItemDragListener) -> setOnItemDragListener
    void setOnScrollListener(android.view.ViewTreeObserver$OnScrollChangedListener) -> setOnScrollListener
    void setOnLayoutChangeListener(it.sephiroth.android.library.widget.HorizontalListView$OnLayoutChangeListener) -> setOnLayoutChangeListener
    void setOnScrollFinishedListener(it.sephiroth.android.library.widget.HorizontalListView$OnScrollFinishedListener) -> setOnScrollFinishedListener
    it.sephiroth.android.library.widget.HorizontalListView$OnItemDragListener getOnItemDragListener() -> getOnItemDragListener
    void setSelectionMode(it.sephiroth.android.library.widget.HorizontalVariableListView$SelectionMode) -> setSelectionMode
    it.sephiroth.android.library.widget.HorizontalVariableListView$SelectionMode getChoiceMode() -> getChoiceMode
    void initScrollView(android.content.Context,android.util.AttributeSet,int) -> a
    void resetView() -> c
    void setOverScrollMode(int) -> setOverScrollMode
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void drawEdges(android.graphics.Canvas) -> a
    void setDragScrollEnabled(boolean) -> setDragScrollEnabled
    boolean getDragScrollEnabled() -> getDragScrollEnabled
    int getSelectedPosition() -> getSelectedPosition
    int[] getSelectedPositions() -> getSelectedPositions
    void setSelectedPosition(int,boolean) -> a
    void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener) -> setOnItemSelectedListener
    void setOnItemClickedListener(it.sephiroth.android.library.widget.HorizontalVariableListView$OnItemClickedListener) -> setOnItemClickedListener
    android.widget.ListAdapter getAdapter() -> getAdapter
    android.view.View getSelectedView() -> getSelectedView
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void emptyRecycler() -> d
    void reset() -> e
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setSelection(int) -> setSelection
    int[] measureChild(android.view.View) -> a
    void onMeasure(int,int) -> onMeasure
    void addAndMeasureChild(android.view.View,int,boolean) -> a
    void forceChildLayout(android.view.View,android.view.ViewGroup$LayoutParams,boolean) -> a
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onLayout(boolean,int,int,int,int) -> onLayout
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void layoutChildren() -> a
    void fillList(int) -> e
    int getViewWidth() -> getViewWidth
    void fillListLeft(int,int) -> b
    void fillListRight(int,int) -> c
    android.view.View fillItem(android.view.View,int,int,int,int) -> a
    android.view.View createNew(int,int,int) -> a
    android.graphics.Rect getChildBounds(int,int) -> d
    void handleDataSetChanged(it.sephiroth.android.library.widget.HorizontalVariableListView$DataSetChange) -> a
    void moveAllSelections(int,int) -> e
    void forceUpdateScroll() -> f
    void handleItemReplaced(int,int) -> f
    void handleItemRemoved(int,int) -> g
    void handleItemAdded(int,int) -> h
    int getFirstVisiblePosition() -> getFirstVisiblePosition
    int getLastVisiblePosition() -> getLastVisiblePosition
    android.view.View getItemAt(int) -> a
    int getPositionForView(android.view.View) -> getPositionForView
    void layoutChild(android.view.View,int,int,int) -> a
    void removeNonVisibleItems(int,int[]) -> a
    void fling(int) -> f
    void longPress(android.view.MotionEvent) -> a
    int getChildAtPosition(float,float) -> a
    boolean fireLongPress(android.view.View,int,long) -> a
    boolean fireItemDragStart(android.view.View,int,long) -> b
    void fireOnLayoutChangeListener(boolean,int,int,int,int) -> a
    void fireOnScrollChanged() -> g
    void postScrollNotifier() -> h
    void postNotifyLayoutChange(boolean,int,int,int,int) -> b
    void setIsDragging(boolean) -> setIsDragging
    int getItemIndex(android.view.View) -> b
    void initOrResetVelocityTracker() -> i
    void initVelocityTrackerIfNotExists() -> j
    void recycleVelocityTracker() -> k
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onSecondaryPointerUp(android.view.MotionEvent) -> b
    boolean checkDrag(int,int) -> i
    int computeScroll(int) -> b
    int scrollTo(int) -> c
    void scrollTo(int,int) -> scrollTo
    int getCurrentScrollX() -> getCurrentScrollX
    void onScrollChanged(int,int,int,int) -> onScrollChanged
    void onOverScrolled(int,int,boolean,boolean) -> onOverScrolled
    boolean isScrolling() -> b
    void computeScroll() -> computeScroll
    boolean overScrollBy(int,int,int,int,int,int,int,int,boolean) -> overScrollBy
    int getScrollRange() -> getScrollRange
    void smoothScrollTo(int) -> g
    void smoothScrollTo(int,int) -> j
    void smoothScrollBy(int,int) -> a
    void itemClick(android.view.View,int) -> a
    void setSelectedItem(android.view.View,int,boolean,boolean) -> a
    boolean getIsSelected(int) -> d
    int getMinX() -> getMinX
    int getMaxX() -> getMaxX
    void setDragTolerance(int) -> setDragTolerance
    void setGravity(int) -> setGravity
    int getGravity() -> getGravity
    void setAdapter(android.widget.Adapter) -> setAdapter
    android.widget.Adapter getAdapter() -> getAdapter
    it.sephiroth.android.library.widget.HorizontalVariableListView$DataSetChange access$2(it.sephiroth.android.library.widget.HorizontalVariableListView) -> a
    void access$3(it.sephiroth.android.library.widget.HorizontalVariableListView,it.sephiroth.android.library.widget.HorizontalVariableListView$DataSetChange) -> a
    void access$4(it.sephiroth.android.library.widget.HorizontalVariableListView,android.view.MotionEvent) -> a
    android.widget.OverScroller access$5(it.sephiroth.android.library.widget.HorizontalVariableListView) -> b
    boolean access$6(it.sephiroth.android.library.widget.HorizontalVariableListView) -> c
    int access$7(it.sephiroth.android.library.widget.HorizontalVariableListView) -> d
    int access$8(it.sephiroth.android.library.widget.HorizontalVariableListView) -> e
    void access$9(it.sephiroth.android.library.widget.HorizontalVariableListView,android.view.View,int) -> a
    void access$10(it.sephiroth.android.library.widget.HorizontalVariableListView) -> f
    int access$11(it.sephiroth.android.library.widget.HorizontalVariableListView) -> g
    int access$12(it.sephiroth.android.library.widget.HorizontalVariableListView) -> h
    void access$13(it.sephiroth.android.library.widget.HorizontalVariableListView,boolean,int,int,int,int) -> a
it.sephiroth.android.library.widget.HorizontalVariableListView$1 -> it.sephiroth.android.library.widget.f:
    it.sephiroth.android.library.widget.HorizontalVariableListView this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
it.sephiroth.android.library.widget.HorizontalVariableListView$2 -> it.sephiroth.android.library.widget.g:
    it.sephiroth.android.library.widget.HorizontalVariableListView this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
it.sephiroth.android.library.widget.HorizontalVariableListView$3 -> it.sephiroth.android.library.widget.h:
    it.sephiroth.android.library.widget.HorizontalVariableListView this$0 -> a
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onItemClick(android.view.MotionEvent) -> a
it.sephiroth.android.library.widget.HorizontalVariableListView$4 -> it.sephiroth.android.library.widget.HorizontalVariableListView$4:
    it.sephiroth.android.library.widget.HorizontalVariableListView this$0 -> a
    boolean val$changed -> b
    int val$left -> c
    int val$top -> d
    int val$right -> e
    int val$bottom -> f
    void run() -> run
it.sephiroth.android.library.widget.HorizontalVariableListView$DataSetChange -> it.sephiroth.android.library.widget.i:
    int viewType -> a
    int position -> b
    int status -> c
    void invalidate() -> a
    void clear() -> b
    boolean added() -> c
    boolean removed() -> d
    boolean replaced() -> e
    boolean invalidated() -> f
    boolean check(int) -> a
it.sephiroth.android.library.widget.HorizontalVariableListView$FlingScroller -> it.sephiroth.android.library.widget.HorizontalVariableListView$FlingScroller:
    int mDuration -> a
    int mFinalPosition -> b
    int mOffset -> c
    boolean mMore -> d
    it.sephiroth.android.library.widget.HorizontalVariableListView this$0 -> e
    void start(int,int) -> a
    void stop() -> a
    boolean hasMore() -> b
    void run() -> run
it.sephiroth.android.library.widget.HorizontalVariableListView$OnItemClickedListener -> it.sephiroth.android.library.widget.j:
    boolean onItemClick(android.widget.AdapterView,android.view.View,int,long) -> a
it.sephiroth.android.library.widget.HorizontalVariableListView$ScrollNotifier -> it.sephiroth.android.library.widget.HorizontalVariableListView$ScrollNotifier:
    it.sephiroth.android.library.widget.HorizontalVariableListView this$0 -> a
    void run() -> run
it.sephiroth.android.library.widget.HorizontalVariableListView$SelectionMode -> it.sephiroth.android.library.widget.k:
    it.sephiroth.android.library.widget.HorizontalVariableListView$SelectionMode Single -> a
    it.sephiroth.android.library.widget.HorizontalVariableListView$SelectionMode Multiple -> b
    it.sephiroth.android.library.widget.HorizontalVariableListView$SelectionMode[] ENUM$VALUES -> c
    it.sephiroth.android.library.widget.HorizontalVariableListView$SelectionMode[] values() -> values
    it.sephiroth.android.library.widget.HorizontalVariableListView$SelectionMode valueOf(java.lang.String) -> valueOf
magic.yuyong.R -> magic.yuyong.a:
magic.yuyong.R$styleable -> magic.yuyong.b:
    int[] AsyncImageView -> AsyncImageView
    int AsyncImageView_defaultSrc -> AsyncImageView_defaultSrc
    int AsyncImageView_inDensity -> AsyncImageView_inDensity
    int AsyncImageView_url -> AsyncImageView_url
    int[] AviaryAdjustImageView -> AviaryAdjustImageView
    int AviaryAdjustImageView_android_padding -> AviaryAdjustImageView_android_padding
    int AviaryAdjustImageView_aviary_animationDuration -> AviaryAdjustImageView_aviary_animationDuration
    int AviaryAdjustImageView_aviary_animationDuration2 -> AviaryAdjustImageView_aviary_animationDuration2
    int AviaryAdjustImageView_aviary_color1 -> AviaryAdjustImageView_aviary_color1
    int AviaryAdjustImageView_aviary_enable3d -> AviaryAdjustImageView_aviary_enable3d
    int AviaryAdjustImageView_aviary_freeRotate -> AviaryAdjustImageView_aviary_freeRotate
    int AviaryAdjustImageView_aviary_handle -> AviaryAdjustImageView_aviary_handle
    int AviaryAdjustImageView_aviary_strokeColor -> AviaryAdjustImageView_aviary_strokeColor
    int AviaryAdjustImageView_aviary_strokeColor2 -> AviaryAdjustImageView_aviary_strokeColor2
    int AviaryAdjustImageView_aviary_strokeWidth -> AviaryAdjustImageView_aviary_strokeWidth
    int AviaryAdjustImageView_aviary_strokeWidth2 -> AviaryAdjustImageView_aviary_strokeWidth2
    int[] AviaryCellLayout -> AviaryCellLayout
    int AviaryCellLayout_aviary_cellBottomPadding -> AviaryCellLayout_aviary_cellBottomPadding
    int AviaryCellLayout_aviary_cellEndPadding -> AviaryCellLayout_aviary_cellEndPadding
    int AviaryCellLayout_aviary_cellStartPadding -> AviaryCellLayout_aviary_cellStartPadding
    int AviaryCellLayout_aviary_cellTopPadding -> AviaryCellLayout_aviary_cellTopPadding
    int AviaryCellLayout_aviary_cells -> AviaryCellLayout_aviary_cells
    int AviaryCellLayout_aviary_horizontalPadding -> AviaryCellLayout_aviary_horizontalPadding
    int AviaryCellLayout_aviary_layout_direction -> AviaryCellLayout_aviary_layout_direction
    int AviaryCellLayout_aviary_rows -> AviaryCellLayout_aviary_rows
    int AviaryCellLayout_aviary_verticalPadding -> AviaryCellLayout_aviary_verticalPadding
    int[] AviaryCropHighlightView -> AviaryCropHighlightView
    int AviaryCropHighlightView_android_src -> AviaryCropHighlightView_android_src
    int AviaryCropHighlightView_aviary_color1 -> AviaryCropHighlightView_aviary_color1
    int AviaryCropHighlightView_aviary_color2 -> AviaryCropHighlightView_aviary_color2
    int AviaryCropHighlightView_aviary_strokeColor -> AviaryCropHighlightView_aviary_strokeColor
    int AviaryCropHighlightView_aviary_strokeColor2 -> AviaryCropHighlightView_aviary_strokeColor2
    int AviaryCropHighlightView_aviary_strokeColor3 -> AviaryCropHighlightView_aviary_strokeColor3
    int AviaryCropHighlightView_aviary_strokeColor4 -> AviaryCropHighlightView_aviary_strokeColor4
    int AviaryCropHighlightView_aviary_strokeWidth -> AviaryCropHighlightView_aviary_strokeWidth
    int AviaryCropHighlightView_aviary_strokeWidth2 -> AviaryCropHighlightView_aviary_strokeWidth2
    int[] AviaryCropImageView -> AviaryCropImageView
    int AviaryCropImageView_aviary_highlightStyle -> AviaryCropImageView_aviary_highlightStyle
    int AviaryCropImageView_aviary_minCropSize -> AviaryCropImageView_aviary_minCropSize
    int[] AviaryDrawableHighlightView -> AviaryDrawableHighlightView
    int AviaryDrawableHighlightView_android_background -> AviaryDrawableHighlightView_android_background
    int AviaryDrawableHighlightView_android_padding -> AviaryDrawableHighlightView_android_padding
    int AviaryDrawableHighlightView_aviary_deleteDrawable -> AviaryDrawableHighlightView_aviary_deleteDrawable
    int AviaryDrawableHighlightView_aviary_minSize -> AviaryDrawableHighlightView_aviary_minSize
    int AviaryDrawableHighlightView_aviary_moveEnabled -> AviaryDrawableHighlightView_aviary_moveEnabled
    int AviaryDrawableHighlightView_aviary_resizeEdgeMode -> AviaryDrawableHighlightView_aviary_resizeEdgeMode
    int AviaryDrawableHighlightView_aviary_resizeEnabled -> AviaryDrawableHighlightView_aviary_resizeEnabled
    int AviaryDrawableHighlightView_aviary_rotateDrawable -> AviaryDrawableHighlightView_aviary_rotateDrawable
    int AviaryDrawableHighlightView_aviary_rotateEnabled -> AviaryDrawableHighlightView_aviary_rotateEnabled
    int[] AviaryEdgeEffect -> AviaryEdgeEffect
    int AviaryEdgeEffect_aviary_blendMode -> AviaryEdgeEffect_aviary_blendMode
    int AviaryEdgeEffect_aviary_edgeColor -> AviaryEdgeEffect_aviary_edgeColor
    int AviaryEdgeEffect_aviary_edgeDrawable -> AviaryEdgeEffect_aviary_edgeDrawable
    int AviaryEdgeEffect_aviary_glowDrawable -> AviaryEdgeEffect_aviary_glowDrawable
    int[] AviaryEffectThumbLayout -> AviaryEffectThumbLayout
    int AviaryEffectThumbLayout_aviary_animationDuration -> AviaryEffectThumbLayout_aviary_animationDuration
    int[] AviaryGallery -> AviaryGallery
    int AviaryGallery_android_animationDuration -> AviaryGallery_android_animationDuration
    int[] AviaryGalleryIndicatorView -> AviaryGalleryIndicatorView
    int AviaryGalleryIndicatorView_aviary_drawableStyle -> AviaryGalleryIndicatorView_aviary_drawableStyle
    int[] AviaryGalleryTopIndicator -> AviaryGalleryTopIndicator
    int AviaryGalleryTopIndicator_android_minHeight -> AviaryGalleryTopIndicator_android_minHeight
    int AviaryGalleryTopIndicator_android_shadowColor -> AviaryGalleryTopIndicator_android_shadowColor
    int AviaryGalleryTopIndicator_android_shadowDy -> AviaryGalleryTopIndicator_android_shadowDy
    int AviaryGalleryTopIndicator_aviary_color1 -> AviaryGalleryTopIndicator_aviary_color1
    int AviaryGalleryTopIndicator_aviary_direction -> AviaryGalleryTopIndicator_aviary_direction
    int AviaryGalleryTopIndicator_aviary_indicatorSize -> AviaryGalleryTopIndicator_aviary_indicatorSize
    int AviaryGalleryTopIndicator_aviary_offsety -> AviaryGalleryTopIndicator_aviary_offsety
    int AviaryGalleryTopIndicator_aviary_strokeColor -> AviaryGalleryTopIndicator_aviary_strokeColor
    int AviaryGalleryTopIndicator_aviary_strokeColor2 -> AviaryGalleryTopIndicator_aviary_strokeColor2
    int AviaryGalleryTopIndicator_aviary_strokeWidth -> AviaryGalleryTopIndicator_aviary_strokeWidth
    int[] AviaryHighlightImageButton -> AviaryHighlightImageButton
    int AviaryHighlightImageButton_aviary_blendMode -> AviaryHighlightImageButton_aviary_blendMode
    int AviaryHighlightImageButton_aviary_checked -> AviaryHighlightImageButton_aviary_checked
    int AviaryHighlightImageButton_aviary_glowMode -> AviaryHighlightImageButton_aviary_glowMode
    int AviaryHighlightImageButton_aviary_glowSize -> AviaryHighlightImageButton_aviary_glowSize
    int AviaryHighlightImageButton_aviary_highlightColorChecked -> AviaryHighlightImageButton_aviary_highlightColorChecked
    int AviaryHighlightImageButton_aviary_highlightColorPressed -> AviaryHighlightImageButton_aviary_highlightColorPressed
    int AviaryHighlightImageButton_aviary_highlightColorSelected -> AviaryHighlightImageButton_aviary_highlightColorSelected
    int AviaryHighlightImageButton_aviary_highlightMode -> AviaryHighlightImageButton_aviary_highlightMode
    int AviaryHighlightImageButton_aviary_toggleable -> AviaryHighlightImageButton_aviary_toggleable
    int AviaryHighlightImageButton_aviary_untoggleable -> AviaryHighlightImageButton_aviary_untoggleable
    int[] AviaryImageViewDrawableOverlay -> AviaryImageViewDrawableOverlay
    int AviaryImageViewDrawableOverlay_aviary_highlightStyle -> AviaryImageViewDrawableOverlay_aviary_highlightStyle
    int[] AviaryPluginDividerDrawable -> AviaryPluginDividerDrawable
    int AviaryPluginDividerDrawable_android_textColor -> AviaryPluginDividerDrawable_android_textColor
    int AviaryPluginDividerDrawable_aviary_strokeColor -> AviaryPluginDividerDrawable_aviary_strokeColor
    int AviaryPluginDividerDrawable_aviary_strokeWidth -> AviaryPluginDividerDrawable_aviary_strokeWidth
    int AviaryPluginDividerDrawable_aviary_textPerc -> AviaryPluginDividerDrawable_aviary_textPerc
    int AviaryPluginDividerDrawable_aviary_typeface -> AviaryPluginDividerDrawable_aviary_typeface
    int[] AviaryPreviewFillDrawable -> AviaryPreviewFillDrawable
    int AviaryPreviewFillDrawable_aviary_radius -> AviaryPreviewFillDrawable_aviary_radius
    int AviaryPreviewFillDrawable_aviary_strokeColor -> AviaryPreviewFillDrawable_aviary_strokeColor
    int AviaryPreviewFillDrawable_aviary_strokeWidth -> AviaryPreviewFillDrawable_aviary_strokeWidth
    int[] AviaryPreviewSpotDrawable -> AviaryPreviewSpotDrawable
    int AviaryPreviewSpotDrawable_aviary_bg_color1 -> AviaryPreviewSpotDrawable_aviary_bg_color1
    int AviaryPreviewSpotDrawable_aviary_bg_color2 -> AviaryPreviewSpotDrawable_aviary_bg_color2
    int AviaryPreviewSpotDrawable_aviary_color1 -> AviaryPreviewSpotDrawable_aviary_color1
    int AviaryPreviewSpotDrawable_aviary_color2 -> AviaryPreviewSpotDrawable_aviary_color2
    int AviaryPreviewSpotDrawable_aviary_color3 -> AviaryPreviewSpotDrawable_aviary_color3
    int AviaryPreviewSpotDrawable_aviary_color4 -> AviaryPreviewSpotDrawable_aviary_color4
    int AviaryPreviewSpotDrawable_aviary_glowSize -> AviaryPreviewSpotDrawable_aviary_glowSize
    int AviaryPreviewSpotDrawable_aviary_highlightColorChecked -> AviaryPreviewSpotDrawable_aviary_highlightColorChecked
    int AviaryPreviewSpotDrawable_aviary_strokeColor -> AviaryPreviewSpotDrawable_aviary_strokeColor
    int AviaryPreviewSpotDrawable_aviary_strokeWidth -> AviaryPreviewSpotDrawable_aviary_strokeWidth
    int[] AviarySeekBar -> AviarySeekBar
    int AviarySeekBar_aviarySeekBarSecondary -> AviarySeekBar_aviarySeekBarSecondary
    int AviarySeekBar_aviarySeekBarSecondaryCenter -> AviarySeekBar_aviarySeekBarSecondaryCenter
    int AviarySeekBar_aviarySeekBarSecondaryInverted -> AviarySeekBar_aviarySeekBarSecondaryInverted
    int AviarySeekBar_aviarySeekBarThumb -> AviarySeekBar_aviarySeekBarThumb
    int AviarySeekBar_aviarySeekBarThumbOffset -> AviarySeekBar_aviarySeekBarThumbOffset
    int[] AviaryTextView -> AviaryTextView
    int AviaryTextView_aviary_typeface -> AviaryTextView_aviary_typeface
    int[] AviaryTiltShiftImageView -> AviaryTiltShiftImageView
    int AviaryTiltShiftImageView_aviaryCrosshair_enabled -> AviaryTiltShiftImageView_aviaryCrosshair_enabled
    int AviaryTiltShiftImageView_aviaryWave_animationDuration -> AviaryTiltShiftImageView_aviaryWave_animationDuration
    int AviaryTiltShiftImageView_aviaryWave_innerRadius -> AviaryTiltShiftImageView_aviaryWave_innerRadius
    int AviaryTiltShiftImageView_aviaryWave_outerRadius -> AviaryTiltShiftImageView_aviaryWave_outerRadius
    int AviaryTiltShiftImageView_aviaryWave_pointDrawable -> AviaryTiltShiftImageView_aviaryWave_pointDrawable
    int AviaryTiltShiftImageView_aviary_animationDuration -> AviaryTiltShiftImageView_aviary_animationDuration
    int AviaryTiltShiftImageView_aviary_crosshair_edge -> AviaryTiltShiftImageView_aviary_crosshair_edge
    int AviaryTiltShiftImageView_aviary_crosshair_radius -> AviaryTiltShiftImageView_aviary_crosshair_radius
    int AviaryTiltShiftImageView_aviary_crosshair_strokeWidth -> AviaryTiltShiftImageView_aviary_crosshair_strokeWidth
    int AviaryTiltShiftImageView_aviary_shape_defaultsize -> AviaryTiltShiftImageView_aviary_shape_defaultsize
    int AviaryTiltShiftImageView_aviary_shape_maxsize -> AviaryTiltShiftImageView_aviary_shape_maxsize
    int AviaryTiltShiftImageView_aviary_shape_minsize -> AviaryTiltShiftImageView_aviary_shape_minsize
    int AviaryTiltShiftImageView_aviary_strokeColor -> AviaryTiltShiftImageView_aviary_strokeColor
    int AviaryTiltShiftImageView_aviary_strokeColor2 -> AviaryTiltShiftImageView_aviary_strokeColor2
    int AviaryTiltShiftImageView_aviary_strokeWidth -> AviaryTiltShiftImageView_aviary_strokeWidth
    int AviaryTiltShiftImageView_aviary_timeout -> AviaryTiltShiftImageView_aviary_timeout
    int[] AviaryWheel -> AviaryWheel
    int AviaryWheel_aviaryWheelIndicator -> AviaryWheel_aviaryWheelIndicator
    int AviaryWheel_aviaryWheelLine -> AviaryWheel_aviaryWheelLine
    int AviaryWheel_aviaryWheelShadowTop -> AviaryWheel_aviaryWheelShadowTop
    int AviaryWheel_aviary_edgeStyle -> AviaryWheel_aviary_edgeStyle
    int[] AviaryWorkspace -> AviaryWorkspace
    int AviaryWorkspace_aviary_defaultScreen -> AviaryWorkspace_aviary_defaultScreen
    int AviaryWorkspace_aviary_overscroll -> AviaryWorkspace_aviary_overscroll
    int[] AviaryWorkspaceIndicator -> AviaryWorkspaceIndicator
    int AviaryWorkspaceIndicator_aviary_indicatorId -> AviaryWorkspaceIndicator_aviary_indicatorId
    int[] CirclePageIndicator -> CirclePageIndicator
    int CirclePageIndicator_android_background -> CirclePageIndicator_android_background
    int CirclePageIndicator_android_orientation -> CirclePageIndicator_android_orientation
    int CirclePageIndicator_centered -> CirclePageIndicator_centered
    int CirclePageIndicator_fillColor -> CirclePageIndicator_fillColor
    int CirclePageIndicator_pageColor -> CirclePageIndicator_pageColor
    int CirclePageIndicator_radius -> CirclePageIndicator_radius
    int CirclePageIndicator_snap -> CirclePageIndicator_snap
    int CirclePageIndicator_strokeColor -> CirclePageIndicator_strokeColor
    int CirclePageIndicator_strokeWidth -> CirclePageIndicator_strokeWidth
    int[] LinePageIndicator -> LinePageIndicator
    int LinePageIndicator_android_background -> LinePageIndicator_android_background
    int LinePageIndicator_centered -> LinePageIndicator_centered
    int LinePageIndicator_gapWidth -> LinePageIndicator_gapWidth
    int LinePageIndicator_lineWidth -> LinePageIndicator_lineWidth
    int LinePageIndicator_selectedColor -> LinePageIndicator_selectedColor
    int LinePageIndicator_strokeWidth -> LinePageIndicator_strokeWidth
    int LinePageIndicator_unselectedColor -> LinePageIndicator_unselectedColor
    int[] Theme -> Theme
    int Theme_aviaryAdjustDividerWeight -> Theme_aviaryAdjustDividerWeight
    int Theme_aviaryAdjustImageViewStyle -> Theme_aviaryAdjustImageViewStyle
    int Theme_aviaryAdjustItemWeight -> Theme_aviaryAdjustItemWeight
    int Theme_aviaryAdjustOptionPanelToggleButtonStyle -> Theme_aviaryAdjustOptionPanelToggleButtonStyle
    int Theme_aviaryAdjustOptionPanelToggleCenterButtonStyle -> Theme_aviaryAdjustOptionPanelToggleCenterButtonStyle
    int Theme_aviaryAdjustOptionPanelToggleLeftButtonStyle -> Theme_aviaryAdjustOptionPanelToggleLeftButtonStyle
    int Theme_aviaryAdjustOptionPanelToggleRightButtonStyle -> Theme_aviaryAdjustOptionPanelToggleRightButtonStyle
    int Theme_aviaryBackgroundColor -> Theme_aviaryBackgroundColor
    int Theme_aviaryBottomBarHeight -> Theme_aviaryBottomBarHeight
    int Theme_aviaryBottomBarHorizontalViewStyle -> Theme_aviaryBottomBarHorizontalViewStyle
    int Theme_aviaryBottomBarLogoContainerStyle -> Theme_aviaryBottomBarLogoContainerStyle
    int Theme_aviaryBottomBarLogoImageStyle -> Theme_aviaryBottomBarLogoImageStyle
    int Theme_aviaryBottomBarOptionPanelContainerStyle -> Theme_aviaryBottomBarOptionPanelContainerStyle
    int Theme_aviaryBottomBarOptionPanelContainerStyleNoMargin -> Theme_aviaryBottomBarOptionPanelContainerStyleNoMargin
    int Theme_aviaryBottomBarOptionPanelStyle -> Theme_aviaryBottomBarOptionPanelStyle
    int Theme_aviaryBottomBarToolFeedBackStyle -> Theme_aviaryBottomBarToolFeedBackStyle
    int Theme_aviaryBottomBarToolImageStyle -> Theme_aviaryBottomBarToolImageStyle
    int Theme_aviaryBottomBarToolStyle -> Theme_aviaryBottomBarToolStyle
    int Theme_aviaryBottomBarToolTextStyle -> Theme_aviaryBottomBarToolTextStyle
    int Theme_aviaryBottomBarViewFlipperStyle -> Theme_aviaryBottomBarViewFlipperStyle
    int Theme_aviaryColorSplashOptionPanelToggleButtonStyle -> Theme_aviaryColorSplashOptionPanelToggleButtonStyle
    int Theme_aviaryColorSplashOptionPanelToggleLeftButtonStyle -> Theme_aviaryColorSplashOptionPanelToggleLeftButtonStyle
    int Theme_aviaryColorSplashOptionPanelToggleRightButtonStyle -> Theme_aviaryColorSplashOptionPanelToggleRightButtonStyle
    int Theme_aviaryCropHighlightStyle -> Theme_aviaryCropHighlightStyle
    int Theme_aviaryCropImageViewStyle -> Theme_aviaryCropImageViewStyle
    int Theme_aviaryCustomDialogButtonSecondaryStyle -> Theme_aviaryCustomDialogButtonSecondaryStyle
    int Theme_aviaryCustomDialogButtonStyle -> Theme_aviaryCustomDialogButtonStyle
    int Theme_aviaryDefaultTextStyle -> Theme_aviaryDefaultTextStyle
    int Theme_aviaryEdgeEffectDefaultStyle -> Theme_aviaryEdgeEffectDefaultStyle
    int Theme_aviaryEffectThumbDividerLeftContainerStyle -> Theme_aviaryEffectThumbDividerLeftContainerStyle
    int Theme_aviaryEffectThumbDividerLeftStyle -> Theme_aviaryEffectThumbDividerLeftStyle
    int Theme_aviaryEffectThumbDividerRightContainerStyle -> Theme_aviaryEffectThumbDividerRightContainerStyle
    int Theme_aviaryEffectThumbDividerRightStyle -> Theme_aviaryEffectThumbDividerRightStyle
    int Theme_aviaryEffectThumbDividerStyle -> Theme_aviaryEffectThumbDividerStyle
    int Theme_aviaryEffectThumbDividerTextStyle -> Theme_aviaryEffectThumbDividerTextStyle
    int Theme_aviaryEffectThumbHiddenSelector -> Theme_aviaryEffectThumbHiddenSelector
    int Theme_aviaryEffectThumbLayoutExternalStyle -> Theme_aviaryEffectThumbLayoutExternalStyle
    int Theme_aviaryEffectThumbLayoutStyle -> Theme_aviaryEffectThumbLayoutStyle
    int Theme_aviaryEffectThumbTextStyle -> Theme_aviaryEffectThumbTextStyle
    int Theme_aviaryEffectsHorizontalViewStyle -> Theme_aviaryEffectsHorizontalViewStyle
    int Theme_aviaryEnhanceItemWeight -> Theme_aviaryEnhanceItemWeight
    int Theme_aviaryEnhanceOptionPanelToggleCenterButtonStyle -> Theme_aviaryEnhanceOptionPanelToggleCenterButtonStyle
    int Theme_aviaryEnhanceOptionPanelToggleLeftButtonStyle -> Theme_aviaryEnhanceOptionPanelToggleLeftButtonStyle
    int Theme_aviaryEnhanceOptionPanelToggleRightButtonStyle -> Theme_aviaryEnhanceOptionPanelToggleRightButtonStyle
    int Theme_aviaryFeedbackDialogDividerStyle -> Theme_aviaryFeedbackDialogDividerStyle
    int Theme_aviaryFeedbackDialogStyle -> Theme_aviaryFeedbackDialogStyle
    int Theme_aviaryFeedbackDialogTextMessageStyle -> Theme_aviaryFeedbackDialogTextMessageStyle
    int Theme_aviaryFeedbackDialogTextVersionStyle -> Theme_aviaryFeedbackDialogTextVersionStyle
    int Theme_aviaryFocusOptionPanelToggleLeftButtonStyle -> Theme_aviaryFocusOptionPanelToggleLeftButtonStyle
    int Theme_aviaryFocusOptionPanelToggleRightButtonStyle -> Theme_aviaryFocusOptionPanelToggleRightButtonStyle
    int Theme_aviaryFontLight -> Theme_aviaryFontLight
    int Theme_aviaryFontRegular -> Theme_aviaryFontRegular
    int Theme_aviaryGalleryBottomIndicatorStyle -> Theme_aviaryGalleryBottomIndicatorStyle
    int Theme_aviaryGalleryItemContainerStyle -> Theme_aviaryGalleryItemContainerStyle
    int Theme_aviaryGalleryItemCropImageViewStyle -> Theme_aviaryGalleryItemCropImageViewStyle
    int Theme_aviaryGalleryItemCropTextCustomStyle -> Theme_aviaryGalleryItemCropTextCustomStyle
    int Theme_aviaryGalleryItemCropTextNormalStyle -> Theme_aviaryGalleryItemCropTextNormalStyle
    int Theme_aviaryGalleryItemDividerStyle -> Theme_aviaryGalleryItemDividerStyle
    int Theme_aviaryGalleryItemHighlightImageStyle -> Theme_aviaryGalleryItemHighlightImageStyle
    int Theme_aviaryGalleryStyle -> Theme_aviaryGalleryStyle
    int Theme_aviaryGalleryTopIndicatorStyle -> Theme_aviaryGalleryTopIndicatorStyle
    int Theme_aviaryHiddenEditTextStyle -> Theme_aviaryHiddenEditTextStyle
    int Theme_aviaryHiddenEditTextStyleMultiline -> Theme_aviaryHiddenEditTextStyleMultiline
    int Theme_aviaryHighlightImageButtonStyle -> Theme_aviaryHighlightImageButtonStyle
    int Theme_aviaryIAPDialogContainerStyle -> Theme_aviaryIAPDialogContainerStyle
    int Theme_aviaryIAPDialogDownloadButtonStyle -> Theme_aviaryIAPDialogDownloadButtonStyle
    int Theme_aviaryIAPDialogGridBackground -> Theme_aviaryIAPDialogGridBackground
    int Theme_aviaryIAPDialogGridTopStyle -> Theme_aviaryIAPDialogGridTopStyle
    int Theme_aviaryIAPDialogHeightWeight -> Theme_aviaryIAPDialogHeightWeight
    int Theme_aviaryIAPDialogIcon -> Theme_aviaryIAPDialogIcon
    int Theme_aviaryIAPDialogMainLayout -> Theme_aviaryIAPDialogMainLayout
    int Theme_aviaryIAPDialogMarginTopWeight -> Theme_aviaryIAPDialogMarginTopWeight
    int Theme_aviaryIAPDialogShadowBottom -> Theme_aviaryIAPDialogShadowBottom
    int Theme_aviaryIAPDialogShadowTop -> Theme_aviaryIAPDialogShadowTop
    int Theme_aviaryIAPDialogTextStyle -> Theme_aviaryIAPDialogTextStyle
    int Theme_aviaryIAPDialogTitleStyle -> Theme_aviaryIAPDialogTitleStyle
    int Theme_aviaryIAPDialogWidthWeight -> Theme_aviaryIAPDialogWidthWeight
    int Theme_aviaryIAPDialogWorkspaceIndicatorStyle -> Theme_aviaryIAPDialogWorkspaceIndicatorStyle
    int Theme_aviaryIAPDialogWorkspaceStyle -> Theme_aviaryIAPDialogWorkspaceStyle
    int Theme_aviaryImageViewDrawableOverlaySticker -> Theme_aviaryImageViewDrawableOverlaySticker
    int Theme_aviaryImageViewDrawableOverlayStickerHighlightStyle -> Theme_aviaryImageViewDrawableOverlayStickerHighlightStyle
    int Theme_aviaryImageViewDrawableOverlayText -> Theme_aviaryImageViewDrawableOverlayText
    int Theme_aviaryImageViewDrawableOverlayTextHighlightStyle -> Theme_aviaryImageViewDrawableOverlayTextHighlightStyle
    int Theme_aviaryLensViewStyle -> Theme_aviaryLensViewStyle
    int Theme_aviaryLoaderToastStyle -> Theme_aviaryLoaderToastStyle
    int Theme_aviaryMainImagePadding -> Theme_aviaryMainImagePadding
    int Theme_aviaryMemeButtonStyle -> Theme_aviaryMemeButtonStyle
    int Theme_aviaryMemeClearButtonStyle -> Theme_aviaryMemeClearButtonStyle
    int Theme_aviaryNavBarHeight -> Theme_aviaryNavBarHeight
    int Theme_aviaryNavBarStyle -> Theme_aviaryNavBarStyle
    int Theme_aviaryNavButtonApplyStyle -> Theme_aviaryNavButtonApplyStyle
    int Theme_aviaryNavButtonStyle -> Theme_aviaryNavButtonStyle
    int Theme_aviaryNavDividerStyle -> Theme_aviaryNavDividerStyle
    int Theme_aviaryNavTitleStyle -> Theme_aviaryNavTitleStyle
    int Theme_aviaryOptionPanelBottomIndicatorStyle -> Theme_aviaryOptionPanelBottomIndicatorStyle
    int Theme_aviaryOptionPanelBottomLineStyle -> Theme_aviaryOptionPanelBottomLineStyle
    int Theme_aviaryOptionPanelDefaultButtonStyle -> Theme_aviaryOptionPanelDefaultButtonStyle
    int Theme_aviaryOptionPanelToggleButtonStyle -> Theme_aviaryOptionPanelToggleButtonStyle
    int Theme_aviaryOptionPanelToggleCenterButtonStyle -> Theme_aviaryOptionPanelToggleCenterButtonStyle
    int Theme_aviaryOptionPanelToggleLeftButtonStyle -> Theme_aviaryOptionPanelToggleLeftButtonStyle
    int Theme_aviaryOptionPanelToggleRightButtonStyle -> Theme_aviaryOptionPanelToggleRightButtonStyle
    int Theme_aviaryOptionPanelTopIndicatorStyle -> Theme_aviaryOptionPanelTopIndicatorStyle
    int Theme_aviaryPanelDisabledStatusBackground -> Theme_aviaryPanelDisabledStatusBackground
    int Theme_aviaryPreviewFillDrawableStyle -> Theme_aviaryPreviewFillDrawableStyle
    int Theme_aviaryPreviewSpotDrawableStyle -> Theme_aviaryPreviewSpotDrawableStyle
    int Theme_aviaryPreviewSpotViewStyle -> Theme_aviaryPreviewSpotViewStyle
    int Theme_aviaryPrimaryButtonStyle -> Theme_aviaryPrimaryButtonStyle
    int Theme_aviaryProgressBarActionBar -> Theme_aviaryProgressBarActionBar
    int Theme_aviaryProgressBarActionBarHeight -> Theme_aviaryProgressBarActionBarHeight
    int Theme_aviaryProgressBarActionBarWidth -> Theme_aviaryProgressBarActionBarWidth
    int Theme_aviaryProgressBarLarge -> Theme_aviaryProgressBarLarge
    int Theme_aviaryProgressBarLargeInverse -> Theme_aviaryProgressBarLargeInverse
    int Theme_aviaryProgressBarMedium -> Theme_aviaryProgressBarMedium
    int Theme_aviaryProgressBarMediumInverse -> Theme_aviaryProgressBarMediumInverse
    int Theme_aviaryProgressBarSmall -> Theme_aviaryProgressBarSmall
    int Theme_aviaryProgressBarSmallInverse -> Theme_aviaryProgressBarSmallInverse
    int Theme_aviarySecondaryButtonStyle -> Theme_aviarySecondaryButtonStyle
    int Theme_aviarySeekBarStyle -> Theme_aviarySeekBarStyle
    int Theme_aviarySplashDividerWeight -> Theme_aviarySplashDividerWeight
    int Theme_aviarySplashItemWeight -> Theme_aviarySplashItemWeight
    int Theme_aviarySymbolMinusStyle -> Theme_aviarySymbolMinusStyle
    int Theme_aviarySymbolPlusStyle -> Theme_aviarySymbolPlusStyle
    int Theme_aviaryTiltShiftViewStyle -> Theme_aviaryTiltShiftViewStyle
    int Theme_aviaryToastExitAnimation -> Theme_aviaryToastExitAnimation
    int Theme_aviaryToggleButtonStyle -> Theme_aviaryToggleButtonStyle
    int Theme_aviaryWheelStyle -> Theme_aviaryWheelStyle
    int Theme_textAppearance -> Theme_textAppearance
    int Theme_textAppearanceInverted -> Theme_textAppearanceInverted
    int Theme_textAppearanceLarge -> Theme_textAppearanceLarge
    int Theme_textAppearanceLargeInverted -> Theme_textAppearanceLargeInverted
    int Theme_textAppearanceMedium -> Theme_textAppearanceMedium
    int Theme_textAppearanceMediumInverted -> Theme_textAppearanceMediumInverted
    int Theme_textAppearanceSmall -> Theme_textAppearanceSmall
    int Theme_textAppearanceSmallInverted -> Theme_textAppearanceSmallInverted
    int Theme_textAppearanceSmallNoSelection -> Theme_textAppearanceSmallNoSelection
    int[] TitlePageIndicator -> TitlePageIndicator
    int TitlePageIndicator_android_background -> TitlePageIndicator_android_background
    int TitlePageIndicator_android_textColor -> TitlePageIndicator_android_textColor
    int TitlePageIndicator_android_textSize -> TitlePageIndicator_android_textSize
    int TitlePageIndicator_clipPadding -> TitlePageIndicator_clipPadding
    int TitlePageIndicator_footerColor -> TitlePageIndicator_footerColor
    int TitlePageIndicator_footerIndicatorHeight -> TitlePageIndicator_footerIndicatorHeight
    int TitlePageIndicator_footerIndicatorStyle -> TitlePageIndicator_footerIndicatorStyle
    int TitlePageIndicator_footerIndicatorUnderlinePadding -> TitlePageIndicator_footerIndicatorUnderlinePadding
    int TitlePageIndicator_footerLineHeight -> TitlePageIndicator_footerLineHeight
    int TitlePageIndicator_footerPadding -> TitlePageIndicator_footerPadding
    int TitlePageIndicator_linePosition -> TitlePageIndicator_linePosition
    int TitlePageIndicator_selectedBold -> TitlePageIndicator_selectedBold
    int TitlePageIndicator_selectedColor -> TitlePageIndicator_selectedColor
    int TitlePageIndicator_titlePadding -> TitlePageIndicator_titlePadding
    int TitlePageIndicator_topPadding -> TitlePageIndicator_topPadding
    int[] TwitterContent -> TwitterContent
    int TwitterContent_textColor -> TwitterContent_textColor
    int TwitterContent_textGap -> TwitterContent_textGap
    int TwitterContent_textSize -> TwitterContent_textSize
    int[] UnderlinePageIndicator -> UnderlinePageIndicator
    int UnderlinePageIndicator_android_background -> UnderlinePageIndicator_android_background
    int UnderlinePageIndicator_fadeDelay -> UnderlinePageIndicator_fadeDelay
    int UnderlinePageIndicator_fadeLength -> UnderlinePageIndicator_fadeLength
    int UnderlinePageIndicator_fades -> UnderlinePageIndicator_fades
    int UnderlinePageIndicator_selectedColor -> UnderlinePageIndicator_selectedColor
    int[] ViewPagerIndicator -> ViewPagerIndicator
    int ViewPagerIndicator_vpiCirclePageIndicatorStyle -> ViewPagerIndicator_vpiCirclePageIndicatorStyle
    int ViewPagerIndicator_vpiIconPageIndicatorStyle -> ViewPagerIndicator_vpiIconPageIndicatorStyle
    int ViewPagerIndicator_vpiLinePageIndicatorStyle -> ViewPagerIndicator_vpiLinePageIndicatorStyle
    int ViewPagerIndicator_vpiTabPageIndicatorStyle -> ViewPagerIndicator_vpiTabPageIndicatorStyle
    int ViewPagerIndicator_vpiTitlePageIndicatorStyle -> ViewPagerIndicator_vpiTitlePageIndicatorStyle
    int ViewPagerIndicator_vpiUnderlinePageIndicatorStyle -> ViewPagerIndicator_vpiUnderlinePageIndicatorStyle
magic.yuyong.activity.AboutActivity -> magic.yuyong.activity.AboutActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
magic.yuyong.activity.BaseActivity -> magic.yuyong.activity.a:
    android.view.Menu mOptionsMenu -> a
    android.app.ActionBar actionBar -> b
    void onPause() -> onPause
    void onResume() -> onResume
    void onCreate(android.os.Bundle) -> onCreate
    void hideBottomBar() -> b
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
magic.yuyong.activity.GetFriendsActivity -> magic.yuyong.activity.GetFriendsActivity:
    android.widget.ListView friendsList -> d
    android.widget.ListView searchList -> e
    android.view.View friends_footer -> f
    android.view.View search_footer -> g
    java.util.List friends -> h
    java.util.List search_friends -> i
    magic.yuyong.adapter.GetFriendsAdapter friendsAdapter -> j
    magic.yuyong.adapter.AtFriendsAdapter searchAdapter -> k
    magic.yuyong.request.RequestState friendsState -> l
    magic.yuyong.request.RequestState searchState -> m
    android.os.Handler mHandler -> n
    android.widget.SearchView searchView -> c
    void onCreate(android.os.Bundle) -> onCreate
    void search(java.lang.String) -> a
    void getFriends(boolean) -> a
    java.lang.String createAtString() -> a
    void setFooterView() -> c
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onQueryTextSubmit(java.lang.String) -> onQueryTextSubmit
    boolean onQueryTextChange(java.lang.String) -> onQueryTextChange
    boolean onClose() -> onClose
    magic.yuyong.request.RequestState access$0(magic.yuyong.activity.GetFriendsActivity) -> a
    java.util.List access$1(magic.yuyong.activity.GetFriendsActivity) -> b
    android.view.View access$2(magic.yuyong.activity.GetFriendsActivity) -> c
    magic.yuyong.adapter.GetFriendsAdapter access$3(magic.yuyong.activity.GetFriendsActivity) -> d
    java.util.List access$4(magic.yuyong.activity.GetFriendsActivity) -> e
    magic.yuyong.request.RequestState access$5(magic.yuyong.activity.GetFriendsActivity) -> f
    android.view.View access$6(magic.yuyong.activity.GetFriendsActivity) -> g
    magic.yuyong.adapter.AtFriendsAdapter access$7(magic.yuyong.activity.GetFriendsActivity) -> h
    void access$8(magic.yuyong.activity.GetFriendsActivity,boolean) -> a
    java.lang.String access$9(magic.yuyong.activity.GetFriendsActivity) -> i
    android.os.Handler access$10(magic.yuyong.activity.GetFriendsActivity) -> j
magic.yuyong.activity.GetFriendsActivity$1 -> magic.yuyong.activity.b:
    magic.yuyong.activity.GetFriendsActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.activity.GetFriendsActivity$2 -> magic.yuyong.activity.c:
    magic.yuyong.activity.GetFriendsActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
magic.yuyong.activity.GetFriendsActivity$3 -> magic.yuyong.activity.d:
    magic.yuyong.activity.GetFriendsActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
magic.yuyong.activity.GetFriendsActivity$4 -> magic.yuyong.activity.e:
    magic.yuyong.activity.GetFriendsActivity this$0 -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.GetFriendsActivity$5 -> magic.yuyong.activity.f:
    magic.yuyong.activity.GetFriendsActivity this$0 -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.GetTwitterActivity -> magic.yuyong.activity.g:
    android.os.Handler handler -> c
    void onUpdate(magic.yuyong.request.RequestState) -> a
    void onError(magic.yuyong.request.RequestState) -> b
magic.yuyong.activity.GetTwitterActivity$1 -> magic.yuyong.activity.h:
    magic.yuyong.activity.GetTwitterActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.activity.GetTwitterActivity$TwitterRequestListener -> magic.yuyong.activity.i:
    magic.yuyong.request.RequestState requestState -> b
    magic.yuyong.activity.GetTwitterActivity this$0 -> a
    void onComplete(java.lang.String) -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
magic.yuyong.activity.MainActivity -> magic.yuyong.activity.MainActivity:
    android.widget.TextView login_but -> c
    boolean has_check_update -> d
    void onCreate(android.os.Bundle) -> onCreate
    void checkToken() -> c
    void startNotificationService() -> d
    void chooseMode() -> e
    void onClick(android.view.View) -> onClick
    void onCancel() -> a
    void onComplete(android.os.Bundle) -> a
    void onError(com.weibo.sdk.android.WeiboDialogError) -> a
    void onWeiboException(com.weibo.sdk.android.WeiboException) -> a
magic.yuyong.activity.MainActivity$1 -> magic.yuyong.activity.j:
    magic.yuyong.activity.MainActivity this$0 -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.NewPostActivity -> magic.yuyong.activity.NewPostActivity:
    android.widget.EditText post_text -> c
    magic.yuyong.view.FaceView faceView -> d
    android.view.View pic_content -> e
    android.widget.ImageView pic -> f
    android.widget.TextView text_num -> g
    android.widget.TextView check_text -> h
    android.view.View check_content -> i
    android.view.View camera -> j
    android.view.View img -> k
    android.view.View atButton -> l
    android.view.View face -> m
    android.view.View send -> n
    android.widget.CheckBox check_box -> o
    long twitter_id -> p
    long cid -> q
    java.lang.String cu -> r
    java.lang.String cc -> s
    android.net.Uri uri -> t
    java.lang.String picPath -> u
    boolean resizeFaceView -> v
    int type -> w
    android.os.Handler mHandler -> x
    void onCreate(android.os.Bundle) -> onCreate
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onStart() -> onStart
    void onClick(android.view.View) -> onClick
    java.lang.String getImageName() -> a
    void popDel() -> c
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void preparePic() -> d
    java.lang.String getAbsoluteImagePath(android.net.Uri) -> a
    void showPic(java.lang.String) -> b
    void post() -> e
    void onComplete(java.lang.String) -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    android.widget.TextView access$0(magic.yuyong.activity.NewPostActivity) -> a
    android.widget.EditText access$1(magic.yuyong.activity.NewPostActivity) -> b
    magic.yuyong.view.FaceView access$2(magic.yuyong.activity.NewPostActivity) -> c
    android.widget.ImageView access$3(magic.yuyong.activity.NewPostActivity) -> d
    android.view.View access$4(magic.yuyong.activity.NewPostActivity) -> e
    void access$5(magic.yuyong.activity.NewPostActivity,int) -> a
magic.yuyong.activity.NewPostActivity$1 -> magic.yuyong.activity.k:
    magic.yuyong.activity.NewPostActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.activity.NewPostActivity$2 -> magic.yuyong.activity.l:
    magic.yuyong.activity.NewPostActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
magic.yuyong.activity.NewPostActivity$3 -> magic.yuyong.activity.NewPostActivity$3:
    magic.yuyong.activity.NewPostActivity this$0 -> a
    void run() -> run
magic.yuyong.activity.NewPostActivity$4 -> magic.yuyong.activity.m:
    magic.yuyong.activity.NewPostActivity this$0 -> a
    magic.yuyong.app.MagicDialog val$dialog -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.NewPostActivity$5 -> magic.yuyong.activity.n:
    magic.yuyong.activity.NewPostActivity this$0 -> a
    magic.yuyong.app.MagicDialog val$dialog -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.NewPostActivity$6 -> magic.yuyong.activity.NewPostActivity$6:
    magic.yuyong.activity.NewPostActivity this$0 -> a
    java.lang.String val$path -> b
    void run() -> run
magic.yuyong.activity.NewPostActivity$7 -> magic.yuyong.activity.o:
    magic.yuyong.activity.NewPostActivity this$0 -> a
    void onComplete(java.lang.String) -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
magic.yuyong.activity.PreparePicActivity -> magic.yuyong.activity.PreparePicActivity:
    java.lang.String imgPath -> c
    android.graphics.Bitmap bitmap -> d
    android.widget.ImageView img -> e
    int screenWidth -> f
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void initPic() -> a
    void changePic() -> c
    void rotate(int) -> a
    android.graphics.Bitmap access$0(magic.yuyong.activity.PreparePicActivity) -> a
    void access$1(magic.yuyong.activity.PreparePicActivity,java.lang.String) -> a
    java.lang.String access$2(magic.yuyong.activity.PreparePicActivity) -> b
    int access$3(magic.yuyong.activity.PreparePicActivity) -> c
    void access$4(magic.yuyong.activity.PreparePicActivity,android.graphics.Bitmap) -> a
    void access$5(magic.yuyong.activity.PreparePicActivity) -> d
    android.widget.ImageView access$6(magic.yuyong.activity.PreparePicActivity) -> e
magic.yuyong.activity.PreparePicActivity$1 -> magic.yuyong.activity.PreparePicActivity$1:
    magic.yuyong.activity.PreparePicActivity this$0 -> a
    void run() -> run
magic.yuyong.activity.PreparePicActivity$2 -> magic.yuyong.activity.PreparePicActivity$2:
    magic.yuyong.activity.PreparePicActivity this$0 -> a
    void run() -> run
magic.yuyong.activity.PreparePicActivity$3 -> magic.yuyong.activity.PreparePicActivity$3:
    magic.yuyong.activity.PreparePicActivity this$0 -> a
    void run() -> run
magic.yuyong.activity.PreparePicActivity$4 -> magic.yuyong.activity.PreparePicActivity$4:
    magic.yuyong.activity.PreparePicActivity this$0 -> a
    int val$degrees -> b
    void run() -> run
magic.yuyong.activity.ProfileActivity -> magic.yuyong.activity.ProfileActivity:
    magic.yuyong.model.User user -> d
    android.view.View head -> e
    android.view.View footer -> f
    magic.yuyong.view.RefreshView rv -> g
    magic.yuyong.view.AsyncImageView avatar -> h
    android.widget.TextView user_name -> i
    android.widget.ImageView user_gender -> j
    android.widget.TextView location -> k
    android.widget.TextView description -> l
    android.widget.TextView following -> m
    android.widget.TextView weibo -> n
    android.widget.TextView follower -> o
    android.widget.TextView favourit -> p
    android.widget.LinearLayout following_lay -> q
    android.widget.LinearLayout weibo_lay -> r
    android.widget.LinearLayout follower_lay -> s
    android.widget.LinearLayout favourit_lay -> t
    android.widget.ListView listView -> u
    magic.yuyong.adapter.TwitterListAdapter adapter -> v
    java.util.List myTwitters -> w
    java.util.List myFavouriteTwitters -> x
    magic.yuyong.request.RequestState myTwittersRequest -> y
    magic.yuyong.request.RequestState myFavouriteRequest -> z
    magic.yuyong.request.RequestState current -> A
    long uid -> B
    boolean requestProfile -> C
    java.lang.String screen_name -> D
    android.os.Handler handler -> E
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void followTask() -> c
    void getProfile() -> d
    void getTwitter(boolean) -> a
    void changeType(magic.yuyong.request.RequestState) -> c
    void onUpdate(magic.yuyong.request.RequestState) -> a
    void onError(magic.yuyong.request.RequestState) -> b
    void onClick(android.view.View) -> onClick
    void onRefresh() -> a
    void access$0(magic.yuyong.activity.ProfileActivity,magic.yuyong.model.User) -> a
    magic.yuyong.model.User access$1(magic.yuyong.activity.ProfileActivity) -> a
    android.widget.LinearLayout access$2(magic.yuyong.activity.ProfileActivity) -> b
    android.widget.TextView access$3(magic.yuyong.activity.ProfileActivity) -> c
    android.widget.ImageView access$4(magic.yuyong.activity.ProfileActivity) -> d
    android.widget.TextView access$5(magic.yuyong.activity.ProfileActivity) -> e
    android.widget.TextView access$6(magic.yuyong.activity.ProfileActivity) -> f
    android.widget.TextView access$7(magic.yuyong.activity.ProfileActivity) -> g
    android.widget.TextView access$8(magic.yuyong.activity.ProfileActivity) -> h
    android.widget.TextView access$9(magic.yuyong.activity.ProfileActivity) -> i
    android.widget.TextView access$10(magic.yuyong.activity.ProfileActivity) -> j
    magic.yuyong.view.AsyncImageView access$11(magic.yuyong.activity.ProfileActivity) -> k
    void access$12(magic.yuyong.activity.ProfileActivity,boolean) -> a
    void access$13(magic.yuyong.activity.ProfileActivity) -> l
    android.os.Handler access$14(magic.yuyong.activity.ProfileActivity) -> m
    void access$15(magic.yuyong.activity.ProfileActivity,boolean) -> b
magic.yuyong.activity.ProfileActivity$1 -> magic.yuyong.activity.p:
    magic.yuyong.activity.ProfileActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.activity.ProfileActivity$2 -> magic.yuyong.activity.q:
    magic.yuyong.activity.ProfileActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
magic.yuyong.activity.ProfileActivity$3 -> magic.yuyong.activity.r:
    magic.yuyong.activity.ProfileActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
magic.yuyong.activity.ProfileActivity$4 -> magic.yuyong.activity.s:
    magic.yuyong.activity.ProfileActivity this$0 -> a
    magic.yuyong.app.MagicDialog val$follow_dialog -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.ProfileActivity$5 -> magic.yuyong.activity.t:
    magic.yuyong.activity.ProfileActivity this$0 -> a
    magic.yuyong.app.MagicDialog val$follow_dialog -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.ProfileActivity$6 -> magic.yuyong.activity.u:
    magic.yuyong.activity.ProfileActivity this$0 -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.ProfileActivity$7 -> magic.yuyong.activity.v:
    magic.yuyong.activity.ProfileActivity this$0 -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.ProfileActivity$8 -> magic.yuyong.activity.w:
    magic.yuyong.activity.ProfileActivity this$0 -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.SettingActivity -> magic.yuyong.activity.SettingActivity:
    android.widget.CheckBox timeline_mode -> c
    android.widget.CheckBox notification -> d
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.SettingActivity$1 -> magic.yuyong.activity.x:
    magic.yuyong.activity.SettingActivity this$0 -> a
    magic.yuyong.app.MagicDialog val$exit_dialog -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.SettingActivity$2 -> magic.yuyong.activity.y:
    magic.yuyong.activity.SettingActivity this$0 -> a
    magic.yuyong.app.MagicDialog val$exit_dialog -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.ShowFriendsActivity -> magic.yuyong.activity.ShowFriendsActivity:
    android.support.v4.view.ViewPager mPager -> c
    magic.yuyong.view.TitlePageIndicator mIndicator -> d
    java.util.List listViews -> e
    magic.yuyong.activity.ShowFriendsActivity$FriendRequestState current -> f
    long uid -> g
    android.os.Handler mHandler -> h
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> i
    void getFriends(boolean) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void clearFollowerState() -> c
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onUpdate(magic.yuyong.activity.ShowFriendsActivity$FriendRequestState) -> a
    void onError(magic.yuyong.activity.ShowFriendsActivity$FriendRequestState) -> b
    void setListScrollListener(android.widget.ListView,magic.yuyong.request.RequestState) -> a
    void prepareView(android.view.View,int) -> a
    void initViewPager() -> d
    void setFootView(android.widget.ListView) -> a
    void onClick(android.view.View) -> onClick
    void onRefresh() -> a
    void access$0(magic.yuyong.activity.ShowFriendsActivity,magic.yuyong.activity.ShowFriendsActivity$FriendRequestState) -> a
    void access$1(magic.yuyong.activity.ShowFriendsActivity,magic.yuyong.activity.ShowFriendsActivity$FriendRequestState) -> b
    java.util.List access$2(magic.yuyong.activity.ShowFriendsActivity) -> a
    void access$3(magic.yuyong.activity.ShowFriendsActivity,magic.yuyong.activity.ShowFriendsActivity$FriendRequestState) -> c
    magic.yuyong.view.TitlePageIndicator access$4(magic.yuyong.activity.ShowFriendsActivity) -> b
    magic.yuyong.activity.ShowFriendsActivity$FriendRequestState access$5(magic.yuyong.activity.ShowFriendsActivity) -> c
    void access$6(magic.yuyong.activity.ShowFriendsActivity,boolean) -> a
    android.os.Handler access$7(magic.yuyong.activity.ShowFriendsActivity) -> d
magic.yuyong.activity.ShowFriendsActivity$1 -> magic.yuyong.activity.z:
    magic.yuyong.activity.ShowFriendsActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.activity.ShowFriendsActivity$2 -> magic.yuyong.activity.aa:
    magic.yuyong.activity.ShowFriendsActivity this$0 -> a
    void onPageSelected(int) -> a
    void onPageScrolled(int,float,int) -> a
    void onPageScrollStateChanged(int) -> b
magic.yuyong.activity.ShowFriendsActivity$3 -> magic.yuyong.activity.ab:
    magic.yuyong.activity.ShowFriendsActivity this$0 -> a
    magic.yuyong.activity.ShowFriendsActivity$FriendRequestState val$requestState -> b
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.ShowFriendsActivity$4 -> magic.yuyong.activity.ac:
    magic.yuyong.activity.ShowFriendsActivity this$0 -> a
    magic.yuyong.activity.ShowFriendsActivity$FriendRequestState val$requestState -> b
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.ShowFriendsActivity$5 -> magic.yuyong.activity.ad:
    magic.yuyong.activity.ShowFriendsActivity this$0 -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.ShowFriendsActivity$6 -> magic.yuyong.activity.ae:
    magic.yuyong.activity.ShowFriendsActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
magic.yuyong.activity.ShowFriendsActivity$FriendRequestState -> magic.yuyong.activity.af:
    int next_cursor -> a
    int previous_cursor -> b
    magic.yuyong.activity.ShowFriendsActivity this$0 -> c
magic.yuyong.activity.ShowGif -> magic.yuyong.activity.ShowGif:
    magic.yuyong.gif.GifView gifView -> c
    android.widget.ProgressBar mProgressBar -> d
    java.lang.String url -> e
    int[] size -> f
    android.os.Handler mHandler -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void prepareGif() -> a
    byte[] downLoadPic() -> c
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    android.widget.ProgressBar access$0(magic.yuyong.activity.ShowGif) -> a
    int[] access$1(magic.yuyong.activity.ShowGif) -> b
    magic.yuyong.gif.GifView access$2(magic.yuyong.activity.ShowGif) -> c
    java.lang.String access$3(magic.yuyong.activity.ShowGif) -> d
    android.os.Handler access$4(magic.yuyong.activity.ShowGif) -> e
    byte[] access$5(magic.yuyong.activity.ShowGif) -> f
    void access$6(magic.yuyong.activity.ShowGif,int[]) -> a
magic.yuyong.activity.ShowGif$1 -> magic.yuyong.activity.ag:
    magic.yuyong.activity.ShowGif this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.activity.ShowGif$2 -> magic.yuyong.activity.ShowGif$2:
    magic.yuyong.activity.ShowGif this$0 -> a
    void run() -> run
magic.yuyong.activity.ShowPic -> magic.yuyong.activity.ShowPic:
    magic.yuyong.view.ScaleImageView imgview -> h
    android.widget.ProgressBar mProgressBar -> i
    android.graphics.Matrix matrix -> j
    android.graphics.Matrix savedMatrix -> k
    int mode -> c
    android.graphics.PointF start -> d
    android.graphics.PointF mid -> e
    float oldDist -> f
    android.view.VelocityTracker mVelocityTracker -> l
    java.lang.String url -> m
    java.lang.String originalUrl -> n
    java.lang.String current -> o
    android.os.Handler mHandler -> p
    magic.yuyong.activity.ShowPic$SlipThread slipThread -> q
    android.os.Handler slipHandler -> g
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    float spacing(android.view.MotionEvent) -> a
    void midPoint(android.graphics.PointF,android.view.MotionEvent) -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void slip(android.view.VelocityTracker) -> a
    void ajustMatix() -> a
    android.graphics.Matrix access$0(magic.yuyong.activity.ShowPic) -> a
    void access$1(magic.yuyong.activity.ShowPic) -> b
    magic.yuyong.view.ScaleImageView access$2(magic.yuyong.activity.ShowPic) -> c
    android.widget.ProgressBar access$3(magic.yuyong.activity.ShowPic) -> d
    java.lang.String access$4(magic.yuyong.activity.ShowPic) -> e
    android.os.Handler access$5(magic.yuyong.activity.ShowPic) -> f
magic.yuyong.activity.ShowPic$1 -> magic.yuyong.activity.ah:
    magic.yuyong.activity.ShowPic this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.activity.ShowPic$2 -> magic.yuyong.activity.ai:
    magic.yuyong.activity.ShowPic this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.activity.ShowPic$3 -> magic.yuyong.activity.aj:
    magic.yuyong.activity.ShowPic this$0 -> a
    void onLoadingStarted(magic.yuyong.view.AsyncImageView) -> a
    void onLoadingFailed(magic.yuyong.view.AsyncImageView,java.lang.Throwable) -> a
    void onLoadingEnded(magic.yuyong.view.AsyncImageView,android.graphics.Bitmap) -> a
    void onLoading(magic.yuyong.view.AsyncImageView,float) -> a
magic.yuyong.activity.ShowPic$4 -> magic.yuyong.activity.ShowPic$4:
    magic.yuyong.activity.ShowPic this$0 -> a
    android.graphics.Bitmap val$bm -> b
    void run() -> run
magic.yuyong.activity.ShowPic$SlipThread -> magic.yuyong.activity.ShowPic$SlipThread:
    int vx -> a
    int vy -> b
    int tx -> c
    int ty -> d
    int ax -> e
    int ay -> f
    boolean run -> g
    magic.yuyong.activity.ShowPic this$0 -> h
    void stopSlip() -> a
    void run() -> run
magic.yuyong.activity.TimeLineModeActivity -> magic.yuyong.activity.TimeLineModeActivity:
    android.support.v4.view.ViewPager mPager -> d
    java.util.List listViews -> e
    java.util.List groups -> f
    boolean gettingGroups -> g
    android.view.LayoutInflater mInflater -> h
    magic.yuyong.request.RequestState current -> i
    boolean isHomeRequestAll -> j
    long groupId -> k
    com.weibo.sdk.android.api.WeiboAPI$FEATURE bilateralFeature -> l
    com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER atMeFilter -> m
    com.weibo.sdk.android.api.WeiboAPI$AUTHOR_FILTER commentFilter -> n
    android.os.Handler mHandler -> o
    android.app.ActionBar$TabListener listener -> p
    void getGroup() -> c
    void getTwitter(boolean) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void checkUpdate() -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void clearState(int) -> a
    void onDestroy() -> onDestroy
    void onUpdate(magic.yuyong.request.RequestState) -> a
    void onError(magic.yuyong.request.RequestState) -> b
    void setListScrollListener(android.widget.ListView,magic.yuyong.request.RequestState) -> a
    android.content.Intent createShareIntent(java.lang.String) -> a
    void prepareView(android.view.View,int) -> a
    void changeFavorite(boolean,magic.yuyong.model.Twitter) -> a
    void prepareCommentView(android.view.View) -> a
    void initViewPager() -> e
    void setFootView(android.widget.ListView) -> a
    void onRefresh() -> a
    magic.yuyong.request.RequestState access$0(magic.yuyong.activity.TimeLineModeActivity) -> a
    android.support.v4.view.ViewPager access$1(magic.yuyong.activity.TimeLineModeActivity) -> b
    java.util.List access$2(magic.yuyong.activity.TimeLineModeActivity) -> c
    void access$3(magic.yuyong.activity.TimeLineModeActivity,magic.yuyong.request.RequestState) -> a
    void access$4(magic.yuyong.activity.TimeLineModeActivity,boolean) -> a
    void access$5(magic.yuyong.activity.TimeLineModeActivity,boolean) -> b
    java.util.List access$6(magic.yuyong.activity.TimeLineModeActivity) -> d
    android.os.Handler access$7(magic.yuyong.activity.TimeLineModeActivity) -> e
    android.content.Intent access$8(magic.yuyong.activity.TimeLineModeActivity,java.lang.String) -> a
    void access$9(magic.yuyong.activity.TimeLineModeActivity,boolean,magic.yuyong.model.Twitter) -> a
magic.yuyong.activity.TimeLineModeActivity$1 -> magic.yuyong.activity.ak:
    magic.yuyong.activity.TimeLineModeActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.activity.TimeLineModeActivity$2 -> magic.yuyong.activity.al:
    magic.yuyong.activity.TimeLineModeActivity this$0 -> a
    void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabUnselected
    void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabSelected
    void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabReselected
magic.yuyong.activity.TimeLineModeActivity$3 -> magic.yuyong.activity.am:
    magic.yuyong.activity.TimeLineModeActivity this$0 -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.TimeLineModeActivity$4 -> magic.yuyong.activity.an:
    magic.yuyong.activity.TimeLineModeActivity this$0 -> a
    int val$type -> b
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.TimeLineModeActivity$5 -> magic.yuyong.activity.ao:
    magic.yuyong.activity.TimeLineModeActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
magic.yuyong.activity.TimeLineModeActivity$6 -> magic.yuyong.activity.ap:
    magic.yuyong.activity.TimeLineModeActivity this$0 -> a
    android.widget.ListView val$list_view -> b
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    magic.yuyong.activity.TimeLineModeActivity access$0(magic.yuyong.activity.TimeLineModeActivity$6) -> a
magic.yuyong.activity.TimeLineModeActivity$6$1 -> magic.yuyong.activity.aq:
    magic.yuyong.activity.TimeLineModeActivity$6 this$1 -> a
    magic.yuyong.model.Twitter val$twitter -> b
    magic.yuyong.adapter.TwitterListAdapter val$adapter -> c
    android.widget.ListView val$list_view -> d
    int val$position -> e
    boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu) -> onPrepareActionMode
    void onDestroyActionMode(android.view.ActionMode) -> onDestroyActionMode
    boolean onCreateActionMode(android.view.ActionMode,android.view.Menu) -> onCreateActionMode
    boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem) -> onActionItemClicked
magic.yuyong.activity.TimeLineModeActivity$7 -> magic.yuyong.activity.ar:
    magic.yuyong.activity.TimeLineModeActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
magic.yuyong.activity.TimeLineModeActivity$8 -> magic.yuyong.activity.as:
    magic.yuyong.activity.TimeLineModeActivity this$0 -> a
    boolean val$favorite -> b
    magic.yuyong.model.Twitter val$twitter -> c
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.TimeLineModeActivity$9 -> magic.yuyong.activity.at:
    magic.yuyong.activity.TimeLineModeActivity this$0 -> a
    android.widget.ListView val$list_view -> b
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    magic.yuyong.activity.TimeLineModeActivity access$0(magic.yuyong.activity.TimeLineModeActivity$9) -> a
magic.yuyong.activity.TimeLineModeActivity$9$1 -> magic.yuyong.activity.au:
    magic.yuyong.activity.TimeLineModeActivity$9 this$1 -> a
    magic.yuyong.adapter.CommentMeAdapter val$adapter -> b
    magic.yuyong.model.Comment val$comment -> c
    boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu) -> onPrepareActionMode
    void onDestroyActionMode(android.view.ActionMode) -> onDestroyActionMode
    boolean onCreateActionMode(android.view.ActionMode,android.view.Menu) -> onCreateActionMode
    boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem) -> onActionItemClicked
magic.yuyong.activity.TimeLineModeActivity$MyOnPageChangeListener -> magic.yuyong.activity.av:
    magic.yuyong.activity.TimeLineModeActivity this$0 -> a
    void onPageScrollStateChanged(int) -> b
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
magic.yuyong.activity.TwitterBoardActivity -> magic.yuyong.activity.TwitterBoardActivity:
    magic.yuyong.view.TwitterBoard board -> d
    magic.yuyong.view.TwitterBoardScrollView scrollView -> e
    magic.yuyong.view.LeftSlideView slideView -> f
    android.view.View rightBar -> g
    android.widget.LinearLayout groupLay -> h
    android.widget.TextView all -> i
    android.view.View timeline -> j
    android.view.View refresh -> k
    android.view.View setting -> l
    android.widget.ProgressBar pb -> m
    android.widget.TextView start -> n
    android.view.View more -> o
    magic.yuyong.view.DivideView divide_view -> p
    android.view.View content -> q
    android.view.View innerButtonLay -> r
    java.util.List groups -> s
    java.lang.Long list_id -> t
    boolean gettingGroup -> u
    magic.yuyong.request.RequestState current -> v
    magic.yuyong.request.RequestState homeState -> w
    magic.yuyong.request.RequestState atMeState -> x
    magic.yuyong.request.RequestState groupState -> y
    android.content.BroadcastReceiver unReadReceiver -> z
    android.os.Handler mHandler -> A
    void checkUpdate() -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void checkUnRead() -> e
    void initInnerButtons() -> f
    void toTheEnd() -> a
    void toTheBeginning() -> c
    void onUpdate(magic.yuyong.request.RequestState) -> a
    void onError(magic.yuyong.request.RequestState) -> b
    void getTwitter(boolean) -> a
    void getGroup() -> g
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void stopScroll() -> h
    void doAnimation(boolean) -> b
    void onClick(android.view.View) -> onClick
    void access$0(magic.yuyong.activity.TwitterBoardActivity) -> a
    java.util.List access$1(magic.yuyong.activity.TwitterBoardActivity) -> b
    android.widget.LinearLayout access$2(magic.yuyong.activity.TwitterBoardActivity) -> c
    java.lang.Long access$3(magic.yuyong.activity.TwitterBoardActivity) -> d
    void access$4(magic.yuyong.activity.TwitterBoardActivity,java.lang.Long) -> a
    magic.yuyong.request.RequestState access$5(magic.yuyong.activity.TwitterBoardActivity) -> e
    void access$6(magic.yuyong.activity.TwitterBoardActivity,magic.yuyong.request.RequestState) -> a
    void access$7(magic.yuyong.activity.TwitterBoardActivity,boolean) -> a
    magic.yuyong.view.LeftSlideView access$8(magic.yuyong.activity.TwitterBoardActivity) -> f
    void access$9(magic.yuyong.activity.TwitterBoardActivity,boolean) -> b
    void access$10(magic.yuyong.activity.TwitterBoardActivity,boolean) -> c
    android.os.Handler access$11(magic.yuyong.activity.TwitterBoardActivity) -> g
magic.yuyong.activity.TwitterBoardActivity$1 -> magic.yuyong.activity.aw:
    magic.yuyong.activity.TwitterBoardActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
magic.yuyong.activity.TwitterBoardActivity$2 -> magic.yuyong.activity.ax:
    magic.yuyong.activity.TwitterBoardActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    magic.yuyong.activity.TwitterBoardActivity access$0(magic.yuyong.activity.TwitterBoardActivity$2) -> a
magic.yuyong.activity.TwitterBoardActivity$2$1 -> magic.yuyong.activity.ay:
    magic.yuyong.activity.TwitterBoardActivity$2 this$1 -> a
    magic.yuyong.model.Group val$group -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.TwitterBoardActivity$3 -> magic.yuyong.activity.az:
    magic.yuyong.activity.TwitterBoardActivity this$0 -> a
    void onStateChange(boolean) -> a
magic.yuyong.activity.TwitterBoardActivity$4 -> magic.yuyong.activity.ba:
    magic.yuyong.activity.TwitterBoardActivity this$0 -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.TwitterBoardActivity$5 -> magic.yuyong.activity.bb:
    magic.yuyong.activity.TwitterBoardActivity this$0 -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.TwitterShowActivity -> magic.yuyong.activity.TwitterShowActivity:
    android.view.View header -> c
    android.view.View footer -> d
    android.widget.ListView listView -> e
    android.widget.TextView comment_but -> f
    android.widget.TextView repost_but -> g
    magic.yuyong.view.AsyncImageView twitter_user_avatar -> h
    android.widget.TextView twitter_user_name -> i
    android.widget.TextView twitter_time -> j
    android.widget.TextView twitter_from -> k
    magic.yuyong.view.TwitterContent twitter_text -> l
    magic.yuyong.view.AsyncImageView twitter_img -> m
    android.widget.LinearLayout origin_layout -> n
    magic.yuyong.view.AsyncImageView origin_user_avatar -> o
    android.widget.TextView origin_user_name -> p
    android.widget.TextView origin_time -> q
    android.widget.TextView origin_from -> r
    magic.yuyong.view.TwitterContent origin_text -> s
    magic.yuyong.view.AsyncImageView origin_img -> t
    magic.yuyong.adapter.CommentOrRepostAdapter adapter -> u
    java.util.List comments -> v
    java.util.List reposts -> w
    magic.yuyong.request.RequestState commentState -> x
    magic.yuyong.request.RequestState repostState -> y
    int currentType -> z
    magic.yuyong.model.Twitter twitter -> A
    android.os.Handler mHandler -> B
    void changeType(int) -> a
    void initView() -> a
    void setListScrollListener(android.widget.ListView) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void getTwitter(long) -> a
    void initInfo() -> c
    void setAvatarOnClickListener(android.view.View,long) -> a
    void setImgOnClickListener(android.widget.ImageView,magic.yuyong.model.Twitter) -> a
    void getData(boolean,magic.yuyong.request.RequestState) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    android.content.Intent createShareIntent(java.lang.String) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void delTwitter(long) -> b
    void favoriteTwitter(boolean) -> a
    void onClick(android.view.View) -> onClick
    magic.yuyong.request.RequestState access$0(magic.yuyong.activity.TwitterShowActivity) -> a
    java.util.List access$1(magic.yuyong.activity.TwitterShowActivity) -> b
    int access$2(magic.yuyong.activity.TwitterShowActivity) -> c
    magic.yuyong.adapter.CommentOrRepostAdapter access$3(magic.yuyong.activity.TwitterShowActivity) -> d
    android.view.View access$4(magic.yuyong.activity.TwitterShowActivity) -> e
    magic.yuyong.request.RequestState access$5(magic.yuyong.activity.TwitterShowActivity) -> f
    java.util.List access$6(magic.yuyong.activity.TwitterShowActivity) -> g
    magic.yuyong.model.Twitter access$7(magic.yuyong.activity.TwitterShowActivity) -> h
    void access$8(magic.yuyong.activity.TwitterShowActivity,magic.yuyong.model.Twitter) -> a
    void access$9(magic.yuyong.activity.TwitterShowActivity) -> i
    void access$10(magic.yuyong.activity.TwitterShowActivity,boolean,magic.yuyong.request.RequestState) -> a
    android.os.Handler access$11(magic.yuyong.activity.TwitterShowActivity) -> j
    void access$12(magic.yuyong.activity.TwitterShowActivity,long) -> a
magic.yuyong.activity.TwitterShowActivity$1 -> magic.yuyong.activity.bc:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.activity.TwitterShowActivity$10 -> magic.yuyong.activity.bd:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    magic.yuyong.request.RequestState val$requestState -> b
    void onComplete(java.lang.String) -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
magic.yuyong.activity.TwitterShowActivity$11 -> magic.yuyong.activity.be:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.TwitterShowActivity$12 -> magic.yuyong.activity.bf:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    magic.yuyong.app.MagicDialog val$del_dialog -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.TwitterShowActivity$13 -> magic.yuyong.activity.bg:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.TwitterShowActivity$14 -> magic.yuyong.activity.bh:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    boolean val$favorite -> b
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.TwitterShowActivity$2 -> magic.yuyong.activity.bi:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
magic.yuyong.activity.TwitterShowActivity$3 -> magic.yuyong.activity.bj:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
magic.yuyong.activity.TwitterShowActivity$4 -> magic.yuyong.activity.bk:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
magic.yuyong.activity.TwitterShowActivity$5 -> magic.yuyong.activity.bl:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.activity.TwitterShowActivity$6 -> magic.yuyong.activity.bm:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.TwitterShowActivity$7 -> magic.yuyong.activity.bn:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    long val$uid -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.TwitterShowActivity$8 -> magic.yuyong.activity.bo:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    magic.yuyong.model.Twitter val$t -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.activity.TwitterShowActivity$9 -> magic.yuyong.activity.bp:
    magic.yuyong.activity.TwitterShowActivity this$0 -> a
    magic.yuyong.request.RequestState val$requestState -> b
    void onError(com.weibo.sdk.android.WeiboException) -> a
    void onComplete(java.lang.String) -> a
magic.yuyong.adapter.AtFriendsAdapter -> magic.yuyong.a.a:
    java.util.List friends -> a
    android.content.Context mContext -> b
    android.view.LayoutInflater inflater -> c
    void addData(java.util.List) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
magic.yuyong.adapter.AtFriendsAdapter$ViewHolder -> magic.yuyong.a.b:
    android.widget.TextView user_name -> a
    android.widget.TextView remark -> b
    magic.yuyong.adapter.AtFriendsAdapter this$0 -> c
magic.yuyong.adapter.CommentMeAdapter -> magic.yuyong.a.c:
    java.util.List comments -> a
    android.content.Context mContext -> b
    android.view.LayoutInflater inflater -> c
    int selectedPostion -> d
    java.util.List getComments() -> a
    void setItemOnSelected(int) -> a
    void addData(java.util.List) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.content.Context access$0(magic.yuyong.adapter.CommentMeAdapter) -> a
magic.yuyong.adapter.CommentMeAdapter$1 -> magic.yuyong.a.d:
    magic.yuyong.adapter.CommentMeAdapter this$0 -> a
    magic.yuyong.model.Comment val$comment -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.adapter.CommentMeAdapter$ViewHolder -> magic.yuyong.a.e:
    magic.yuyong.view.AsyncImageView user_avatar -> a
    android.widget.TextView user_name -> b
    android.widget.TextView time -> c
    magic.yuyong.view.TwitterContent text -> d
    magic.yuyong.view.TwitterContent tag_text -> e
    magic.yuyong.adapter.CommentMeAdapter this$0 -> f
magic.yuyong.adapter.CommentOrRepostAdapter -> magic.yuyong.a.f:
    java.util.List items -> a
    android.content.Context mContext -> b
    android.view.LayoutInflater inflater -> c
    int type -> d
    int getType() -> a
    void setType(int) -> a
    void setData(java.util.List) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.content.Context access$0(magic.yuyong.adapter.CommentOrRepostAdapter) -> a
magic.yuyong.adapter.CommentOrRepostAdapter$1 -> magic.yuyong.a.g:
    magic.yuyong.adapter.CommentOrRepostAdapter this$0 -> a
    magic.yuyong.model.Comment val$comment -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.adapter.CommentOrRepostAdapter$2 -> magic.yuyong.a.h:
    magic.yuyong.adapter.CommentOrRepostAdapter this$0 -> a
    magic.yuyong.model.Repost val$repost -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.adapter.CommentOrRepostAdapter$ViewHolder -> magic.yuyong.a.i:
    magic.yuyong.view.AsyncImageView user_avatar -> a
    android.widget.TextView user_name -> b
    android.widget.TextView time -> c
    magic.yuyong.view.TwitterContent text -> d
    magic.yuyong.adapter.CommentOrRepostAdapter this$0 -> e
magic.yuyong.adapter.GetFriendsAdapter -> magic.yuyong.a.j:
    java.util.List friends -> a
    android.content.Context mContext -> b
    android.view.LayoutInflater inflater -> c
    void addData(java.util.List) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
magic.yuyong.adapter.GetFriendsAdapter$1 -> magic.yuyong.a.k:
    magic.yuyong.adapter.GetFriendsAdapter this$0 -> a
    magic.yuyong.model.User val$friend -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.adapter.GetFriendsAdapter$ViewHolder -> magic.yuyong.a.l:
    magic.yuyong.view.AsyncImageView user_avatar -> a
    android.widget.TextView user_name -> b
    android.widget.CheckBox checkBox -> c
    magic.yuyong.adapter.GetFriendsAdapter this$0 -> d
magic.yuyong.adapter.MyPagerAdapter -> magic.yuyong.a.m:
    java.util.List mListViews -> a
    java.lang.String[] titles -> b
    void setTitles(java.lang.String[]) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void finishUpdate(android.view.View) -> b
    int getCount() -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    android.os.Parcelable saveState() -> b
    void startUpdate(android.view.View) -> a
    java.lang.CharSequence getPageTitle(int) -> a
magic.yuyong.adapter.ShowFriendsAdapter -> magic.yuyong.a.n:
    java.util.List friends -> a
    android.content.Context mContext -> b
    android.view.LayoutInflater inflater -> c
    void addData(java.util.List) -> a
    java.util.List getData() -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.content.Context access$0(magic.yuyong.adapter.ShowFriendsAdapter) -> a
magic.yuyong.adapter.ShowFriendsAdapter$1 -> magic.yuyong.a.o:
    magic.yuyong.adapter.ShowFriendsAdapter this$0 -> a
    magic.yuyong.model.User val$friend -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.adapter.ShowFriendsAdapter$ViewHolder -> magic.yuyong.a.p:
    magic.yuyong.view.AsyncImageView user_avatar -> a
    android.widget.TextView user_name -> b
    magic.yuyong.adapter.ShowFriendsAdapter this$0 -> c
magic.yuyong.adapter.TwitterListAdapter -> magic.yuyong.a.q:
    java.util.List twitters -> a
    android.content.Context mContext -> b
    android.view.LayoutInflater inflater -> c
    int selectedPostion -> d
    void setItemOnSelected(int) -> a
    void setData(java.util.List) -> a
    java.util.List getData() -> a
    boolean isEmpty() -> isEmpty
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void showPic(java.lang.String,java.lang.String) -> a
    android.content.Context access$0(magic.yuyong.adapter.TwitterListAdapter) -> a
    void access$1(magic.yuyong.adapter.TwitterListAdapter,java.lang.String,java.lang.String) -> a
magic.yuyong.adapter.TwitterListAdapter$1 -> magic.yuyong.a.r:
    magic.yuyong.adapter.TwitterListAdapter this$0 -> a
    magic.yuyong.model.Twitter val$twitter -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.adapter.TwitterListAdapter$2 -> magic.yuyong.a.s:
    magic.yuyong.adapter.TwitterListAdapter this$0 -> a
    magic.yuyong.model.Twitter val$twitter -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.adapter.TwitterListAdapter$3 -> magic.yuyong.a.t:
    magic.yuyong.adapter.TwitterListAdapter this$0 -> a
    magic.yuyong.model.Twitter val$twitter -> b
    void onClick(android.view.View) -> onClick
magic.yuyong.adapter.TwitterListAdapter$ViewHolder -> magic.yuyong.a.u:
    android.view.View container -> a
    magic.yuyong.view.AsyncImageView user_avatar -> b
    android.widget.TextView user_name -> c
    android.widget.TextView time -> d
    magic.yuyong.view.TwitterContent content -> e
    magic.yuyong.view.AsyncImageView pic -> f
    android.view.View divider -> g
    android.widget.TextView origin_user_name -> h
    magic.yuyong.view.TwitterContent origin_content -> i
    magic.yuyong.view.AsyncImageView origin_pic -> j
    android.widget.TextView from -> k
    android.widget.TextView repost_num -> l
    android.widget.TextView comment_num -> m
    magic.yuyong.model.Twitter twitter -> n
magic.yuyong.animaiton.Rotate3dAnimation -> magic.yuyong.b.a:
    float mFromDegrees -> a
    float mToDegrees -> b
    float mFromX -> c
    float mToX -> d
    float mFromY -> e
    float mToY -> f
    float mFromAlpha -> g
    float mToAlpha -> h
    float mCenterX -> i
    float mCenterY -> j
    android.graphics.Camera mCamera -> k
    void initialize(int,int,int,int) -> initialize
    void applyTransformation(float,android.view.animation.Transformation) -> applyTransformation
magic.yuyong.app.GDApplication -> magic.yuyong.app.a:
    java.util.concurrent.ThreadFactory sThreadFactory -> a
    java.util.concurrent.ExecutorService mExecutorService -> b
    magic.yuyong.image.ImageCache mImageCache -> c
    java.util.ArrayList mLowMemoryListeners -> d
    java.util.concurrent.ExecutorService getExecutor() -> a
    magic.yuyong.image.ImageCache getImageCache() -> b
    void registerOnLowMemoryListener(magic.yuyong.app.GDApplication$OnLowMemoryListener) -> a
    void onLowMemory() -> onLowMemory
magic.yuyong.app.GDApplication$1 -> magic.yuyong.app.b:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
magic.yuyong.app.GDApplication$OnLowMemoryListener -> magic.yuyong.app.c:
    void onLowMemoryReceived() -> a
magic.yuyong.app.MagicApplication -> magic.yuyong.app.MagicApplication:
    magic.yuyong.app.MagicApplication instance -> a
    com.weibo.sdk.android.Oauth2AccessToken accessToken -> b
    com.weibo.sdk.android.Weibo weibo -> c
    void onCreate() -> onCreate
    magic.yuyong.app.MagicApplication getInstance() -> c
    com.weibo.sdk.android.Oauth2AccessToken getAccessToken() -> d
    void setAccessToken(com.weibo.sdk.android.Oauth2AccessToken) -> a
    com.weibo.sdk.android.Weibo getWeibo() -> e
magic.yuyong.app.MagicDialog -> magic.yuyong.app.d:
    java.util.List buttonInfos -> a
    java.lang.String title -> b
    java.lang.String msg -> c
    void addButton(int,android.view.View$OnClickListener) -> a
    void setMessage(java.lang.String,java.lang.String) -> a
    void onCreate(android.os.Bundle) -> onCreate
magic.yuyong.app.MagicDialog$ButtonInfo -> magic.yuyong.app.e:
    int text -> a
    android.view.View$OnClickListener onClickListener -> b
    magic.yuyong.app.MagicDialog this$0 -> c
magic.yuyong.drawable.Diagonal -> magic.yuyong.c.a:
    android.graphics.Paint paint -> a
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
magic.yuyong.extend.FriendshipsAPI_E -> magic.yuyong.d.a:
    void group(com.weibo.sdk.android.net.RequestListener) -> a
    void groupTimeline(long,long,long,int,int,boolean,com.weibo.sdk.android.api.WeiboAPI$FEATURE,com.weibo.sdk.android.net.RequestListener) -> a
magic.yuyong.extend.UnReadAPI -> magic.yuyong.d.b:
    void unRead(com.weibo.sdk.android.net.RequestListener) -> a
    void clear(com.weibo.sdk.android.net.RequestListener,int) -> a
magic.yuyong.gif.GifAction -> magic.yuyong.gif.a:
    void parseOk(boolean,int) -> a
magic.yuyong.gif.GifDecoder -> magic.yuyong.gif.GifDecoder:
    java.io.InputStream in -> c
    int status -> d
    int width -> a
    int height -> b
    boolean gctFlag -> e
    int gctSize -> f
    int loopCount -> g
    int[] gct -> h
    int[] lct -> i
    int[] act -> j
    int bgIndex -> k
    int bgColor -> l
    int lastBgColor -> m
    int pixelAspect -> n
    boolean lctFlag -> o
    boolean interlace -> p
    int lctSize -> q
    int ix -> r
    int iy -> s
    int iw -> t
    int ih -> u
    int lrx -> v
    int lry -> w
    int lrw -> x
    int lrh -> y
    android.graphics.Bitmap image -> z
    android.graphics.Bitmap lastImage -> A
    magic.yuyong.gif.GifFrame currentFrame -> B
    boolean isShow -> C
    byte[] block -> D
    int blockSize -> E
    int dispose -> F
    int lastDispose -> G
    boolean transparency -> H
    int delay -> I
    int transIndex -> J
    short[] prefix -> K
    byte[] suffix -> L
    byte[] pixelStack -> M
    byte[] pixels -> N
    magic.yuyong.gif.GifFrame gifFrame -> O
    int frameCount -> P
    magic.yuyong.gif.GifAction action -> Q
    byte[] gifData -> R
    java.lang.String imagePath -> S
    boolean cacheImage -> T
    void setGifImage(byte[]) -> a
    void setGifImage(java.io.InputStream) -> a
    void delDir(java.lang.String,boolean) -> a
    boolean delAllFile(java.lang.String) -> a
    java.lang.String getDir() -> e
    void saveImage(android.graphics.Bitmap,java.lang.String) -> a
    void run() -> run
    void free() -> a
    int getFrameCount() -> b
    android.graphics.Bitmap getImage() -> c
    void setPixels() -> f
    android.graphics.Bitmap getFrameImage(int) -> a
    magic.yuyong.gif.GifFrame getFrame(int) -> b
    magic.yuyong.gif.GifFrame next() -> d
    int readByte() -> g
    int readStream() -> h
    void decodeImageData() -> i
    boolean err() -> j
    void init() -> k
    int read() -> l
    int readBlock() -> m
    int[] readColorTable(int) -> c
    void readContents() -> n
    void readGraphicControlExt() -> o
    void readHeader() -> p
    void readImage() -> q
    void readLSD() -> r
    void readNetscapeExt() -> s
    int readShort() -> t
    void resetFrame() -> u
    void skip() -> v
magic.yuyong.gif.GifFrame -> magic.yuyong.gif.b:
    android.graphics.Bitmap image -> a
    int delay -> b
    java.lang.String imageName -> c
    magic.yuyong.gif.GifFrame nextFrame -> d
magic.yuyong.gif.GifView -> magic.yuyong.gif.GifView:
    magic.yuyong.gif.GifDecoder gifDecoder -> a
    android.graphics.Bitmap currentImage -> b
    boolean isRun -> c
    boolean pause -> d
    magic.yuyong.gif.GifView$DrawThread drawThread -> e
    android.content.Context context -> f
    boolean cacheImage -> g
    android.view.View backView -> h
    magic.yuyong.gif.GifView$GifImageType animationType -> i
    android.os.Handler redrawHandler -> j
    int[] $SWITCH_TABLE$magic$yuyong$gif$GifView$GifImageType -> k
    void setGifDecoderImage(byte[]) -> setGifDecoderImage
    void setGifDecoderImage(java.io.InputStream) -> setGifDecoderImage
    void setAsBackground(android.view.View) -> setAsBackground
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void setGifImage(byte[]) -> setGifImage
    void setGifImage(java.io.InputStream) -> setGifImage
    void setGifImage(int) -> setGifImage
    void destroy() -> a
    void setGifImageType(magic.yuyong.gif.GifView$GifImageType) -> setGifImageType
    void parseOk(boolean,int) -> a
    void reDraw() -> c
    void drawImage() -> d
    android.view.View access$0(magic.yuyong.gif.GifView) -> a
    android.graphics.Bitmap access$1(magic.yuyong.gif.GifView) -> b
    void access$2(magic.yuyong.gif.GifView) -> c
    magic.yuyong.gif.GifDecoder access$3(magic.yuyong.gif.GifView) -> d
    boolean access$4(magic.yuyong.gif.GifView) -> e
    void access$5(magic.yuyong.gif.GifView,android.graphics.Bitmap) -> a
    void access$6(magic.yuyong.gif.GifView) -> f
    boolean access$7(magic.yuyong.gif.GifView) -> g
    android.os.Handler access$8(magic.yuyong.gif.GifView) -> h
    int[] $SWITCH_TABLE$magic$yuyong$gif$GifView$GifImageType() -> b
magic.yuyong.gif.GifView$1 -> magic.yuyong.gif.c:
    magic.yuyong.gif.GifView this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.gif.GifView$DrawThread -> magic.yuyong.gif.GifView$DrawThread:
    magic.yuyong.gif.GifView this$0 -> a
    void run() -> run
magic.yuyong.gif.GifView$GifImageType -> magic.yuyong.gif.d:
    magic.yuyong.gif.GifView$GifImageType WAIT_FINISH -> a
    magic.yuyong.gif.GifView$GifImageType SYNC_DECODER -> b
    magic.yuyong.gif.GifView$GifImageType COVER -> c
    int nativeInt -> d
    magic.yuyong.gif.GifView$GifImageType[] ENUM$VALUES -> e
    magic.yuyong.gif.GifView$GifImageType[] values() -> values
    magic.yuyong.gif.GifView$GifImageType valueOf(java.lang.String) -> valueOf
magic.yuyong.image.ImageCache -> magic.yuyong.image.a:
    java.util.HashMap mSoftCache -> a
    android.graphics.Bitmap get(java.lang.String) -> a
    void put(java.lang.String,android.graphics.Bitmap) -> a
    void flush() -> b
    void onLowMemoryReceived() -> a
magic.yuyong.image.ImageLoader -> magic.yuyong.image.ImageLoader:
    java.lang.String LOG_TAG -> a
    magic.yuyong.image.ImageCache sImageCache -> b
    java.util.concurrent.ExecutorService sExecutor -> c
    android.graphics.BitmapFactory$Options sDefaultOptions -> d
    android.content.res.AssetManager sAssetManager -> e
    java.util.concurrent.Future loadImage(java.lang.String,magic.yuyong.image.ImageLoader$ImageLoaderCallback,magic.yuyong.image.ImageProcessor,android.graphics.BitmapFactory$Options) -> a
    byte[] downLoadPic(java.lang.String,android.os.Handler) -> a
    android.content.res.AssetManager access$0() -> a
    android.graphics.BitmapFactory$Options access$1() -> b
    byte[] access$2(magic.yuyong.image.ImageLoader,java.lang.String,android.os.Handler) -> a
    magic.yuyong.image.ImageCache access$3() -> c
magic.yuyong.image.ImageLoader$ImageFetcher -> magic.yuyong.image.ImageLoader$ImageFetcher:
    java.lang.String mUrl -> b
    magic.yuyong.image.ImageLoader$ImageHandler mHandler -> c
    magic.yuyong.image.ImageProcessor mBitmapProcessor -> d
    android.graphics.BitmapFactory$Options mOptions -> e
    magic.yuyong.image.ImageLoader this$0 -> a
    void run() -> run
magic.yuyong.image.ImageLoader$ImageHandler -> magic.yuyong.image.b:
    java.lang.String mUrl -> b
    magic.yuyong.image.ImageLoader$ImageLoaderCallback mCallback -> c
    magic.yuyong.image.ImageLoader this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.image.ImageLoader$ImageLoaderCallback -> magic.yuyong.image.c:
    void onImageLoadingStarted(magic.yuyong.image.ImageLoader) -> a
    void onImageLoadingEnded(magic.yuyong.image.ImageLoader,android.graphics.Bitmap) -> a
    void onImageLoadingFailed(magic.yuyong.image.ImageLoader,java.lang.Throwable) -> a
    void onImageLoading(magic.yuyong.image.ImageLoader,float) -> a
magic.yuyong.image.ImageProcessor -> magic.yuyong.image.d:
    android.graphics.Bitmap processImage(android.graphics.Bitmap) -> a
magic.yuyong.image.ImageRequest -> magic.yuyong.image.e:
    magic.yuyong.image.ImageLoader sImageLoader -> a
    java.util.concurrent.Future mFuture -> b
    java.lang.String mUrl -> c
    magic.yuyong.image.ImageRequest$ImageRequestCallback mCallback -> d
    magic.yuyong.image.ImageProcessor mBitmapProcessor -> e
    android.graphics.BitmapFactory$Options mOptions -> f
    void load(android.content.Context) -> a
    void cancel() -> a
    boolean isCancelled() -> b
    magic.yuyong.image.ImageRequest$ImageRequestCallback access$0(magic.yuyong.image.ImageRequest) -> a
    void access$1(magic.yuyong.image.ImageRequest,java.util.concurrent.Future) -> a
magic.yuyong.image.ImageRequest$ImageRequestCallback -> magic.yuyong.image.f:
    void onImageRequestStarted(magic.yuyong.image.ImageRequest) -> a
    void onImageRequestFailed(magic.yuyong.image.ImageRequest,java.lang.Throwable) -> a
    void onImageRequestEnded(magic.yuyong.image.ImageRequest,android.graphics.Bitmap) -> a
    void onImageRequestCancelled(magic.yuyong.image.ImageRequest) -> b
    void onImageRequestLoading(magic.yuyong.image.ImageRequest,float) -> a
magic.yuyong.image.ImageRequest$InnerCallback -> magic.yuyong.image.g:
    magic.yuyong.image.ImageRequest this$0 -> a
    void onImageLoadingStarted(magic.yuyong.image.ImageLoader) -> a
    void onImageLoadingEnded(magic.yuyong.image.ImageLoader,android.graphics.Bitmap) -> a
    void onImageLoadingFailed(magic.yuyong.image.ImageLoader,java.lang.Throwable) -> a
    void onImageLoading(magic.yuyong.image.ImageLoader,float) -> a
magic.yuyong.model.AtUser -> magic.yuyong.model.a:
    java.lang.Long id -> a
    java.lang.String nickname -> b
    java.lang.String remark -> c
    void setId(java.lang.Long) -> a
    java.lang.String getNickname() -> a
    void setNickname(java.lang.String) -> a
    java.lang.String getRemark() -> b
    void setRemark(java.lang.String) -> b
    magic.yuyong.model.AtUser parse(org.json.JSONObject) -> a
    java.util.List parseUsers(java.lang.String) -> c
magic.yuyong.model.Comment -> magic.yuyong.model.b:
    java.lang.Long id -> a
    java.lang.String text -> b
    java.lang.String create_at -> c
    magic.yuyong.model.Comment reply_comment -> d
    magic.yuyong.model.Twitter twitter -> e
    magic.yuyong.model.User user -> f
    java.lang.Long getId() -> a
    void setId(java.lang.Long) -> a
    java.lang.String getText() -> b
    void setText(java.lang.String) -> a
    java.lang.String getCreate_at() -> c
    void setCreate_at(java.lang.String) -> b
    magic.yuyong.model.Comment getReply_comment() -> d
    void setReply_comment(magic.yuyong.model.Comment) -> a
    magic.yuyong.model.Twitter getTwitter() -> e
    void setTwitter(magic.yuyong.model.Twitter) -> a
    magic.yuyong.model.User getUser() -> f
    void setUser(magic.yuyong.model.User) -> a
    magic.yuyong.model.Comment parseComment(org.json.JSONObject) -> a
    java.util.List parseComment(java.lang.String) -> c
magic.yuyong.model.Group -> magic.yuyong.model.c:
    java.lang.Long id -> a
    java.lang.String name -> b
    java.lang.String member_count -> c
    java.lang.Long getId() -> a
    void setId(java.lang.Long) -> a
    java.lang.String getName() -> b
    void setName(java.lang.String) -> a
    void setMember_count(java.lang.String) -> b
    magic.yuyong.model.Group parseGroup(org.json.JSONObject) -> a
    java.util.List parseGroup(java.lang.String) -> c
magic.yuyong.model.Repost -> magic.yuyong.model.d:
    java.lang.Long id -> a
    java.lang.String text -> b
    java.lang.String create_at -> c
    magic.yuyong.model.User user -> d
    java.lang.Long getId() -> a
    void setId(java.lang.Long) -> a
    java.lang.String getText() -> b
    void setText(java.lang.String) -> a
    java.lang.String getCreate_at() -> c
    void setCreate_at(java.lang.String) -> b
    magic.yuyong.model.User getUser() -> d
    void setUser(magic.yuyong.model.User) -> a
    magic.yuyong.model.Repost parseRepost(org.json.JSONObject) -> a
    java.util.List parseRepost(java.lang.String) -> c
magic.yuyong.model.Twitter -> magic.yuyong.model.Twitter:
    java.lang.Long id -> a
    java.lang.String text -> b
    int comments_count -> c
    int reposts_count -> d
    java.lang.String thumbnail_pic -> e
    java.lang.String bmiddle_pic -> f
    java.lang.String original_pic -> g
    int pwidth -> h
    int pheight -> i
    java.lang.String created_at -> j
    boolean favorited -> k
    java.lang.String source -> l
    boolean deleted -> m
    magic.yuyong.model.User user -> n
    magic.yuyong.model.Twitter origin -> o
    java.lang.Object extra -> p
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.Long getId() -> a
    void setId(java.lang.Long) -> a
    java.lang.String getText() -> b
    void setText(java.lang.String) -> a
    int getComments_count() -> c
    void setComments_count(int) -> a
    int getReposts_count() -> d
    void setReposts_count(int) -> b
    java.lang.String getThumbnail_pic() -> e
    void setThumbnail_pic(java.lang.String) -> b
    java.lang.String getBmiddle_pic() -> f
    void setBmiddle_pic(java.lang.String) -> c
    java.lang.String getOriginal_pic() -> g
    void setOriginal_pic(java.lang.String) -> d
    java.lang.String getCreated_at() -> h
    void setCreated_at(java.lang.String) -> e
    boolean isFavorited() -> i
    void setFavorited(boolean) -> a
    java.lang.String getSource() -> j
    void setSource(java.lang.String) -> f
    boolean isDeleted() -> k
    void setDeleted(boolean) -> b
    magic.yuyong.model.User getUser() -> l
    void setUser(magic.yuyong.model.User) -> a
    magic.yuyong.model.Twitter getOrigin() -> m
    java.lang.Object getExtra() -> n
    void setExtra(java.lang.Object) -> a
    java.lang.String getSourceText(java.lang.String) -> i
    magic.yuyong.model.Twitter parseTwitter(org.json.JSONObject) -> a
    java.util.List parseTwitter(java.lang.String) -> g
    java.util.List parseFavorites(java.lang.String) -> h
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void access$0(magic.yuyong.model.Twitter,boolean) -> a
    boolean access$1(magic.yuyong.model.Twitter) -> a
    void access$2(magic.yuyong.model.Twitter,java.lang.Long) -> a
    void access$3(magic.yuyong.model.Twitter,java.lang.String) -> a
    void access$4(magic.yuyong.model.Twitter,java.lang.String) -> b
    void access$5(magic.yuyong.model.Twitter,boolean) -> b
    void access$6(magic.yuyong.model.Twitter,java.lang.String) -> c
    void access$7(magic.yuyong.model.Twitter,java.lang.String) -> d
    void access$8(magic.yuyong.model.Twitter,java.lang.String) -> e
    void access$9(magic.yuyong.model.Twitter,java.lang.String) -> f
    void access$10(magic.yuyong.model.Twitter,int) -> a
    void access$11(magic.yuyong.model.Twitter,int) -> b
    void access$12(magic.yuyong.model.Twitter,int) -> c
    void access$13(magic.yuyong.model.Twitter,int) -> d
    void access$14(magic.yuyong.model.Twitter,magic.yuyong.model.User) -> a
    void access$15(magic.yuyong.model.Twitter,magic.yuyong.model.Twitter) -> a
magic.yuyong.model.Twitter$1 -> magic.yuyong.model.e:
    magic.yuyong.model.Twitter createFromParcel(android.os.Parcel) -> a
    magic.yuyong.model.Twitter[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
magic.yuyong.model.User -> magic.yuyong.model.User:
    java.lang.Long id -> a
    java.lang.String screen_name -> b
    java.lang.String profile_image_url -> c
    java.lang.String avatar_large -> d
    java.lang.String gender -> e
    java.lang.String location -> f
    java.lang.String description -> g
    int followers_count -> h
    int friends_count -> i
    int statuses_count -> j
    int favourites_count -> k
    boolean following -> l
    boolean follow_me -> m
    boolean isChoose -> n
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.Long getId() -> a
    void setId(java.lang.Long) -> a
    java.lang.String getScreen_name() -> b
    void setScreen_name(java.lang.String) -> a
    java.lang.String getProfile_image_url() -> c
    void setProfile_image_url(java.lang.String) -> b
    java.lang.String getAvatar_large() -> d
    void setAvatar_large(java.lang.String) -> c
    java.lang.String getGender() -> e
    void setGender(java.lang.String) -> d
    java.lang.String getLocation() -> f
    void setLocation(java.lang.String) -> e
    java.lang.String getDescription() -> g
    void setDescription(java.lang.String) -> f
    int getFollowers_count() -> h
    void setFollowers_count(int) -> a
    int getFriends_count() -> i
    void setFriends_count(int) -> b
    int getStatuses_count() -> j
    void setStatuses_count(int) -> c
    int getFavourites_count() -> k
    void setFavourites_count(int) -> d
    boolean isFollowing() -> l
    void setFollowing(boolean) -> a
    void setFollow_me(boolean) -> b
    boolean isChoose() -> m
    void setChoose(boolean) -> c
    magic.yuyong.model.User parse(org.json.JSONObject) -> a
    java.util.List parseUsers(java.lang.String) -> g
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void access$0(magic.yuyong.model.User,java.lang.Long) -> a
    void access$1(magic.yuyong.model.User,java.lang.String) -> a
    void access$2(magic.yuyong.model.User,java.lang.String) -> b
    void access$3(magic.yuyong.model.User,java.lang.String) -> c
    void access$4(magic.yuyong.model.User,java.lang.String) -> d
    void access$5(magic.yuyong.model.User,java.lang.String) -> e
    void access$6(magic.yuyong.model.User,int) -> a
    void access$7(magic.yuyong.model.User,int) -> b
    void access$8(magic.yuyong.model.User,int) -> c
    void access$9(magic.yuyong.model.User,int) -> d
    void access$10(magic.yuyong.model.User,boolean) -> a
    void access$11(magic.yuyong.model.User,boolean) -> b
magic.yuyong.model.User$1 -> magic.yuyong.model.f:
    magic.yuyong.model.User createFromParcel(android.os.Parcel) -> a
    magic.yuyong.model.User[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
magic.yuyong.persistence.AccessTokenKeeper -> magic.yuyong.e.a:
    void keepAccessToken(android.content.Context,com.weibo.sdk.android.Oauth2AccessToken) -> a
    void clear(android.content.Context) -> a
    com.weibo.sdk.android.Oauth2AccessToken readAccessToken(android.content.Context) -> b
magic.yuyong.persistence.Persistence -> magic.yuyong.e.b:
    android.content.SharedPreferences getPreferences(android.content.Context) -> i
    long getUID(android.content.Context) -> a
    void setUID(android.content.Context,long) -> a
    void setFollower(android.content.Context,int) -> a
    int getFollower(android.content.Context) -> b
    void setCmt(android.content.Context,int) -> b
    int getCmt(android.content.Context) -> c
    void setMention_status(android.content.Context,int) -> c
    int getMention_status(android.content.Context) -> d
    void setMention_cmt(android.content.Context,int) -> d
    int getMention_cmt(android.content.Context) -> e
    boolean getShowTimeLine(android.content.Context) -> f
    boolean isTimeLineMode(android.content.Context) -> g
    void setTimeLineMode(android.content.Context,boolean) -> a
    boolean isReceiveNotification(android.content.Context) -> h
    void setReceiveNotification(android.content.Context,boolean) -> b
magic.yuyong.request.RequestState -> magic.yuyong.f.a:
    int requestType -> d
    boolean isRequest -> e
    boolean isBottom -> f
    boolean isRefresh -> g
    boolean isFirstTime -> h
    long maxId -> i
    int page -> j
    java.lang.String response -> k
magic.yuyong.service.MagicReceiver -> magic.yuyong.service.MagicReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    boolean isNetworkAvailable(android.content.Context) -> a
magic.yuyong.service.NotificationService -> magic.yuyong.service.NotificationService:
    java.util.Timer timer -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    void getUnReadCount() -> a
    void onComplete(java.lang.String) -> a
    void sendNotification(java.lang.String,int) -> a
    void onError(com.weibo.sdk.android.WeiboException) -> a
magic.yuyong.service.NotificationService$1 -> magic.yuyong.service.NotificationService$1:
    magic.yuyong.service.NotificationService this$0 -> a
    void run() -> run
magic.yuyong.util.ColorUtil -> magic.yuyong.g.a:
    int[] colors -> a
    int getRandomColor() -> a
magic.yuyong.util.Debug -> magic.yuyong.g.b:
    void v(java.lang.String) -> a
    void e(java.lang.String) -> b
magic.yuyong.util.DisplayUtil -> magic.yuyong.g.c:
    int dip2px(float,float) -> a
    int sp2px(float,float) -> b
magic.yuyong.util.FaceUtil -> magic.yuyong.g.d:
    java.lang.String[] faceStrs -> a
    int[] face_ids -> b
    int getFaceDrawableID(java.lang.String) -> a
    int getFaceDrawableID(int) -> a
magic.yuyong.util.GDUtils -> magic.yuyong.g.e:
    magic.yuyong.app.GDApplication getGDApplication(android.content.Context) -> a
    magic.yuyong.image.ImageCache getImageCache(android.content.Context) -> b
    java.util.concurrent.ExecutorService getExecutor(android.content.Context) -> c
magic.yuyong.util.JsonUtil -> magic.yuyong.g.f:
    int getInt(org.json.JSONObject,java.lang.String) -> a
    java.lang.String getString(org.json.JSONObject,java.lang.String) -> b
    long getLong(org.json.JSONObject,java.lang.String) -> c
    boolean getBoolean(org.json.JSONObject,java.lang.String) -> d
    org.json.JSONObject getJSONObject(org.json.JSONObject,java.lang.String) -> e
    org.json.JSONArray getJSONArray(org.json.JSONObject,java.lang.String) -> f
magic.yuyong.util.MD5 -> magic.yuyong.g.g:
    java.lang.String toMd5(byte[]) -> a
    java.lang.String toHexString(byte[],java.lang.String) -> a
magic.yuyong.util.PicManager -> magic.yuyong.g.h:
    android.graphics.Bitmap featBitmap(byte[],int) -> a
    android.graphics.Bitmap featBitmap(java.lang.String,int) -> a
    int[] sizeOfBitmap(byte[]) -> a
    android.graphics.Bitmap prepareBitmap(byte[],android.graphics.Bitmap$Config) -> a
    android.graphics.Bitmap prepareBitmapForRes(android.content.Context,int,android.graphics.Bitmap$Config) -> a
    android.graphics.Bitmap getBitmapFormFile(java.lang.String) -> a
magic.yuyong.util.SDCardUtils -> magic.yuyong.g.i:
    java.lang.String SDCARD_DIR -> a
    java.lang.String NOMEID_FILE -> b
    boolean hasSDCard() -> a
    boolean hasDIR() -> b
    boolean hasNoMedia() -> c
    void deleteDir(java.io.File) -> a
    void createCacheDir() -> d
    byte[] getFile(java.lang.String) -> a
    void saveFile(java.lang.String,byte[]) -> a
    void saveBitmap(java.lang.String,android.graphics.Bitmap) -> a
    java.lang.String createFilePath(java.lang.String) -> b
magic.yuyong.util.StringUtil -> magic.yuyong.g.j:
    boolean isEmpty(java.lang.String) -> a
magic.yuyong.util.SystemUtil -> magic.yuyong.g.k:
    void openKeyBoard(android.content.Context) -> a
    void closeKeyBoard(android.view.View) -> a
magic.yuyong.view.AsyncImageView -> magic.yuyong.view.AsyncImageView:
    java.lang.String LOG_TAG -> a
    int mImageSource -> b
    android.graphics.Bitmap mDefaultBitmap -> c
    android.graphics.drawable.Drawable mDefaultDrawable -> d
    int mDefaultResId -> e
    java.lang.String mUrl -> f
    magic.yuyong.image.ImageRequest mRequest -> g
    boolean mPaused -> h
    android.graphics.Bitmap mBitmap -> i
    magic.yuyong.view.AsyncImageView$OnImageViewLoadListener mOnImageViewLoadListener -> j
    magic.yuyong.image.ImageProcessor mImageProcessor -> k
    android.graphics.BitmapFactory$Options mOptions -> l
    void initializeDefaultValues() -> d
    void setPaused(boolean) -> setPaused
    void setInDensity(int) -> setInDensity
    void setOptions(android.graphics.BitmapFactory$Options) -> setOptions
    void reload() -> a
    void reload(boolean) -> a
    void stopLoading() -> b
    void setOnImageViewLoadListener(magic.yuyong.view.AsyncImageView$OnImageViewLoadListener) -> setOnImageViewLoadListener
    void setUrl(java.lang.String) -> setUrl
    void setDefaultImageBitmap(android.graphics.Bitmap) -> setDefaultImageBitmap
    void setDefaultImageDrawable(android.graphics.drawable.Drawable) -> setDefaultImageDrawable
    void setDefaultImageResource(int) -> setDefaultImageResource
    void setImageProcessor(magic.yuyong.image.ImageProcessor) -> setImageProcessor
    void setDefaultImage() -> c
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onImageRequestStarted(magic.yuyong.image.ImageRequest) -> a
    void onImageRequestFailed(magic.yuyong.image.ImageRequest,java.lang.Throwable) -> a
    void onImageRequestEnded(magic.yuyong.image.ImageRequest,android.graphics.Bitmap) -> a
    void onImageRequestCancelled(magic.yuyong.image.ImageRequest) -> b
    void onImageRequestLoading(magic.yuyong.image.ImageRequest,float) -> a
magic.yuyong.view.AsyncImageView$OnImageViewLoadListener -> magic.yuyong.view.a:
    void onLoadingStarted(magic.yuyong.view.AsyncImageView) -> a
    void onLoadingEnded(magic.yuyong.view.AsyncImageView,android.graphics.Bitmap) -> a
    void onLoadingFailed(magic.yuyong.view.AsyncImageView,java.lang.Throwable) -> a
    void onLoading(magic.yuyong.view.AsyncImageView,float) -> a
magic.yuyong.view.AsyncImageView$SavedState -> magic.yuyong.view.AsyncImageView$SavedState:
    java.lang.String url -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
magic.yuyong.view.AsyncImageView$SavedState$1 -> magic.yuyong.view.b:
    magic.yuyong.view.AsyncImageView$SavedState createFromParcel(android.os.Parcel) -> a
    magic.yuyong.view.AsyncImageView$SavedState[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
magic.yuyong.view.Avatar -> magic.yuyong.view.Avatar:
    android.graphics.Paint paint_border -> a
    float borderW -> b
    void init() -> d
    void setImageBitmap(android.graphics.Bitmap) -> setImageBitmap
    android.graphics.Bitmap prepareBitmap(android.graphics.Bitmap) -> a
magic.yuyong.view.DashedLineView -> magic.yuyong.view.DashedLineView:
    void onDraw(android.graphics.Canvas) -> onDraw
magic.yuyong.view.DeskView -> magic.yuyong.view.DeskView:
    int desk_width -> a
    int desk_height -> b
    int desk_num -> c
    int current_desk_num -> d
    int item_w -> e
    int item_h -> f
    int downX -> g
    int ROW_SPACING -> h
    int COLUMN_SPACING -> i
    android.widget.Scroller scroller -> j
    android.view.GestureDetector mGestureDetector -> k
    android.graphics.Paint text_paint -> l
    boolean ignorUp -> m
    magic.yuyong.view.DeskView$OnDeskChangeListener onDeskChangeListener -> n
    android.view.View$OnClickListener onItemClickListener -> o
    java.lang.String[] type_names -> p
    java.util.List icoViews -> q
    void setOnItemClickListener(android.view.View$OnClickListener) -> setOnItemClickListener
    magic.yuyong.view.DeskView$OnDeskChangeListener getOnDeskChangeListener() -> getOnDeskChangeListener
    int getCurrent_desk_num() -> getCurrent_desk_num
    void setOnDeskChangeListener(magic.yuyong.view.DeskView$OnDeskChangeListener) -> setOnDeskChangeListener
    void init() -> b
    void prepare() -> a
    int getDeskNum() -> getDeskNum
    void handle() -> c
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void back() -> d
    void onScrollChanged(int,int,int,int) -> onScrollChanged
    void onDeskChange() -> e
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    void onClick(android.view.View) -> onClick
    int access$0(magic.yuyong.view.DeskView) -> a
    int access$1(magic.yuyong.view.DeskView) -> b
    java.lang.String[] access$2(magic.yuyong.view.DeskView) -> c
    android.graphics.Paint access$3(magic.yuyong.view.DeskView) -> d
magic.yuyong.view.DeskView$IcoView -> magic.yuyong.view.c:
    int type_id -> a
    boolean show_bitmap -> b
    android.graphics.Bitmap bm -> c
    android.graphics.Rect rect -> d
    int bm_w -> e
    int bm_h -> f
    magic.yuyong.view.DeskView this$0 -> g
    void onDraw(android.graphics.Canvas) -> onDraw
    void handle() -> a
    void access$0(magic.yuyong.view.DeskView$IcoView) -> a
magic.yuyong.view.DeskView$OnDeskChangeListener -> magic.yuyong.view.d:
    void onDeskChange(int,int) -> a
magic.yuyong.view.DivideView -> magic.yuyong.view.DivideView:
    android.view.View showView -> a
    android.view.View tagView -> b
    magic.yuyong.view.DivideView$DivideBoardBottom bottomView -> c
    magic.yuyong.view.DivideView$DivideBoardTop topView -> d
    int divideX -> e
    int divideY -> f
    android.view.GestureDetector mGestureDetector -> g
    android.graphics.Paint paint -> h
    android.graphics.Bitmap bitmap -> i
    int divideH -> j
    int animation_time -> k
    int shadow_h -> l
    android.graphics.drawable.GradientDrawable mGradientDrawable -> m
    void init() -> b
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onMeasure(int,int) -> onMeasure
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void divide(int,int,android.view.View,android.view.View) -> a
    void close() -> a
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    int access$0(magic.yuyong.view.DivideView) -> a
    android.graphics.Bitmap access$1(magic.yuyong.view.DivideView) -> b
    android.graphics.Paint access$2(magic.yuyong.view.DivideView) -> c
    int access$3(magic.yuyong.view.DivideView) -> d
    android.view.View access$4(magic.yuyong.view.DivideView) -> e
    void access$5(magic.yuyong.view.DivideView,android.graphics.Bitmap) -> a
magic.yuyong.view.DivideView$1 -> magic.yuyong.view.DivideView$1:
    magic.yuyong.view.DivideView this$0 -> a
    void run() -> run
magic.yuyong.view.DivideView$DivideBoardBottom -> magic.yuyong.view.e:
    android.widget.Scroller scroller -> a
    android.graphics.drawable.GradientDrawable mGradientDrawable -> b
    magic.yuyong.view.DivideView this$0 -> c
    void computeScroll() -> computeScroll
    void divide(boolean) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
magic.yuyong.view.DivideView$DivideBoardTop -> magic.yuyong.view.f:
    magic.yuyong.view.DivideView this$0 -> a
    void onDraw(android.graphics.Canvas) -> onDraw
magic.yuyong.view.FaceView -> magic.yuyong.view.FaceView:
    android.widget.EditText tagView -> a
    void init() -> b
    void refreshTagContent() -> a
    void refreshTagContent(java.lang.String,int) -> a
    void addFace(int) -> a
    java.util.regex.Pattern buildPattern() -> c
    void setTagView(android.widget.EditText) -> setTagView
magic.yuyong.view.FaceView$1 -> magic.yuyong.view.g:
    magic.yuyong.view.FaceView this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
magic.yuyong.view.FaceView$FaceAdapter -> magic.yuyong.view.h:
    magic.yuyong.view.FaceView this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
magic.yuyong.view.FlipBoard -> magic.yuyong.view.FlipBoard:
    android.widget.Scroller scroller -> a
    android.view.GestureDetector mGestureDetector -> b
    float scale_wide_w -> c
    float scale_h -> d
    float scale_top -> e
    int tile_h -> f
    int wide_tile_w -> g
    int narrow_tile_w -> h
    int gap_tile -> i
    int gap_page -> j
    int gap_top -> k
    int page_width -> l
    int page_height -> m
    int flip_board_width -> n
    int downX -> o
    int page -> p
    boolean refresh -> q
    java.util.List twitters -> r
    java.util.List recycleBin -> s
    magic.yuyong.view.TwitterBoard$OnFlipListener mOnFlipListener -> t
    android.view.View$OnClickListener onTileClickListener -> u
    void setOnFlipListener(magic.yuyong.view.TwitterBoard$OnFlipListener) -> setOnFlipListener
    void init() -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void setData(java.util.List) -> setData
    void computeScroll() -> computeScroll
    void notifyChildStartScroll() -> b
    void notifyChildStopScroll() -> c
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void onScrollChanged(int,int,int,int) -> onScrollChanged
    android.graphics.Rect getFlipViewRect() -> getFlipViewRect
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onMeasure(int,int) -> onMeasure
    int getPageLeft(int) -> a
    int getPageRight(int) -> b
    android.graphics.Rect getChildRect(int) -> c
    int getRandomTileWidth() -> getRandomTileWidth
    boolean onDown(android.view.MotionEvent) -> onDown
    int adjustX(float) -> a
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    int access$0(magic.yuyong.view.FlipBoard) -> a
    int access$1(magic.yuyong.view.FlipBoard) -> b
    int access$2(magic.yuyong.view.FlipBoard) -> c
    android.view.View$OnClickListener access$3(magic.yuyong.view.FlipBoard) -> d
magic.yuyong.view.FlipBoard$1 -> magic.yuyong.view.i:
    magic.yuyong.view.FlipBoard this$0 -> a
    void onClick(android.view.View) -> onClick
magic.yuyong.view.FlipBoard$2 -> magic.yuyong.view.FlipBoard$2:
    magic.yuyong.view.FlipBoard this$0 -> a
    void run() -> run
magic.yuyong.view.FlipBoard$Extra -> magic.yuyong.view.j:
    android.graphics.Rect rect -> a
    boolean isAttached -> b
    magic.yuyong.view.FlipBoard this$0 -> c
magic.yuyong.view.FlipBoard$GetBitmap -> magic.yuyong.view.FlipBoard$GetBitmap:
    magic.yuyong.view.FlipBoard$TileView tileView -> a
    magic.yuyong.model.Twitter twitter -> b
    android.graphics.Bitmap bitmap -> c
    magic.yuyong.view.FlipBoard this$0 -> d
    void run() -> run
magic.yuyong.view.FlipBoard$TileView -> magic.yuyong.view.k:
    magic.yuyong.model.Twitter twitter -> a
    android.graphics.Bitmap bitmap -> b
    android.graphics.Paint paint -> c
    android.widget.Scroller scroller -> d
    magic.yuyong.view.FlipBoard$GetBitmap mGetBitmap -> e
    int time -> f
    int type -> g
    magic.yuyong.view.FlipBoard this$0 -> h
    void computeScroll() -> computeScroll
    void onAttachedToWindow() -> onAttachedToWindow
    void autoScroll() -> c
    void stopScroll() -> d
    void prepareBitmap() -> e
    void unAttach() -> a
    void attach() -> b
    void onDraw(android.graphics.Canvas) -> onDraw
    void access$0(magic.yuyong.view.FlipBoard$TileView) -> a
    void access$1(magic.yuyong.view.FlipBoard$TileView) -> b
magic.yuyong.view.FlipBoardBg -> magic.yuyong.view.FlipBoardBg:
    android.graphics.Bitmap bitmap -> a
    int bg_width -> b
    int bg_id -> c
    void prepare() -> a
    void setBg(int) -> setBg
    void onMeasure(int,int) -> onMeasure
    void onFlip(int,int) -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onDraw(android.graphics.Canvas) -> onDraw
magic.yuyong.view.IndicatorView -> magic.yuyong.view.IndicatorView:
    int num -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    void onDeskChange(int,int) -> a
magic.yuyong.view.LeftSlideView -> magic.yuyong.view.LeftSlideView:
    int maxSlideDistance -> b
    android.widget.Scroller scroller -> c
    android.graphics.drawable.GradientDrawable drawable -> d
    boolean onLeft -> e
    int mTouchSlop -> f
    int lastY -> g
    boolean gesture -> h
    magic.yuyong.view.LeftSlideView$Listener l -> i
    android.view.VelocityTracker mVelocityTracker -> a
    void setListener(magic.yuyong.view.LeftSlideView$Listener) -> setListener
    void setMaxSlideDistance(int) -> setMaxSlideDistance
    void setGesture(boolean) -> setGesture
    boolean isOpen() -> a
    void init() -> c
    void slide() -> b
    void computeScroll() -> computeScroll
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
magic.yuyong.view.LeftSlideView$Listener -> magic.yuyong.view.l:
    void onStateChange(boolean) -> a
magic.yuyong.view.MagicLinear -> magic.yuyong.view.MagicLinear:
    int shadow_h -> a
    int fromColor -> b
    int toColor -> c
    android.graphics.drawable.GradientDrawable mGradientDrawableTB -> d
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
magic.yuyong.view.PageIndicator -> magic.yuyong.view.m:
magic.yuyong.view.RefreshView -> magic.yuyong.view.RefreshView:
    android.view.View headView -> a
    android.view.View middleView -> b
    android.view.View arrowView -> c
    android.widget.TextView textViewTop -> d
    android.widget.ProgressBar progressBarTop -> e
    android.widget.Scroller scroller -> f
    android.view.GestureDetector mGestureDetector -> g
    android.graphics.drawable.GradientDrawable shadow_BT -> h
    int shadowH -> i
    int back_duration_max -> j
    int back_duration_min -> k
    int animation_duration -> l
    float lastY -> m
    int ignore_y -> n
    boolean firstDraw -> o
    int state -> p
    magic.yuyong.view.RefreshView$Listener listener -> q
    void setListener(magic.yuyong.view.RefreshView$Listener) -> setListener
    void init(android.content.Context) -> a
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    void reSetText() -> c
    void doAnimation() -> d
    void back() -> e
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    void close() -> a
    void computeScroll() -> computeScroll
    void refresh() -> b
    boolean isTop() -> f
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
magic.yuyong.view.RefreshView$Listener -> magic.yuyong.view.n:
    void onRefresh() -> a
magic.yuyong.view.RotateView -> magic.yuyong.view.RotateView:
    android.view.SurfaceHolder holder -> a
    int width -> b
    int height -> c
    android.graphics.Point[] points -> d
    android.graphics.Point handlerPoint -> e
    int handlerIndex -> f
    android.graphics.Bitmap[] bitmaps -> g
    int[] ids -> h
    android.graphics.Paint paintPoint -> i
    android.graphics.Paint paintBorder -> j
    android.graphics.Paint paintLine -> k
    void initPaint() -> a
    android.graphics.Bitmap prepareBitmap(android.graphics.Point,android.graphics.Point,android.graphics.Point,int) -> a
    void preparePicture() -> b
    android.graphics.Rect getBitmapRect(android.graphics.Point,android.graphics.Point,android.graphics.Point) -> a
    java.util.List getTwoPoint(android.graphics.Point,android.graphics.Point) -> a
    void preparePoint(android.graphics.Point,int) -> a
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void drawPic(android.graphics.Canvas,android.graphics.Point,android.graphics.Point,android.graphics.Point,android.graphics.Bitmap) -> a
    void refreshDraw() -> c
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void run() -> run
magic.yuyong.view.ScaleImageView -> magic.yuyong.view.ScaleImageView:
    android.graphics.Matrix suitable -> a
    android.graphics.Bitmap bitmap -> b
    android.graphics.Bitmap getBitmap() -> getBitmap
    void setImageBitmap(android.graphics.Bitmap) -> setImageBitmap
    void suitable() -> d
magic.yuyong.view.TileTextView -> magic.yuyong.view.TileTextView:
    int textSize -> a
    int textColor -> b
    int lineGap -> c
    int textHeight -> d
    int max_line -> e
    java.lang.String text -> f
    android.graphics.Paint mPaint -> g
    java.util.List lines -> h
    void init() -> a
    void setText(java.lang.String) -> setText
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
magic.yuyong.view.TileTextView$Line -> magic.yuyong.view.o:
    int start -> a
    int end -> b
    int top -> c
    magic.yuyong.view.TileTextView this$0 -> d
magic.yuyong.view.TitlePageIndicator -> magic.yuyong.view.TitlePageIndicator:
    android.support.v4.view.ViewPager mViewPager -> a
    android.support.v4.view.ViewPager$OnPageChangeListener mListener -> b
    int mCurrentPage -> c
    float mPageOffset -> d
    int mScrollState -> e
    android.graphics.Paint mPaintText -> f
    boolean mBoldText -> g
    int mColorText -> h
    int mColorSelected -> i
    android.graphics.Path mPath -> j
    android.graphics.Rect mBounds -> k
    android.graphics.Paint mPaintFooterLine -> l
    magic.yuyong.view.TitlePageIndicator$IndicatorStyle mFooterIndicatorStyle -> m
    magic.yuyong.view.TitlePageIndicator$LinePosition mLinePosition -> n
    android.graphics.Paint mPaintFooterIndicator -> o
    float mFooterIndicatorHeight -> p
    float mFooterIndicatorUnderlinePadding -> q
    float mFooterPadding -> r
    float mTitlePadding -> s
    float mTopPadding -> t
    float mClipPadding -> u
    float mFooterLineHeight -> v
    int mTouchSlop -> w
    float mLastMotionX -> x
    int mActivePointerId -> y
    boolean mIsDragging -> z
    magic.yuyong.view.TitlePageIndicator$OnCenterItemClickListener mCenterItemClickListener -> A
    int[] $SWITCH_TABLE$magic$yuyong$view$TitlePageIndicator$IndicatorStyle -> B
    int getFooterColor() -> getFooterColor
    void setFooterColor(int) -> setFooterColor
    float getFooterLineHeight() -> getFooterLineHeight
    void setFooterLineHeight(float) -> setFooterLineHeight
    float getFooterIndicatorHeight() -> getFooterIndicatorHeight
    void setFooterIndicatorHeight(float) -> setFooterIndicatorHeight
    float getFooterIndicatorPadding() -> getFooterIndicatorPadding
    void setFooterIndicatorPadding(float) -> setFooterIndicatorPadding
    magic.yuyong.view.TitlePageIndicator$IndicatorStyle getFooterIndicatorStyle() -> getFooterIndicatorStyle
    void setFooterIndicatorStyle(magic.yuyong.view.TitlePageIndicator$IndicatorStyle) -> setFooterIndicatorStyle
    magic.yuyong.view.TitlePageIndicator$LinePosition getLinePosition() -> getLinePosition
    void setLinePosition(magic.yuyong.view.TitlePageIndicator$LinePosition) -> setLinePosition
    int getSelectedColor() -> getSelectedColor
    void setSelectedColor(int) -> setSelectedColor
    void setSelectedBold(boolean) -> setSelectedBold
    int getTextColor() -> getTextColor
    void setTextColor(int) -> setTextColor
    float getTextSize() -> getTextSize
    void setTextSize(float) -> setTextSize
    float getTitlePadding() -> getTitlePadding
    void setTitlePadding(float) -> setTitlePadding
    float getTopPadding() -> getTopPadding
    void setTopPadding(float) -> setTopPadding
    float getClipPadding() -> getClipPadding
    void setClipPadding(float) -> setClipPadding
    void setTypeface(android.graphics.Typeface) -> setTypeface
    android.graphics.Typeface getTypeface() -> getTypeface
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void clipViewOnTheRight(android.graphics.Rect,float,int) -> a
    void clipViewOnTheLeft(android.graphics.Rect,float,int) -> b
    java.util.ArrayList calculateAllBounds(android.graphics.Paint) -> a
    android.graphics.Rect calcBounds(int,android.graphics.Paint) -> a
    void setViewPager(android.support.v4.view.ViewPager) -> setViewPager
    void setOnCenterItemClickListener(magic.yuyong.view.TitlePageIndicator$OnCenterItemClickListener) -> setOnCenterItemClickListener
    void setCurrentItem(int) -> setCurrentItem
    void onPageScrollStateChanged(int) -> b
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void onMeasure(int,int) -> onMeasure
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    java.lang.CharSequence getTitle(int) -> c
    int[] $SWITCH_TABLE$magic$yuyong$view$TitlePageIndicator$IndicatorStyle() -> a
magic.yuyong.view.TitlePageIndicator$IndicatorStyle -> magic.yuyong.view.p:
    magic.yuyong.view.TitlePageIndicator$IndicatorStyle None -> a
    magic.yuyong.view.TitlePageIndicator$IndicatorStyle Triangle -> b
    magic.yuyong.view.TitlePageIndicator$IndicatorStyle Underline -> c
    int value -> d
    magic.yuyong.view.TitlePageIndicator$IndicatorStyle[] ENUM$VALUES -> e
    magic.yuyong.view.TitlePageIndicator$IndicatorStyle fromValue(int) -> a
    magic.yuyong.view.TitlePageIndicator$IndicatorStyle[] values() -> values
    magic.yuyong.view.TitlePageIndicator$IndicatorStyle valueOf(java.lang.String) -> valueOf
magic.yuyong.view.TitlePageIndicator$LinePosition -> magic.yuyong.view.q:
    magic.yuyong.view.TitlePageIndicator$LinePosition Bottom -> a
    magic.yuyong.view.TitlePageIndicator$LinePosition Top -> b
    int value -> c
    magic.yuyong.view.TitlePageIndicator$LinePosition[] ENUM$VALUES -> d
    magic.yuyong.view.TitlePageIndicator$LinePosition fromValue(int) -> a
    magic.yuyong.view.TitlePageIndicator$LinePosition[] values() -> values
    magic.yuyong.view.TitlePageIndicator$LinePosition valueOf(java.lang.String) -> valueOf
magic.yuyong.view.TitlePageIndicator$OnCenterItemClickListener -> magic.yuyong.view.r:
    void onCenterItemClick(int) -> a
magic.yuyong.view.TitlePageIndicator$SavedState -> magic.yuyong.view.TitlePageIndicator$SavedState:
    int currentPage -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
magic.yuyong.view.TitlePageIndicator$SavedState$1 -> magic.yuyong.view.s:
    magic.yuyong.view.TitlePageIndicator$SavedState createFromParcel(android.os.Parcel) -> a
    magic.yuyong.view.TitlePageIndicator$SavedState[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
magic.yuyong.view.TwitterBoard -> magic.yuyong.view.TwitterBoard:
    float scale_wide_w -> a
    float scale_top -> b
    float scale_bottom -> c
    int tile_h -> d
    int wide_tile_w -> e
    int narrow_tile_w -> f
    int gap_tile -> g
    int gap_top -> h
    int gap_bottom -> i
    int flip_board_width -> j
    boolean needCalculate -> k
    java.util.List tiles -> l
    java.util.List reuseView -> m
    magic.yuyong.view.TwitterBoard$OnFlipListener mOnFlipListener -> n
    magic.yuyong.view.TwitterBoardScrollView parent -> o
    magic.yuyong.view.TwitterBoard$BoundaryListener mBoundaryListener -> p
    int[] right -> q
    int[] top -> r
    android.view.View$OnClickListener onTileClickListener -> s
    int getTwittersCount() -> getTwittersCount
    magic.yuyong.view.TwitterBoard$BoundaryListener getBoundaryListener() -> getBoundaryListener
    void setBoundaryListener(magic.yuyong.view.TwitterBoard$BoundaryListener) -> setBoundaryListener
    void setOnFlipListener(magic.yuyong.view.TwitterBoard$OnFlipListener) -> setOnFlipListener
    void init() -> b
    void setScrollView(magic.yuyong.view.TwitterBoardScrollView) -> setScrollView
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void reset() -> c
    void addData(java.util.List) -> a
    void attachTile(magic.yuyong.view.TwitterBoard$Tile,boolean) -> a
    void unAttachTile(magic.yuyong.view.TwitterBoard$Tile) -> a
    android.graphics.Rect getFlipViewRect(android.view.View) -> a
    void refresh() -> a
    android.view.View getTileView(magic.yuyong.view.TwitterBoard$Tile,boolean[]) -> a
    android.graphics.drawable.Drawable getBackgroundDrawable(int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    void onTwitterBoardScrollChanged(int,int,int,int,magic.yuyong.view.TwitterBoardScrollView) -> a
magic.yuyong.view.TwitterBoard$1 -> magic.yuyong.view.t:
    magic.yuyong.view.TwitterBoard this$0 -> a
    void onClick(android.view.View) -> onClick
magic.yuyong.view.TwitterBoard$2 -> magic.yuyong.view.u:
    magic.yuyong.view.TwitterBoard this$0 -> a
    int val$color -> b
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void setAlpha(int) -> setAlpha
    int getOpacity() -> getOpacity
    void draw(android.graphics.Canvas) -> draw
magic.yuyong.view.TwitterBoard$3 -> magic.yuyong.view.v:
    magic.yuyong.view.TwitterBoard this$0 -> a
    int val$color -> b
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void setAlpha(int) -> setAlpha
    int getOpacity() -> getOpacity
    void draw(android.graphics.Canvas) -> draw
magic.yuyong.view.TwitterBoard$BoundaryListener -> magic.yuyong.view.w:
    void toTheBeginning() -> c
    void toTheEnd() -> a
magic.yuyong.view.TwitterBoard$OnFlipListener -> magic.yuyong.view.x:
    void onFlip(int,int) -> a
magic.yuyong.view.TwitterBoard$Tile -> magic.yuyong.view.y:
    android.view.View tileView -> a
    magic.yuyong.model.Twitter twitter -> b
    android.graphics.Rect rect -> c
    boolean isAttached -> d
    int color -> e
    int type -> f
    magic.yuyong.view.TwitterBoard this$0 -> g
magic.yuyong.view.TwitterBoard$ViewHolder -> magic.yuyong.view.z:
    magic.yuyong.view.TwitterBoard$Tile tile -> a
    magic.yuyong.view.Avatar avatar -> b
    android.widget.TextView name -> c
    magic.yuyong.view.TileTextView msg -> d
    android.widget.ImageView type -> e
    android.view.View has_pic -> f
    android.widget.TextView comments_count -> g
    magic.yuyong.view.TwitterBoard this$0 -> h
magic.yuyong.view.TwitterBoardScrollView -> magic.yuyong.view.TwitterBoardScrollView:
    magic.yuyong.view.TwitterBoardScrollView$TwitterBoardScrollListener mListener -> a
    magic.yuyong.view.TwitterBoardScrollView$TwitterBoardScrollListener getTwitterBoardScrollListener() -> getTwitterBoardScrollListener
    void setTwitterBoardScrollListener(magic.yuyong.view.TwitterBoardScrollView$TwitterBoardScrollListener) -> setTwitterBoardScrollListener
    void onScrollChanged(int,int,int,int) -> onScrollChanged
magic.yuyong.view.TwitterBoardScrollView$TwitterBoardScrollListener -> magic.yuyong.view.aa:
    void onTwitterBoardScrollChanged(int,int,int,int,magic.yuyong.view.TwitterBoardScrollView) -> a
magic.yuyong.view.TwitterContent -> magic.yuyong.view.TwitterContent:
    java.lang.String text -> a
    java.util.List blocks -> b
    java.util.List paintBlocks -> c
    android.view.GestureDetector mGesture -> d
    magic.yuyong.view.TwitterContent$PaintBlock catchPaintBlock -> e
    boolean action -> f
    float gap -> g
    float textSize -> h
    int textColor -> i
    float line_height -> j
    float ascent -> k
    float descent -> l
    void setAction(boolean) -> setAction
    void init(android.content.Context,android.util.AttributeSet) -> a
    void onMeasure(int,int) -> onMeasure
    void measureBlocks(int) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void setData(java.lang.String) -> setData
    int[] getBlockState(int) -> b
    void makeBlocks() -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    float access$0(magic.yuyong.view.TwitterContent) -> a
    int access$1(magic.yuyong.view.TwitterContent) -> b
magic.yuyong.view.TwitterContent$Block -> magic.yuyong.view.ab:
    int type -> a
    int start -> b
    int end -> c
    android.graphics.Paint paint -> d
    magic.yuyong.view.TwitterContent this$0 -> e
magic.yuyong.view.TwitterContent$PaintBlock -> magic.yuyong.view.ac:
    magic.yuyong.view.TwitterContent$Block belongBlock -> a
    float x -> b
    float y -> c
    int start -> d
    int end -> e
    magic.yuyong.view.TwitterContent this$0 -> f
magic.yuyong.view.TwitterImageView -> magic.yuyong.view.TwitterImageView:
    android.graphics.Bitmap bitmap -> a
    android.os.Handler mHandler -> b
    void setImageBitmap(android.graphics.Bitmap) -> setImageBitmap
    void onMeasure(int,int) -> onMeasure
    android.graphics.Bitmap access$0(magic.yuyong.view.TwitterImageView) -> a
    void access$1(magic.yuyong.view.TwitterImageView,android.graphics.Bitmap) -> a
    android.os.Handler access$2(magic.yuyong.view.TwitterImageView) -> b
magic.yuyong.view.TwitterImageView$1 -> magic.yuyong.view.ad:
    magic.yuyong.view.TwitterImageView this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
magic.yuyong.view.TwitterImageView$HandlerBitmap -> magic.yuyong.view.TwitterImageView$HandlerBitmap:
    android.graphics.Bitmap b -> b
    magic.yuyong.view.TwitterImageView this$0 -> a
    void run() -> run
magic.yuyong.view.TwitterListView -> magic.yuyong.view.TwitterListView:
    android.graphics.Paint timeLinePaint -> a
    android.graphics.Paint paint_edge -> b
    int timeLineWidth -> c
    int PAINT_COLOR -> d
    int PAINT_EDGE_COLOR -> e
    void init() -> a
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    android.graphics.Rect getOutRectInList(android.view.View,android.view.View) -> a
